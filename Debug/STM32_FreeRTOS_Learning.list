
STM32_FreeRTOS_Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002420  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800263c  0800263c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800263c  0800263c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002640  08002640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000068  080026ac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080026ac  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000241e  00000000  00000000  0002f0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  00031500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  00032338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029ced  00000000  00000000  00033038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bed5  00000000  00000000  0005cd25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd1dc  00000000  00000000  00068bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165dd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c90  00000000  00000000  00165e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000068 	.word	0x20000068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080025c8 	.word	0x080025c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	080025c8 	.word	0x080025c8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <HAL_Init+0x40>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <HAL_Init+0x40>)
 80002ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <HAL_Init+0x40>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <HAL_Init+0x40>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <HAL_Init+0x40>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <HAL_Init+0x40>)
 80002d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002d8:	2003      	movs	r0, #3
 80002da:	f000 f8c4 	bl	8000466 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002de:	2000      	movs	r0, #0
 80002e0:	f001 fbcc 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002e4:	f001 fba2 	bl	8001a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002e8:	2300      	movs	r3, #0
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40023c00 	.word	0x40023c00

080002f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return uwTick;
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <HAL_GetTick+0x14>)
 80002fa:	681b      	ldr	r3, [r3, #0]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	20000144 	.word	0x20000144

0800030c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f003 0307 	and.w	r3, r3, #7
 800031a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <__NVIC_SetPriorityGrouping+0x44>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000328:	4013      	ands	r3, r2
 800032a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800033c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800033e:	4a04      	ldr	r2, [pc, #16]	; (8000350 <__NVIC_SetPriorityGrouping+0x44>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	60d3      	str	r3, [r2, #12]
}
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <__NVIC_GetPriorityGrouping+0x18>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	0a1b      	lsrs	r3, r3, #8
 800035e:	f003 0307 	and.w	r3, r3, #7
}
 8000362:	4618      	mov	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800037a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037e:	2b00      	cmp	r3, #0
 8000380:	db0b      	blt.n	800039a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	f003 021f 	and.w	r2, r3, #31
 8000388:	4907      	ldr	r1, [pc, #28]	; (80003a8 <__NVIC_EnableIRQ+0x38>)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	095b      	lsrs	r3, r3, #5
 8000390:	2001      	movs	r0, #1
 8000392:	fa00 f202 	lsl.w	r2, r0, r2
 8000396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000e100 	.word	0xe000e100

080003ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	6039      	str	r1, [r7, #0]
 80003b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db0a      	blt.n	80003d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <__NVIC_SetPriority+0x4c>)
 80003c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ca:	0112      	lsls	r2, r2, #4
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	440b      	add	r3, r1
 80003d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003d4:	e00a      	b.n	80003ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4908      	ldr	r1, [pc, #32]	; (80003fc <__NVIC_SetPriority+0x50>)
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	f003 030f 	and.w	r3, r3, #15
 80003e2:	3b04      	subs	r3, #4
 80003e4:	0112      	lsls	r2, r2, #4
 80003e6:	b2d2      	uxtb	r2, r2
 80003e8:	440b      	add	r3, r1
 80003ea:	761a      	strb	r2, [r3, #24]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	e000e100 	.word	0xe000e100
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000400:	b480      	push	{r7}
 8000402:	b089      	sub	sp, #36	; 0x24
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000414:	69fb      	ldr	r3, [r7, #28]
 8000416:	f1c3 0307 	rsb	r3, r3, #7
 800041a:	2b04      	cmp	r3, #4
 800041c:	bf28      	it	cs
 800041e:	2304      	movcs	r3, #4
 8000420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	3304      	adds	r3, #4
 8000426:	2b06      	cmp	r3, #6
 8000428:	d902      	bls.n	8000430 <NVIC_EncodePriority+0x30>
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	3b03      	subs	r3, #3
 800042e:	e000      	b.n	8000432 <NVIC_EncodePriority+0x32>
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000438:	69bb      	ldr	r3, [r7, #24]
 800043a:	fa02 f303 	lsl.w	r3, r2, r3
 800043e:	43da      	mvns	r2, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	401a      	ands	r2, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	43d9      	mvns	r1, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000458:	4313      	orrs	r3, r2
         );
}
 800045a:	4618      	mov	r0, r3
 800045c:	3724      	adds	r7, #36	; 0x24
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff4c 	bl	800030c <__NVIC_SetPriorityGrouping>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800048e:	f7ff ff61 	bl	8000354 <__NVIC_GetPriorityGrouping>
 8000492:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	68b9      	ldr	r1, [r7, #8]
 8000498:	6978      	ldr	r0, [r7, #20]
 800049a:	f7ff ffb1 	bl	8000400 <NVIC_EncodePriority>
 800049e:	4602      	mov	r2, r0
 80004a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004a4:	4611      	mov	r1, r2
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff80 	bl	80003ac <__NVIC_SetPriority>
}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff54 	bl	8000370 <__NVIC_EnableIRQ>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b089      	sub	sp, #36	; 0x24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
 80004ea:	e177      	b.n	80007dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80004ec:	2201      	movs	r2, #1
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	697a      	ldr	r2, [r7, #20]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	429a      	cmp	r2, r3
 8000506:	f040 8166 	bne.w	80007d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d003      	beq.n	800051a <HAL_GPIO_Init+0x4a>
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	2b12      	cmp	r3, #18
 8000518:	d123      	bne.n	8000562 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	08da      	lsrs	r2, r3, #3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3208      	adds	r2, #8
 8000522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	f003 0307 	and.w	r3, r3, #7
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	220f      	movs	r2, #15
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43db      	mvns	r3, r3
 8000538:	69ba      	ldr	r2, [r7, #24]
 800053a:	4013      	ands	r3, r2
 800053c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	691a      	ldr	r2, [r3, #16]
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	f003 0307 	and.w	r3, r3, #7
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	69ba      	ldr	r2, [r7, #24]
 8000550:	4313      	orrs	r3, r2
 8000552:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	08da      	lsrs	r2, r3, #3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3208      	adds	r2, #8
 800055c:	69b9      	ldr	r1, [r7, #24]
 800055e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	2203      	movs	r2, #3
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	43db      	mvns	r3, r3
 8000574:	69ba      	ldr	r2, [r7, #24]
 8000576:	4013      	ands	r3, r2
 8000578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	f003 0203 	and.w	r2, r3, #3
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	4313      	orrs	r3, r2
 800058e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d00b      	beq.n	80005b6 <HAL_GPIO_Init+0xe6>
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d007      	beq.n	80005b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005aa:	2b11      	cmp	r3, #17
 80005ac:	d003      	beq.n	80005b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	2b12      	cmp	r3, #18
 80005b4:	d130      	bne.n	8000618 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	2203      	movs	r2, #3
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	43db      	mvns	r3, r3
 80005c8:	69ba      	ldr	r2, [r7, #24]
 80005ca:	4013      	ands	r3, r2
 80005cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	4313      	orrs	r3, r2
 80005de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	69ba      	ldr	r2, [r7, #24]
 80005e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ec:	2201      	movs	r2, #1
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	69ba      	ldr	r2, [r7, #24]
 80005f8:	4013      	ands	r3, r2
 80005fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	f003 0201 	and.w	r2, r3, #1
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	69ba      	ldr	r2, [r7, #24]
 800060e:	4313      	orrs	r3, r2
 8000610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	69ba      	ldr	r2, [r7, #24]
 8000616:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	2203      	movs	r2, #3
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	43db      	mvns	r3, r3
 800062a:	69ba      	ldr	r2, [r7, #24]
 800062c:	4013      	ands	r3, r2
 800062e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	2b00      	cmp	r3, #0
 8000652:	f000 80c0 	beq.w	80007d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4b65      	ldr	r3, [pc, #404]	; (80007f0 <HAL_GPIO_Init+0x320>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	4a64      	ldr	r2, [pc, #400]	; (80007f0 <HAL_GPIO_Init+0x320>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000664:	6453      	str	r3, [r2, #68]	; 0x44
 8000666:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <HAL_GPIO_Init+0x320>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000672:	4a60      	ldr	r2, [pc, #384]	; (80007f4 <HAL_GPIO_Init+0x324>)
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	3302      	adds	r3, #2
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	220f      	movs	r2, #15
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	4013      	ands	r3, r2
 8000694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a57      	ldr	r2, [pc, #348]	; (80007f8 <HAL_GPIO_Init+0x328>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d037      	beq.n	800070e <HAL_GPIO_Init+0x23e>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a56      	ldr	r2, [pc, #344]	; (80007fc <HAL_GPIO_Init+0x32c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d031      	beq.n	800070a <HAL_GPIO_Init+0x23a>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a55      	ldr	r2, [pc, #340]	; (8000800 <HAL_GPIO_Init+0x330>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d02b      	beq.n	8000706 <HAL_GPIO_Init+0x236>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a54      	ldr	r2, [pc, #336]	; (8000804 <HAL_GPIO_Init+0x334>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d025      	beq.n	8000702 <HAL_GPIO_Init+0x232>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a53      	ldr	r2, [pc, #332]	; (8000808 <HAL_GPIO_Init+0x338>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d01f      	beq.n	80006fe <HAL_GPIO_Init+0x22e>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a52      	ldr	r2, [pc, #328]	; (800080c <HAL_GPIO_Init+0x33c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d019      	beq.n	80006fa <HAL_GPIO_Init+0x22a>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a51      	ldr	r2, [pc, #324]	; (8000810 <HAL_GPIO_Init+0x340>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d013      	beq.n	80006f6 <HAL_GPIO_Init+0x226>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a50      	ldr	r2, [pc, #320]	; (8000814 <HAL_GPIO_Init+0x344>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d00d      	beq.n	80006f2 <HAL_GPIO_Init+0x222>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a4f      	ldr	r2, [pc, #316]	; (8000818 <HAL_GPIO_Init+0x348>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d007      	beq.n	80006ee <HAL_GPIO_Init+0x21e>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a4e      	ldr	r2, [pc, #312]	; (800081c <HAL_GPIO_Init+0x34c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d101      	bne.n	80006ea <HAL_GPIO_Init+0x21a>
 80006e6:	2309      	movs	r3, #9
 80006e8:	e012      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006ea:	230a      	movs	r3, #10
 80006ec:	e010      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006ee:	2308      	movs	r3, #8
 80006f0:	e00e      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006f2:	2307      	movs	r3, #7
 80006f4:	e00c      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006f6:	2306      	movs	r3, #6
 80006f8:	e00a      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006fa:	2305      	movs	r3, #5
 80006fc:	e008      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006fe:	2304      	movs	r3, #4
 8000700:	e006      	b.n	8000710 <HAL_GPIO_Init+0x240>
 8000702:	2303      	movs	r3, #3
 8000704:	e004      	b.n	8000710 <HAL_GPIO_Init+0x240>
 8000706:	2302      	movs	r3, #2
 8000708:	e002      	b.n	8000710 <HAL_GPIO_Init+0x240>
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <HAL_GPIO_Init+0x240>
 800070e:	2300      	movs	r3, #0
 8000710:	69fa      	ldr	r2, [r7, #28]
 8000712:	f002 0203 	and.w	r2, r2, #3
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	4093      	lsls	r3, r2
 800071a:	69ba      	ldr	r2, [r7, #24]
 800071c:	4313      	orrs	r3, r2
 800071e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000720:	4934      	ldr	r1, [pc, #208]	; (80007f4 <HAL_GPIO_Init+0x324>)
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	089b      	lsrs	r3, r3, #2
 8000726:	3302      	adds	r3, #2
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <HAL_GPIO_Init+0x350>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	43db      	mvns	r3, r3
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	4013      	ands	r3, r2
 800073c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800074a:	69ba      	ldr	r2, [r7, #24]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	4313      	orrs	r3, r2
 8000750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000752:	4a33      	ldr	r2, [pc, #204]	; (8000820 <HAL_GPIO_Init+0x350>)
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000758:	4b31      	ldr	r3, [pc, #196]	; (8000820 <HAL_GPIO_Init+0x350>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	43db      	mvns	r3, r3
 8000762:	69ba      	ldr	r2, [r7, #24]
 8000764:	4013      	ands	r3, r2
 8000766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	4313      	orrs	r3, r2
 800077a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800077c:	4a28      	ldr	r2, [pc, #160]	; (8000820 <HAL_GPIO_Init+0x350>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <HAL_GPIO_Init+0x350>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	43db      	mvns	r3, r3
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	4013      	ands	r3, r2
 8000790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <HAL_GPIO_Init+0x350>)
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <HAL_GPIO_Init+0x350>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	43db      	mvns	r3, r3
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	4013      	ands	r3, r2
 80007ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d003      	beq.n	80007d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <HAL_GPIO_Init+0x350>)
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3301      	adds	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	2b0f      	cmp	r3, #15
 80007e0:	f67f ae84 	bls.w	80004ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80007e4:	bf00      	nop
 80007e6:	3724      	adds	r7, #36	; 0x24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40013800 	.word	0x40013800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020400 	.word	0x40020400
 8000800:	40020800 	.word	0x40020800
 8000804:	40020c00 	.word	0x40020c00
 8000808:	40021000 	.word	0x40021000
 800080c:	40021400 	.word	0x40021400
 8000810:	40021800 	.word	0x40021800
 8000814:	40021c00 	.word	0x40021c00
 8000818:	40022000 	.word	0x40022000
 800081c:	40022400 	.word	0x40022400
 8000820:	40013c00 	.word	0x40013c00

08000824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
 8000830:	4613      	mov	r3, r2
 8000832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000834:	787b      	ldrb	r3, [r7, #1]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800083a:	887a      	ldrh	r2, [r7, #2]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000840:	e003      	b.n	800084a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000842:	887b      	ldrh	r3, [r7, #2]
 8000844:	041a      	lsls	r2, r3, #16
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	619a      	str	r2, [r3, #24]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_RCC_GetHCLKFreq+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000

08000870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000874:	f7ff fff0 	bl	8000858 <HAL_RCC_GetHCLKFreq>
 8000878:	4601      	mov	r1, r0
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	0a9b      	lsrs	r3, r3, #10
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	fa21 f303 	lsr.w	r3, r1, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	08002600 	.word	0x08002600

08000898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800089c:	f7ff ffdc 	bl	8000858 <HAL_RCC_GetHCLKFreq>
 80008a0:	4601      	mov	r1, r0
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	0b5b      	lsrs	r3, r3, #13
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	4a03      	ldr	r2, [pc, #12]	; (80008bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80008ae:	5cd3      	ldrb	r3, [r2, r3]
 80008b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	08002600 	.word	0x08002600

080008c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	220f      	movs	r2, #15
 80008ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_RCC_GetClockConfig+0x5c>)
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	f003 0203 	and.w	r2, r3, #3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_RCC_GetClockConfig+0x5c>)
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_RCC_GetClockConfig+0x5c>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_RCC_GetClockConfig+0x5c>)
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <HAL_RCC_GetClockConfig+0x60>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 020f 	and.w	r2, r3, #15
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	601a      	str	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40023c00 	.word	0x40023c00

08000924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d101      	bne.n	8000936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e01d      	b.n	8000972 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d106      	bne.n	8000950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f001 f976 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2202      	movs	r2, #2
 8000954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3304      	adds	r3, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4610      	mov	r0, r2
 8000964:	f000 f968 	bl	8000c38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	68da      	ldr	r2, [r3, #12]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f042 0201 	orr.w	r2, r2, #1
 8000990:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f003 0307 	and.w	r3, r3, #7
 800099c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b06      	cmp	r3, #6
 80009a2:	d007      	beq.n	80009b4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f042 0201 	orr.w	r2, r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d122      	bne.n	8000a1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d11b      	bne.n	8000a1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f06f 0202 	mvn.w	r2, #2
 80009ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2201      	movs	r2, #1
 80009f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f000 f8f8 	bl	8000bfa <HAL_TIM_IC_CaptureCallback>
 8000a0a:	e005      	b.n	8000a18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f8ea 	bl	8000be6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 f8fb 	bl	8000c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d122      	bne.n	8000a72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d11b      	bne.n	8000a72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f06f 0204 	mvn.w	r2, #4
 8000a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2202      	movs	r2, #2
 8000a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 f8ce 	bl	8000bfa <HAL_TIM_IC_CaptureCallback>
 8000a5e:	e005      	b.n	8000a6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f8c0 	bl	8000be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f8d1 	bl	8000c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	2b08      	cmp	r3, #8
 8000a7e:	d122      	bne.n	8000ac6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	d11b      	bne.n	8000ac6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f06f 0208 	mvn.w	r2, #8
 8000a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	69db      	ldr	r3, [r3, #28]
 8000aa4:	f003 0303 	and.w	r3, r3, #3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f8a4 	bl	8000bfa <HAL_TIM_IC_CaptureCallback>
 8000ab2:	e005      	b.n	8000ac0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f896 	bl	8000be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f8a7 	bl	8000c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	2b10      	cmp	r3, #16
 8000ad2:	d122      	bne.n	8000b1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	2b10      	cmp	r3, #16
 8000ae0:	d11b      	bne.n	8000b1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f06f 0210 	mvn.w	r2, #16
 8000aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2208      	movs	r2, #8
 8000af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 f87a 	bl	8000bfa <HAL_TIM_IC_CaptureCallback>
 8000b06:	e005      	b.n	8000b14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f86c 	bl	8000be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f87d 	bl	8000c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d10e      	bne.n	8000b46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d107      	bne.n	8000b46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f06f 0201 	mvn.w	r2, #1
 8000b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 f846 	bl	8000bd2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b50:	2b80      	cmp	r3, #128	; 0x80
 8000b52:	d10e      	bne.n	8000b72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	2b80      	cmp	r3, #128	; 0x80
 8000b60:	d107      	bne.n	8000b72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 f90d 	bl	8000d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7c:	2b40      	cmp	r3, #64	; 0x40
 8000b7e:	d10e      	bne.n	8000b9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8a:	2b40      	cmp	r3, #64	; 0x40
 8000b8c:	d107      	bne.n	8000b9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f000 f842 	bl	8000c22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	f003 0320 	and.w	r3, r3, #32
 8000ba8:	2b20      	cmp	r3, #32
 8000baa:	d10e      	bne.n	8000bca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	2b20      	cmp	r3, #32
 8000bb8:	d107      	bne.n	8000bca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f06f 0220 	mvn.w	r2, #32
 8000bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f8d7 	bl	8000d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a40      	ldr	r2, [pc, #256]	; (8000d4c <TIM_Base_SetConfig+0x114>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d013      	beq.n	8000c78 <TIM_Base_SetConfig+0x40>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c56:	d00f      	beq.n	8000c78 <TIM_Base_SetConfig+0x40>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a3d      	ldr	r2, [pc, #244]	; (8000d50 <TIM_Base_SetConfig+0x118>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d00b      	beq.n	8000c78 <TIM_Base_SetConfig+0x40>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a3c      	ldr	r2, [pc, #240]	; (8000d54 <TIM_Base_SetConfig+0x11c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d007      	beq.n	8000c78 <TIM_Base_SetConfig+0x40>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	; (8000d58 <TIM_Base_SetConfig+0x120>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d003      	beq.n	8000c78 <TIM_Base_SetConfig+0x40>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a3a      	ldr	r2, [pc, #232]	; (8000d5c <TIM_Base_SetConfig+0x124>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d108      	bne.n	8000c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <TIM_Base_SetConfig+0x114>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d02b      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c98:	d027      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a2c      	ldr	r2, [pc, #176]	; (8000d50 <TIM_Base_SetConfig+0x118>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d023      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <TIM_Base_SetConfig+0x11c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d01f      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a2a      	ldr	r2, [pc, #168]	; (8000d58 <TIM_Base_SetConfig+0x120>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d01b      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <TIM_Base_SetConfig+0x124>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d017      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <TIM_Base_SetConfig+0x128>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a27      	ldr	r2, [pc, #156]	; (8000d64 <TIM_Base_SetConfig+0x12c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00f      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <TIM_Base_SetConfig+0x130>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00b      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <TIM_Base_SetConfig+0x134>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d007      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <TIM_Base_SetConfig+0x138>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d003      	beq.n	8000cea <TIM_Base_SetConfig+0xb2>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <TIM_Base_SetConfig+0x13c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d108      	bne.n	8000cfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <TIM_Base_SetConfig+0x114>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d003      	beq.n	8000d30 <TIM_Base_SetConfig+0xf8>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <TIM_Base_SetConfig+0x124>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d103      	bne.n	8000d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	691a      	ldr	r2, [r3, #16]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	615a      	str	r2, [r3, #20]
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	40000400 	.word	0x40000400
 8000d54:	40000800 	.word	0x40000800
 8000d58:	40000c00 	.word	0x40000c00
 8000d5c:	40010400 	.word	0x40010400
 8000d60:	40014000 	.word	0x40014000
 8000d64:	40014400 	.word	0x40014400
 8000d68:	40014800 	.word	0x40014800
 8000d6c:	40001800 	.word	0x40001800
 8000d70:	40001c00 	.word	0x40001c00
 8000d74:	40002000 	.word	0x40002000

08000d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e03f      	b.n	8000e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d106      	bne.n	8000dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 ff5a 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2224      	movs	r2, #36	; 0x24
 8000dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f90b 	bl	8001000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2220      	movs	r2, #32
 8000e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b088      	sub	sp, #32
 8000e3e:	af02      	add	r7, sp, #8
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4613      	mov	r3, r2
 8000e48:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b20      	cmp	r3, #32
 8000e58:	f040 8083 	bne.w	8000f62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <HAL_UART_Transmit+0x2e>
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e07b      	b.n	8000f64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d101      	bne.n	8000e7a <HAL_UART_Transmit+0x40>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e074      	b.n	8000f64 <HAL_UART_Transmit+0x12a>
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2221      	movs	r2, #33	; 0x21
 8000e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000e90:	f7ff fa30 	bl	80002f4 <HAL_GetTick>
 8000e94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	88fa      	ldrh	r2, [r7, #6]
 8000e9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	88fa      	ldrh	r2, [r7, #6]
 8000ea0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000ea2:	e042      	b.n	8000f2a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eba:	d122      	bne.n	8000f02 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f000 f850 	bl	8000f6c <UART_WaitOnFlagUntilTimeout>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e046      	b.n	8000f64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ee8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d103      	bne.n	8000efa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	e017      	b.n	8000f2a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	e013      	b.n	8000f2a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 f82d 	bl	8000f6c <UART_WaitOnFlagUntilTimeout>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e023      	b.n	8000f64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	60ba      	str	r2, [r7, #8]
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1b7      	bne.n	8000ea4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f000 f814 	bl	8000f6c <UART_WaitOnFlagUntilTimeout>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e00a      	b.n	8000f64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000f62:	2302      	movs	r3, #2
  }
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f7c:	e02c      	b.n	8000fd8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f84:	d028      	beq.n	8000fd8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8000f8c:	f7ff f9b2 	bl	80002f4 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d21d      	bcs.n	8000fd8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000faa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e00f      	b.n	8000ff8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2301      	moveq	r3, #1
 8000fea:	2300      	movne	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d0c3      	beq.n	8000f7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	431a      	orrs	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4313      	orrs	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001040:	f023 030c 	bic.w	r3, r3, #12
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	68f9      	ldr	r1, [r7, #12]
 800104a:	430b      	orrs	r3, r1
 800104c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800106c:	f040 80e4 	bne.w	8001238 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4aab      	ldr	r2, [pc, #684]	; (8001324 <UART_SetConfig+0x324>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d004      	beq.n	8001084 <UART_SetConfig+0x84>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4aaa      	ldr	r2, [pc, #680]	; (8001328 <UART_SetConfig+0x328>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d16c      	bne.n	800115e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001084:	f7ff fc08 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 8001088:	4602      	mov	r2, r0
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	009a      	lsls	r2, r3, #2
 8001092:	441a      	add	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4aa3      	ldr	r2, [pc, #652]	; (800132c <UART_SetConfig+0x32c>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	095b      	lsrs	r3, r3, #5
 80010a6:	011c      	lsls	r4, r3, #4
 80010a8:	f7ff fbf6 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 80010ac:	4602      	mov	r2, r0
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	009a      	lsls	r2, r3, #2
 80010b6:	441a      	add	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fbb2 f5f3 	udiv	r5, r2, r3
 80010c2:	f7ff fbe9 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 80010c6:	4602      	mov	r2, r0
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	009a      	lsls	r2, r3, #2
 80010d0:	441a      	add	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010dc:	4a93      	ldr	r2, [pc, #588]	; (800132c <UART_SetConfig+0x32c>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2264      	movs	r2, #100	; 0x64
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	1aeb      	subs	r3, r5, r3
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	3332      	adds	r3, #50	; 0x32
 80010f0:	4a8e      	ldr	r2, [pc, #568]	; (800132c <UART_SetConfig+0x32c>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80010fe:	441c      	add	r4, r3
 8001100:	f7ff fbca 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 8001104:	4602      	mov	r2, r0
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009a      	lsls	r2, r3, #2
 800110e:	441a      	add	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fbb2 f5f3 	udiv	r5, r2, r3
 800111a:	f7ff fbbd 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 800111e:	4602      	mov	r2, r0
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	009a      	lsls	r2, r3, #2
 8001128:	441a      	add	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fbb2 f3f3 	udiv	r3, r2, r3
 8001134:	4a7d      	ldr	r2, [pc, #500]	; (800132c <UART_SetConfig+0x32c>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2264      	movs	r2, #100	; 0x64
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	1aeb      	subs	r3, r5, r3
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	3332      	adds	r3, #50	; 0x32
 8001148:	4a78      	ldr	r2, [pc, #480]	; (800132c <UART_SetConfig+0x32c>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	f003 0207 	and.w	r2, r3, #7
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4422      	add	r2, r4
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	e154      	b.n	8001408 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800115e:	f7ff fb87 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 8001162:	4602      	mov	r2, r0
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	009a      	lsls	r2, r3, #2
 800116c:	441a      	add	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fbb2 f3f3 	udiv	r3, r2, r3
 8001178:	4a6c      	ldr	r2, [pc, #432]	; (800132c <UART_SetConfig+0x32c>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	011c      	lsls	r4, r3, #4
 8001182:	f7ff fb75 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 8001186:	4602      	mov	r2, r0
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	009a      	lsls	r2, r3, #2
 8001190:	441a      	add	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fbb2 f5f3 	udiv	r5, r2, r3
 800119c:	f7ff fb68 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 80011a0:	4602      	mov	r2, r0
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	009a      	lsls	r2, r3, #2
 80011aa:	441a      	add	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4a5d      	ldr	r2, [pc, #372]	; (800132c <UART_SetConfig+0x32c>)
 80011b8:	fba2 2303 	umull	r2, r3, r2, r3
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	2264      	movs	r2, #100	; 0x64
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	1aeb      	subs	r3, r5, r3
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	3332      	adds	r3, #50	; 0x32
 80011ca:	4a58      	ldr	r2, [pc, #352]	; (800132c <UART_SetConfig+0x32c>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80011d8:	441c      	add	r4, r3
 80011da:	f7ff fb49 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 80011de:	4602      	mov	r2, r0
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009a      	lsls	r2, r3, #2
 80011e8:	441a      	add	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80011f4:	f7ff fb3c 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	009a      	lsls	r2, r3, #2
 8001202:	441a      	add	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4a47      	ldr	r2, [pc, #284]	; (800132c <UART_SetConfig+0x32c>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	095b      	lsrs	r3, r3, #5
 8001216:	2264      	movs	r2, #100	; 0x64
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	1aeb      	subs	r3, r5, r3
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	3332      	adds	r3, #50	; 0x32
 8001222:	4a42      	ldr	r2, [pc, #264]	; (800132c <UART_SetConfig+0x32c>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	095b      	lsrs	r3, r3, #5
 800122a:	f003 0207 	and.w	r2, r3, #7
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4422      	add	r2, r4
 8001234:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001236:	e0e7      	b.n	8001408 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a39      	ldr	r2, [pc, #228]	; (8001324 <UART_SetConfig+0x324>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d004      	beq.n	800124c <UART_SetConfig+0x24c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a38      	ldr	r2, [pc, #224]	; (8001328 <UART_SetConfig+0x328>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d171      	bne.n	8001330 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800124c:	f7ff fb24 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 8001250:	4602      	mov	r2, r0
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	009a      	lsls	r2, r3, #2
 800125a:	441a      	add	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4a31      	ldr	r2, [pc, #196]	; (800132c <UART_SetConfig+0x32c>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	095b      	lsrs	r3, r3, #5
 800126e:	011c      	lsls	r4, r3, #4
 8001270:	f7ff fb12 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 8001274:	4602      	mov	r2, r0
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	009a      	lsls	r2, r3, #2
 800127e:	441a      	add	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	fbb2 f5f3 	udiv	r5, r2, r3
 800128a:	f7ff fb05 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 800128e:	4602      	mov	r2, r0
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009a      	lsls	r2, r3, #2
 8001298:	441a      	add	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a4:	4a21      	ldr	r2, [pc, #132]	; (800132c <UART_SetConfig+0x32c>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2264      	movs	r2, #100	; 0x64
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	1aeb      	subs	r3, r5, r3
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	3332      	adds	r3, #50	; 0x32
 80012b8:	4a1c      	ldr	r2, [pc, #112]	; (800132c <UART_SetConfig+0x32c>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012c4:	441c      	add	r4, r3
 80012c6:	f7ff fae7 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	009a      	lsls	r2, r3, #2
 80012d4:	441a      	add	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80012e0:	f7ff fada 	bl	8000898 <HAL_RCC_GetPCLK2Freq>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	009a      	lsls	r2, r3, #2
 80012ee:	441a      	add	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <UART_SetConfig+0x32c>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	095b      	lsrs	r3, r3, #5
 8001302:	2264      	movs	r2, #100	; 0x64
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	1aeb      	subs	r3, r5, r3
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	3332      	adds	r3, #50	; 0x32
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <UART_SetConfig+0x32c>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	f003 020f 	and.w	r2, r3, #15
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4422      	add	r2, r4
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	e071      	b.n	8001408 <UART_SetConfig+0x408>
 8001324:	40011000 	.word	0x40011000
 8001328:	40011400 	.word	0x40011400
 800132c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001330:	f7ff fa9e 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 8001334:	4602      	mov	r2, r0
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	009a      	lsls	r2, r3, #2
 800133e:	441a      	add	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4a31      	ldr	r2, [pc, #196]	; (8001410 <UART_SetConfig+0x410>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	011c      	lsls	r4, r3, #4
 8001354:	f7ff fa8c 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 8001358:	4602      	mov	r2, r0
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	009a      	lsls	r2, r3, #2
 8001362:	441a      	add	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	fbb2 f5f3 	udiv	r5, r2, r3
 800136e:	f7ff fa7f 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 8001372:	4602      	mov	r2, r0
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	009a      	lsls	r2, r3, #2
 800137c:	441a      	add	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <UART_SetConfig+0x410>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2264      	movs	r2, #100	; 0x64
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	1aeb      	subs	r3, r5, r3
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	3332      	adds	r3, #50	; 0x32
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <UART_SetConfig+0x410>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013a8:	441c      	add	r4, r3
 80013aa:	f7ff fa61 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	009a      	lsls	r2, r3, #2
 80013b8:	441a      	add	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80013c4:	f7ff fa54 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	009a      	lsls	r2, r3, #2
 80013d2:	441a      	add	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <UART_SetConfig+0x410>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	095b      	lsrs	r3, r3, #5
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	1aeb      	subs	r3, r5, r3
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	3332      	adds	r3, #50	; 0x32
 80013f2:	4a07      	ldr	r2, [pc, #28]	; (8001410 <UART_SetConfig+0x410>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	f003 020f 	and.w	r2, r3, #15
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4422      	add	r2, r4
 8001404:	609a      	str	r2, [r3, #8]
}
 8001406:	e7ff      	b.n	8001408 <UART_SetConfig+0x408>
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	51eb851f 	.word	0x51eb851f

08001414 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6892      	ldr	r2, [r2, #8]
 8001472:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6852      	ldr	r2, [r2, #4]
 800147c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	d103      	bne.n	8001490 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014ba:	4b50      	ldr	r3, [pc, #320]	; (80015fc <xTaskIncrementTick+0x14c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 808c 	bne.w	80015dc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80014c4:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <xTaskIncrementTick+0x150>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80014cc:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <xTaskIncrementTick+0x150>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d11f      	bne.n	8001518 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80014d8:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <xTaskIncrementTick+0x154>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d009      	beq.n	80014f6 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e6:	f383 8811 	msr	BASEPRI, r3
 80014ea:	f3bf 8f6f 	isb	sy
 80014ee:	f3bf 8f4f 	dsb	sy
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	e7fe      	b.n	80014f4 <xTaskIncrementTick+0x44>
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <xTaskIncrementTick+0x154>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	4b42      	ldr	r3, [pc, #264]	; (8001608 <xTaskIncrementTick+0x158>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a40      	ldr	r2, [pc, #256]	; (8001604 <xTaskIncrementTick+0x154>)
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4a40      	ldr	r2, [pc, #256]	; (8001608 <xTaskIncrementTick+0x158>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b40      	ldr	r3, [pc, #256]	; (800160c <xTaskIncrementTick+0x15c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a3e      	ldr	r2, [pc, #248]	; (800160c <xTaskIncrementTick+0x15c>)
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	f000 f908 	bl	8001728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001518:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <xTaskIncrementTick+0x160>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	429a      	cmp	r2, r3
 8001520:	d34d      	bcc.n	80015be <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001522:	4b38      	ldr	r3, [pc, #224]	; (8001604 <xTaskIncrementTick+0x154>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <xTaskIncrementTick+0x80>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <xTaskIncrementTick+0x82>
 8001530:	2300      	movs	r3, #0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <xTaskIncrementTick+0x160>)
 8001538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800153c:	601a      	str	r2, [r3, #0]
					break;
 800153e:	e03e      	b.n	80015be <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001540:	4b30      	ldr	r3, [pc, #192]	; (8001604 <xTaskIncrementTick+0x154>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	d203      	bcs.n	8001560 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001558:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <xTaskIncrementTick+0x160>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
						break;
 800155e:	e02e      	b.n	80015be <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3304      	adds	r3, #4
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff79 	bl	800145c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3318      	adds	r3, #24
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff70 	bl	800145c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	2201      	movs	r2, #1
 8001582:	409a      	lsls	r2, r3
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <xTaskIncrementTick+0x164>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	4a22      	ldr	r2, [pc, #136]	; (8001614 <xTaskIncrementTick+0x164>)
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <xTaskIncrementTick+0x168>)
 800159c:	441a      	add	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3304      	adds	r3, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f7ff ff35 	bl	8001414 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <xTaskIncrementTick+0x16c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d3b4      	bcc.n	8001522 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015bc:	e7b1      	b.n	8001522 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <xTaskIncrementTick+0x16c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	4914      	ldr	r1, [pc, #80]	; (8001618 <xTaskIncrementTick+0x168>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d907      	bls.n	80015e6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80015d6:	2301      	movs	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e004      	b.n	80015e6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <xTaskIncrementTick+0x170>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <xTaskIncrementTick+0x170>)
 80015e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <xTaskIncrementTick+0x174>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80015ee:	2301      	movs	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80015f2:	697b      	ldr	r3, [r7, #20]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000134 	.word	0x20000134
 8001600:	2000011c 	.word	0x2000011c
 8001604:	20000114 	.word	0x20000114
 8001608:	20000118 	.word	0x20000118
 800160c:	2000012c 	.word	0x2000012c
 8001610:	20000130 	.word	0x20000130
 8001614:	20000120 	.word	0x20000120
 8001618:	20000088 	.word	0x20000088
 800161c:	20000084 	.word	0x20000084
 8001620:	20000124 	.word	0x20000124
 8001624:	20000128 	.word	0x20000128

08001628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <vTaskSwitchContext+0xec>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <vTaskSwitchContext+0xf0>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800163c:	e065      	b.n	800170a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <vTaskSwitchContext+0xf0>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001644:	4b35      	ldr	r3, [pc, #212]	; (800171c <vTaskSwitchContext+0xf4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	429a      	cmp	r2, r3
 800165a:	d111      	bne.n	8001680 <vTaskSwitchContext+0x58>
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	429a      	cmp	r2, r3
 8001666:	d10b      	bne.n	8001680 <vTaskSwitchContext+0x58>
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	3308      	adds	r3, #8
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	429a      	cmp	r2, r3
 8001672:	d105      	bne.n	8001680 <vTaskSwitchContext+0x58>
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	330c      	adds	r3, #12
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	429a      	cmp	r2, r3
 800167e:	d008      	beq.n	8001692 <vTaskSwitchContext+0x6a>
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <vTaskSwitchContext+0xf4>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <vTaskSwitchContext+0xf4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3334      	adds	r3, #52	; 0x34
 800168a:	4619      	mov	r1, r3
 800168c:	4610      	mov	r0, r2
 800168e:	f000 f8e3 	bl	8001858 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <vTaskSwitchContext+0xf8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	fab3 f383 	clz	r3, r3
 800169e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80016a0:	7afb      	ldrb	r3, [r7, #11]
 80016a2:	f1c3 031f 	rsb	r3, r3, #31
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	491e      	ldr	r1, [pc, #120]	; (8001724 <vTaskSwitchContext+0xfc>)
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <vTaskSwitchContext+0xa8>
	__asm volatile
 80016bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c0:	f383 8811 	msr	BASEPRI, r3
 80016c4:	f3bf 8f6f 	isb	sy
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	e7fe      	b.n	80016ce <vTaskSwitchContext+0xa6>
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <vTaskSwitchContext+0xfc>)
 80016dc:	4413      	add	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	3308      	adds	r3, #8
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d104      	bne.n	8001700 <vTaskSwitchContext+0xd8>
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <vTaskSwitchContext+0xf4>)
 8001708:	6013      	str	r3, [r2, #0]
}
 800170a:	bf00      	nop
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000134 	.word	0x20000134
 8001718:	20000128 	.word	0x20000128
 800171c:	20000084 	.word	0x20000084
 8001720:	20000120 	.word	0x20000120
 8001724:	20000088 	.word	0x20000088

08001728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <prvResetNextTaskUnblockTime+0x44>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <prvResetNextTaskUnblockTime+0x14>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <prvResetNextTaskUnblockTime+0x16>
 800173c:	2300      	movs	r3, #0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <prvResetNextTaskUnblockTime+0x48>)
 8001744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001748:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800174a:	e008      	b.n	800175e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <prvResetNextTaskUnblockTime+0x44>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <prvResetNextTaskUnblockTime+0x48>)
 800175c:	6013      	str	r3, [r2, #0]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000114 	.word	0x20000114
 8001770:	20000130 	.word	0x20000130
	...

08001780 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <pxCurrentTCBConst2>)
 8001782:	6819      	ldr	r1, [r3, #0]
 8001784:	6808      	ldr	r0, [r1, #0]
 8001786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800178a:	f380 8809 	msr	PSP, r0
 800178e:	f3bf 8f6f 	isb	sy
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f380 8811 	msr	BASEPRI, r0
 800179a:	4770      	bx	lr
 800179c:	f3af 8000 	nop.w

080017a0 <pxCurrentTCBConst2>:
 80017a0:	20000084 	.word	0x20000084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
	...

080017b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80017b0:	f3ef 8009 	mrs	r0, PSP
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <pxCurrentTCBConst>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	f01e 0f10 	tst.w	lr, #16
 80017c0:	bf08      	it	eq
 80017c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80017c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ca:	6010      	str	r0, [r2, #0]
 80017cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80017d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017d4:	f380 8811 	msr	BASEPRI, r0
 80017d8:	f3bf 8f4f 	dsb	sy
 80017dc:	f3bf 8f6f 	isb	sy
 80017e0:	f7ff ff22 	bl	8001628 <vTaskSwitchContext>
 80017e4:	f04f 0000 	mov.w	r0, #0
 80017e8:	f380 8811 	msr	BASEPRI, r0
 80017ec:	bc09      	pop	{r0, r3}
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	6808      	ldr	r0, [r1, #0]
 80017f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f6:	f01e 0f10 	tst.w	lr, #16
 80017fa:	bf08      	it	eq
 80017fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001800:	f380 8809 	msr	PSP, r0
 8001804:	f3bf 8f6f 	isb	sy
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w

08001810 <pxCurrentTCBConst>:
 8001810:	20000084 	.word	0x20000084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop

08001818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001822:	f383 8811 	msr	BASEPRI, r3
 8001826:	f3bf 8f6f 	isb	sy
 800182a:	f3bf 8f4f 	dsb	sy
 800182e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001830:	f7ff fe3e 	bl	80014b0 <xTaskIncrementTick>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SysTick_Handler+0x3c>)
 800183c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	e000ed04 	.word	0xe000ed04

08001858 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <main>:
static void MX_USART3_UART_Init(void);
static void print(char string[]);


int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  HAL_Init();
 8001874:	f7fe fd1c 	bl	80002b0 <HAL_Init>

  
  MX_GPIO_Init();
 8001878:	f000 f854 	bl	8001924 <MX_GPIO_Init>

  MX_USART3_UART_Init();
 800187c:	f000 f828 	bl	80018d0 <MX_USART3_UART_Init>


  while (1)
  {
	  print("Hello world!\r\n");
 8001880:	4801      	ldr	r0, [pc, #4]	; (8001888 <main+0x18>)
 8001882:	f000 f803 	bl	800188c <print>
 8001886:	e7fb      	b.n	8001880 <main+0x10>
 8001888:	080025e0 	.word	0x080025e0

0800188c <print>:
 }

}

static void print(char string[]){
 800188c:	b580      	push	{r7, lr}
 800188e:	b0b6      	sub	sp, #216	; 0xd8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	char buffer[200];
	int len;
	sprintf(buffer, string);
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fa98 	bl	8001dd0 <siprintf>
	len = strlen(buffer);
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fcab 	bl	8000200 <strlen>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 80018b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	f107 010c 	add.w	r1, r7, #12
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <print+0x40>)
 80018c0:	f7ff fabb 	bl	8000e3a <HAL_UART_Transmit>

}
 80018c4:	bf00      	nop
 80018c6:	37d8      	adds	r7, #216	; 0xd8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000148 	.word	0x20000148

080018d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <MX_USART3_UART_Init+0x50>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART3_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART3_UART_Init+0x4c>)
 8001908:	f7ff fa4a 	bl	8000da0 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001912:	f000 f881 	bl	8001a18 <Error_Handler>
  }

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000148 	.word	0x20000148
 8001920:	40004800 	.word	0x40004800

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <MX_GPIO_Init+0xe4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a31      	ldr	r2, [pc, #196]	; (8001a08 <MX_GPIO_Init+0xe4>)
 8001944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <MX_GPIO_Init+0xe4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]

  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <MX_GPIO_Init+0xe4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <MX_GPIO_Init+0xe4>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <MX_GPIO_Init+0xe4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_GPIO_Init+0xe4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a23      	ldr	r2, [pc, #140]	; (8001a08 <MX_GPIO_Init+0xe4>)
 800197c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_GPIO_Init+0xe4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_SET); //PORT D
 800198e:	2201      	movs	r2, #1
 8001990:	2130      	movs	r1, #48	; 0x30
 8001992:	481e      	ldr	r0, [pc, #120]	; (8001a0c <MX_GPIO_Init+0xe8>)
 8001994:	f7fe ff46 	bl	8000824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET); //PORT K
 8001998:	2201      	movs	r2, #1
 800199a:	2108      	movs	r1, #8
 800199c:	481c      	ldr	r0, [pc, #112]	; (8001a10 <MX_GPIO_Init+0xec>)
 800199e:	f7fe ff41 	bl	8000824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); //PORT G
 80019a2:	2201      	movs	r2, #1
 80019a4:	2140      	movs	r1, #64	; 0x40
 80019a6:	481b      	ldr	r0, [pc, #108]	; (8001a14 <MX_GPIO_Init+0xf0>)
 80019a8:	f7fe ff3c 	bl	8000824 <HAL_GPIO_WritePin>



  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80019ac:	2330      	movs	r3, #48	; 0x30
 80019ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019b0:	2311      	movs	r3, #17
 80019b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	4619      	mov	r1, r3
 80019c2:	4812      	ldr	r0, [pc, #72]	; (8001a0c <MX_GPIO_Init+0xe8>)
 80019c4:	f7fe fd84 	bl	80004d0 <HAL_GPIO_Init>


  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80019c8:	2308      	movs	r3, #8
 80019ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019cc:	2311      	movs	r3, #17
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	480c      	ldr	r0, [pc, #48]	; (8001a10 <MX_GPIO_Init+0xec>)
 80019e0:	f7fe fd76 	bl	80004d0 <HAL_GPIO_Init>


  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80019e4:	2340      	movs	r3, #64	; 0x40
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019e8:	2311      	movs	r3, #17
 80019ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_GPIO_Init+0xf0>)
 80019fc:	f7fe fd68 	bl	80004d0 <HAL_GPIO_Init>

}
 8001a00:	bf00      	nop
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	40022800 	.word	0x40022800
 8001a14:	40021800 	.word	0x40021800

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	print("Error in USART3");
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <Error_Handler+0x10>)
 8001a1e:	f7ff ff35 	bl	800188c <print>
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	080025f0 	.word	0x080025f0

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	2036      	movs	r0, #54	; 0x36
 8001a92:	f7fe fcf3 	bl	800047c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001a96:	2036      	movs	r0, #54	; 0x36
 8001a98:	f7fe fd0c 	bl	80004b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_InitTick+0xa4>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_InitTick+0xa4>)
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_InitTick+0xa4>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ab8:	f107 0210 	add.w	r2, r7, #16
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fefc 	bl	80008c0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ac8:	f7fe fed2 	bl	8000870 <HAL_RCC_GetPCLK1Freq>
 8001acc:	4603      	mov	r3, r0
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_InitTick+0xa8>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0c9b      	lsrs	r3, r3, #18
 8001adc:	3b01      	subs	r3, #1
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_InitTick+0xac>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_InitTick+0xb0>)
 8001ae4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_InitTick+0xac>)
 8001ae8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_InitTick+0xac>)
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_InitTick+0xac>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_InitTick+0xac>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b00:	4809      	ldr	r0, [pc, #36]	; (8001b28 <HAL_InitTick+0xac>)
 8001b02:	f7fe ff0f 	bl	8000924 <HAL_TIM_Base_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d104      	bne.n	8001b16 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b0c:	4806      	ldr	r0, [pc, #24]	; (8001b28 <HAL_InitTick+0xac>)
 8001b0e:	f7fe ff34 	bl	800097a <HAL_TIM_Base_Start_IT>
 8001b12:	4603      	mov	r3, r0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3730      	adds	r7, #48	; 0x30
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	431bde83 	.word	0x431bde83
 8001b28:	20000188 	.word	0x20000188
 8001b2c:	40001000 	.word	0x40001000

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <TIM6_DAC_IRQHandler+0x10>)
 8001b6a:	f7fe ff2a 	bl	80009c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000188 	.word	0x20000188

08001b78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_sbrk+0x50>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x16>
		heap_end = &end;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <_sbrk+0x50>)
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <_sbrk+0x54>)
 8001b8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <_sbrk+0x50>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <_sbrk+0x50>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	466a      	mov	r2, sp
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d907      	bls.n	8001bb2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ba2:	f000 f8df 	bl	8001d64 <__errno>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	230c      	movs	r3, #12
 8001baa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb0:	e006      	b.n	8001bc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <_sbrk+0x50>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a03      	ldr	r2, [pc, #12]	; (8001bc8 <_sbrk+0x50>)
 8001bbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000138 	.word	0x20000138
 8001bcc:	200001d0 	.word	0x200001d0

08001bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <SystemInit+0x60>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <SystemInit+0x60>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <SystemInit+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <SystemInit+0x64>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <SystemInit+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <SystemInit+0x64>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <SystemInit+0x64>)
 8001bfc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <SystemInit+0x64>)
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <SystemInit+0x68>)
 8001c0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <SystemInit+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <SystemInit+0x64>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <SystemInit+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SystemInit+0x60>)
 8001c20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c24:	609a      	str	r2, [r3, #8]
#endif
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	40023800 	.word	0x40023800
 8001c38:	24003010 	.word	0x24003010

08001c3c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_TIM_Base_MspInit+0x3c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10d      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_TIM_Base_MspInit+0x40>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_TIM_Base_MspInit+0x40>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_TIM_Base_MspInit+0x40>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40023800 	.word	0x40023800

08001c80 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_UART_MspInit+0x84>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d12c      	bne.n	8001cfc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_UART_MspInit+0x88>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_UART_MspInit+0x88>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_UART_MspInit+0x88>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_UART_MspInit+0x88>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_UART_MspInit+0x88>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_UART_MspInit+0x88>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cec:	2307      	movs	r3, #7
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <HAL_UART_MspInit+0x8c>)
 8001cf8:	f7fe fbea 	bl	80004d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	; 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40004800 	.word	0x40004800
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020400 	.word	0x40020400

08001d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d16:	e003      	b.n	8001d20 <LoopCopyDataInit>

08001d18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d1e:	3104      	adds	r1, #4

08001d20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d28:	d3f6      	bcc.n	8001d18 <CopyDataInit>
  ldr  r2, =_sbss
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d2c:	e002      	b.n	8001d34 <LoopFillZerobss>

08001d2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d30:	f842 3b04 	str.w	r3, [r2], #4

08001d34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d38:	d3f9      	bcc.n	8001d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d3a:	f7ff ff49 	bl	8001bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f000 f817 	bl	8001d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d42:	f7ff fd95 	bl	8001870 <main>
  bx  lr    
 8001d46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d48:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001d4c:	08002644 	.word	0x08002644
  ldr  r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d54:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001d58:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001d5c:	200001cc 	.word	0x200001cc

08001d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC_IRQHandler>
	...

08001d64 <__errno>:
 8001d64:	4b01      	ldr	r3, [pc, #4]	; (8001d6c <__errno+0x8>)
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000004 	.word	0x20000004

08001d70 <__libc_init_array>:
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	4e0d      	ldr	r6, [pc, #52]	; (8001da8 <__libc_init_array+0x38>)
 8001d74:	4c0d      	ldr	r4, [pc, #52]	; (8001dac <__libc_init_array+0x3c>)
 8001d76:	1ba4      	subs	r4, r4, r6
 8001d78:	10a4      	asrs	r4, r4, #2
 8001d7a:	2500      	movs	r5, #0
 8001d7c:	42a5      	cmp	r5, r4
 8001d7e:	d109      	bne.n	8001d94 <__libc_init_array+0x24>
 8001d80:	4e0b      	ldr	r6, [pc, #44]	; (8001db0 <__libc_init_array+0x40>)
 8001d82:	4c0c      	ldr	r4, [pc, #48]	; (8001db4 <__libc_init_array+0x44>)
 8001d84:	f000 fc20 	bl	80025c8 <_init>
 8001d88:	1ba4      	subs	r4, r4, r6
 8001d8a:	10a4      	asrs	r4, r4, #2
 8001d8c:	2500      	movs	r5, #0
 8001d8e:	42a5      	cmp	r5, r4
 8001d90:	d105      	bne.n	8001d9e <__libc_init_array+0x2e>
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d98:	4798      	blx	r3
 8001d9a:	3501      	adds	r5, #1
 8001d9c:	e7ee      	b.n	8001d7c <__libc_init_array+0xc>
 8001d9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001da2:	4798      	blx	r3
 8001da4:	3501      	adds	r5, #1
 8001da6:	e7f2      	b.n	8001d8e <__libc_init_array+0x1e>
 8001da8:	0800263c 	.word	0x0800263c
 8001dac:	0800263c 	.word	0x0800263c
 8001db0:	0800263c 	.word	0x0800263c
 8001db4:	08002640 	.word	0x08002640

08001db8 <memcpy>:
 8001db8:	b510      	push	{r4, lr}
 8001dba:	1e43      	subs	r3, r0, #1
 8001dbc:	440a      	add	r2, r1
 8001dbe:	4291      	cmp	r1, r2
 8001dc0:	d100      	bne.n	8001dc4 <memcpy+0xc>
 8001dc2:	bd10      	pop	{r4, pc}
 8001dc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001dcc:	e7f7      	b.n	8001dbe <memcpy+0x6>
	...

08001dd0 <siprintf>:
 8001dd0:	b40e      	push	{r1, r2, r3}
 8001dd2:	b500      	push	{lr}
 8001dd4:	b09c      	sub	sp, #112	; 0x70
 8001dd6:	ab1d      	add	r3, sp, #116	; 0x74
 8001dd8:	9002      	str	r0, [sp, #8]
 8001dda:	9006      	str	r0, [sp, #24]
 8001ddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <siprintf+0x38>)
 8001de2:	9107      	str	r1, [sp, #28]
 8001de4:	9104      	str	r1, [sp, #16]
 8001de6:	4909      	ldr	r1, [pc, #36]	; (8001e0c <siprintf+0x3c>)
 8001de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8001dec:	9105      	str	r1, [sp, #20]
 8001dee:	6800      	ldr	r0, [r0, #0]
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	a902      	add	r1, sp, #8
 8001df4:	f000 f866 	bl	8001ec4 <_svfiprintf_r>
 8001df8:	9b02      	ldr	r3, [sp, #8]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	b01c      	add	sp, #112	; 0x70
 8001e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e04:	b003      	add	sp, #12
 8001e06:	4770      	bx	lr
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	ffff0208 	.word	0xffff0208

08001e10 <__ssputs_r>:
 8001e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e14:	688e      	ldr	r6, [r1, #8]
 8001e16:	429e      	cmp	r6, r3
 8001e18:	4682      	mov	sl, r0
 8001e1a:	460c      	mov	r4, r1
 8001e1c:	4690      	mov	r8, r2
 8001e1e:	4699      	mov	r9, r3
 8001e20:	d837      	bhi.n	8001e92 <__ssputs_r+0x82>
 8001e22:	898a      	ldrh	r2, [r1, #12]
 8001e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e28:	d031      	beq.n	8001e8e <__ssputs_r+0x7e>
 8001e2a:	6825      	ldr	r5, [r4, #0]
 8001e2c:	6909      	ldr	r1, [r1, #16]
 8001e2e:	1a6f      	subs	r7, r5, r1
 8001e30:	6965      	ldr	r5, [r4, #20]
 8001e32:	2302      	movs	r3, #2
 8001e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e38:	fb95 f5f3 	sdiv	r5, r5, r3
 8001e3c:	f109 0301 	add.w	r3, r9, #1
 8001e40:	443b      	add	r3, r7
 8001e42:	429d      	cmp	r5, r3
 8001e44:	bf38      	it	cc
 8001e46:	461d      	movcc	r5, r3
 8001e48:	0553      	lsls	r3, r2, #21
 8001e4a:	d530      	bpl.n	8001eae <__ssputs_r+0x9e>
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f000 fb21 	bl	8002494 <_malloc_r>
 8001e52:	4606      	mov	r6, r0
 8001e54:	b950      	cbnz	r0, 8001e6c <__ssputs_r+0x5c>
 8001e56:	230c      	movs	r3, #12
 8001e58:	f8ca 3000 	str.w	r3, [sl]
 8001e5c:	89a3      	ldrh	r3, [r4, #12]
 8001e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e62:	81a3      	strh	r3, [r4, #12]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e6c:	463a      	mov	r2, r7
 8001e6e:	6921      	ldr	r1, [r4, #16]
 8001e70:	f7ff ffa2 	bl	8001db8 <memcpy>
 8001e74:	89a3      	ldrh	r3, [r4, #12]
 8001e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7e:	81a3      	strh	r3, [r4, #12]
 8001e80:	6126      	str	r6, [r4, #16]
 8001e82:	6165      	str	r5, [r4, #20]
 8001e84:	443e      	add	r6, r7
 8001e86:	1bed      	subs	r5, r5, r7
 8001e88:	6026      	str	r6, [r4, #0]
 8001e8a:	60a5      	str	r5, [r4, #8]
 8001e8c:	464e      	mov	r6, r9
 8001e8e:	454e      	cmp	r6, r9
 8001e90:	d900      	bls.n	8001e94 <__ssputs_r+0x84>
 8001e92:	464e      	mov	r6, r9
 8001e94:	4632      	mov	r2, r6
 8001e96:	4641      	mov	r1, r8
 8001e98:	6820      	ldr	r0, [r4, #0]
 8001e9a:	f000 fa93 	bl	80023c4 <memmove>
 8001e9e:	68a3      	ldr	r3, [r4, #8]
 8001ea0:	1b9b      	subs	r3, r3, r6
 8001ea2:	60a3      	str	r3, [r4, #8]
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	441e      	add	r6, r3
 8001ea8:	6026      	str	r6, [r4, #0]
 8001eaa:	2000      	movs	r0, #0
 8001eac:	e7dc      	b.n	8001e68 <__ssputs_r+0x58>
 8001eae:	462a      	mov	r2, r5
 8001eb0:	f000 fb4a 	bl	8002548 <_realloc_r>
 8001eb4:	4606      	mov	r6, r0
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	d1e2      	bne.n	8001e80 <__ssputs_r+0x70>
 8001eba:	6921      	ldr	r1, [r4, #16]
 8001ebc:	4650      	mov	r0, sl
 8001ebe:	f000 fa9b 	bl	80023f8 <_free_r>
 8001ec2:	e7c8      	b.n	8001e56 <__ssputs_r+0x46>

08001ec4 <_svfiprintf_r>:
 8001ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec8:	461d      	mov	r5, r3
 8001eca:	898b      	ldrh	r3, [r1, #12]
 8001ecc:	061f      	lsls	r7, r3, #24
 8001ece:	b09d      	sub	sp, #116	; 0x74
 8001ed0:	4680      	mov	r8, r0
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	4616      	mov	r6, r2
 8001ed6:	d50f      	bpl.n	8001ef8 <_svfiprintf_r+0x34>
 8001ed8:	690b      	ldr	r3, [r1, #16]
 8001eda:	b96b      	cbnz	r3, 8001ef8 <_svfiprintf_r+0x34>
 8001edc:	2140      	movs	r1, #64	; 0x40
 8001ede:	f000 fad9 	bl	8002494 <_malloc_r>
 8001ee2:	6020      	str	r0, [r4, #0]
 8001ee4:	6120      	str	r0, [r4, #16]
 8001ee6:	b928      	cbnz	r0, 8001ef4 <_svfiprintf_r+0x30>
 8001ee8:	230c      	movs	r3, #12
 8001eea:	f8c8 3000 	str.w	r3, [r8]
 8001eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef2:	e0c8      	b.n	8002086 <_svfiprintf_r+0x1c2>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	6163      	str	r3, [r4, #20]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9309      	str	r3, [sp, #36]	; 0x24
 8001efc:	2320      	movs	r3, #32
 8001efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f02:	2330      	movs	r3, #48	; 0x30
 8001f04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f08:	9503      	str	r5, [sp, #12]
 8001f0a:	f04f 0b01 	mov.w	fp, #1
 8001f0e:	4637      	mov	r7, r6
 8001f10:	463d      	mov	r5, r7
 8001f12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f16:	b10b      	cbz	r3, 8001f1c <_svfiprintf_r+0x58>
 8001f18:	2b25      	cmp	r3, #37	; 0x25
 8001f1a:	d13e      	bne.n	8001f9a <_svfiprintf_r+0xd6>
 8001f1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001f20:	d00b      	beq.n	8001f3a <_svfiprintf_r+0x76>
 8001f22:	4653      	mov	r3, sl
 8001f24:	4632      	mov	r2, r6
 8001f26:	4621      	mov	r1, r4
 8001f28:	4640      	mov	r0, r8
 8001f2a:	f7ff ff71 	bl	8001e10 <__ssputs_r>
 8001f2e:	3001      	adds	r0, #1
 8001f30:	f000 80a4 	beq.w	800207c <_svfiprintf_r+0x1b8>
 8001f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f36:	4453      	add	r3, sl
 8001f38:	9309      	str	r3, [sp, #36]	; 0x24
 8001f3a:	783b      	ldrb	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 809d 	beq.w	800207c <_svfiprintf_r+0x1b8>
 8001f42:	2300      	movs	r3, #0
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f4c:	9304      	str	r3, [sp, #16]
 8001f4e:	9307      	str	r3, [sp, #28]
 8001f50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f54:	931a      	str	r3, [sp, #104]	; 0x68
 8001f56:	462f      	mov	r7, r5
 8001f58:	2205      	movs	r2, #5
 8001f5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001f5e:	4850      	ldr	r0, [pc, #320]	; (80020a0 <_svfiprintf_r+0x1dc>)
 8001f60:	f7fe f956 	bl	8000210 <memchr>
 8001f64:	9b04      	ldr	r3, [sp, #16]
 8001f66:	b9d0      	cbnz	r0, 8001f9e <_svfiprintf_r+0xda>
 8001f68:	06d9      	lsls	r1, r3, #27
 8001f6a:	bf44      	itt	mi
 8001f6c:	2220      	movmi	r2, #32
 8001f6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f72:	071a      	lsls	r2, r3, #28
 8001f74:	bf44      	itt	mi
 8001f76:	222b      	movmi	r2, #43	; 0x2b
 8001f78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f7c:	782a      	ldrb	r2, [r5, #0]
 8001f7e:	2a2a      	cmp	r2, #42	; 0x2a
 8001f80:	d015      	beq.n	8001fae <_svfiprintf_r+0xea>
 8001f82:	9a07      	ldr	r2, [sp, #28]
 8001f84:	462f      	mov	r7, r5
 8001f86:	2000      	movs	r0, #0
 8001f88:	250a      	movs	r5, #10
 8001f8a:	4639      	mov	r1, r7
 8001f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f90:	3b30      	subs	r3, #48	; 0x30
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d94d      	bls.n	8002032 <_svfiprintf_r+0x16e>
 8001f96:	b1b8      	cbz	r0, 8001fc8 <_svfiprintf_r+0x104>
 8001f98:	e00f      	b.n	8001fba <_svfiprintf_r+0xf6>
 8001f9a:	462f      	mov	r7, r5
 8001f9c:	e7b8      	b.n	8001f10 <_svfiprintf_r+0x4c>
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <_svfiprintf_r+0x1dc>)
 8001fa0:	1a80      	subs	r0, r0, r2
 8001fa2:	fa0b f000 	lsl.w	r0, fp, r0
 8001fa6:	4318      	orrs	r0, r3
 8001fa8:	9004      	str	r0, [sp, #16]
 8001faa:	463d      	mov	r5, r7
 8001fac:	e7d3      	b.n	8001f56 <_svfiprintf_r+0x92>
 8001fae:	9a03      	ldr	r2, [sp, #12]
 8001fb0:	1d11      	adds	r1, r2, #4
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	9103      	str	r1, [sp, #12]
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	db01      	blt.n	8001fbe <_svfiprintf_r+0xfa>
 8001fba:	9207      	str	r2, [sp, #28]
 8001fbc:	e004      	b.n	8001fc8 <_svfiprintf_r+0x104>
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	9207      	str	r2, [sp, #28]
 8001fc6:	9304      	str	r3, [sp, #16]
 8001fc8:	783b      	ldrb	r3, [r7, #0]
 8001fca:	2b2e      	cmp	r3, #46	; 0x2e
 8001fcc:	d10c      	bne.n	8001fe8 <_svfiprintf_r+0x124>
 8001fce:	787b      	ldrb	r3, [r7, #1]
 8001fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8001fd2:	d133      	bne.n	800203c <_svfiprintf_r+0x178>
 8001fd4:	9b03      	ldr	r3, [sp, #12]
 8001fd6:	1d1a      	adds	r2, r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	9203      	str	r2, [sp, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bfb8      	it	lt
 8001fe0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001fe4:	3702      	adds	r7, #2
 8001fe6:	9305      	str	r3, [sp, #20]
 8001fe8:	4d2e      	ldr	r5, [pc, #184]	; (80020a4 <_svfiprintf_r+0x1e0>)
 8001fea:	7839      	ldrb	r1, [r7, #0]
 8001fec:	2203      	movs	r2, #3
 8001fee:	4628      	mov	r0, r5
 8001ff0:	f7fe f90e 	bl	8000210 <memchr>
 8001ff4:	b138      	cbz	r0, 8002006 <_svfiprintf_r+0x142>
 8001ff6:	2340      	movs	r3, #64	; 0x40
 8001ff8:	1b40      	subs	r0, r0, r5
 8001ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8001ffe:	9b04      	ldr	r3, [sp, #16]
 8002000:	4303      	orrs	r3, r0
 8002002:	3701      	adds	r7, #1
 8002004:	9304      	str	r3, [sp, #16]
 8002006:	7839      	ldrb	r1, [r7, #0]
 8002008:	4827      	ldr	r0, [pc, #156]	; (80020a8 <_svfiprintf_r+0x1e4>)
 800200a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800200e:	2206      	movs	r2, #6
 8002010:	1c7e      	adds	r6, r7, #1
 8002012:	f7fe f8fd 	bl	8000210 <memchr>
 8002016:	2800      	cmp	r0, #0
 8002018:	d038      	beq.n	800208c <_svfiprintf_r+0x1c8>
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <_svfiprintf_r+0x1e8>)
 800201c:	bb13      	cbnz	r3, 8002064 <_svfiprintf_r+0x1a0>
 800201e:	9b03      	ldr	r3, [sp, #12]
 8002020:	3307      	adds	r3, #7
 8002022:	f023 0307 	bic.w	r3, r3, #7
 8002026:	3308      	adds	r3, #8
 8002028:	9303      	str	r3, [sp, #12]
 800202a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800202c:	444b      	add	r3, r9
 800202e:	9309      	str	r3, [sp, #36]	; 0x24
 8002030:	e76d      	b.n	8001f0e <_svfiprintf_r+0x4a>
 8002032:	fb05 3202 	mla	r2, r5, r2, r3
 8002036:	2001      	movs	r0, #1
 8002038:	460f      	mov	r7, r1
 800203a:	e7a6      	b.n	8001f8a <_svfiprintf_r+0xc6>
 800203c:	2300      	movs	r3, #0
 800203e:	3701      	adds	r7, #1
 8002040:	9305      	str	r3, [sp, #20]
 8002042:	4619      	mov	r1, r3
 8002044:	250a      	movs	r5, #10
 8002046:	4638      	mov	r0, r7
 8002048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800204c:	3a30      	subs	r2, #48	; 0x30
 800204e:	2a09      	cmp	r2, #9
 8002050:	d903      	bls.n	800205a <_svfiprintf_r+0x196>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0c8      	beq.n	8001fe8 <_svfiprintf_r+0x124>
 8002056:	9105      	str	r1, [sp, #20]
 8002058:	e7c6      	b.n	8001fe8 <_svfiprintf_r+0x124>
 800205a:	fb05 2101 	mla	r1, r5, r1, r2
 800205e:	2301      	movs	r3, #1
 8002060:	4607      	mov	r7, r0
 8002062:	e7f0      	b.n	8002046 <_svfiprintf_r+0x182>
 8002064:	ab03      	add	r3, sp, #12
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4622      	mov	r2, r4
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <_svfiprintf_r+0x1ec>)
 800206c:	a904      	add	r1, sp, #16
 800206e:	4640      	mov	r0, r8
 8002070:	f3af 8000 	nop.w
 8002074:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002078:	4681      	mov	r9, r0
 800207a:	d1d6      	bne.n	800202a <_svfiprintf_r+0x166>
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	065b      	lsls	r3, r3, #25
 8002080:	f53f af35 	bmi.w	8001eee <_svfiprintf_r+0x2a>
 8002084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002086:	b01d      	add	sp, #116	; 0x74
 8002088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800208c:	ab03      	add	r3, sp, #12
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4622      	mov	r2, r4
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <_svfiprintf_r+0x1ec>)
 8002094:	a904      	add	r1, sp, #16
 8002096:	4640      	mov	r0, r8
 8002098:	f000 f882 	bl	80021a0 <_printf_i>
 800209c:	e7ea      	b.n	8002074 <_svfiprintf_r+0x1b0>
 800209e:	bf00      	nop
 80020a0:	08002608 	.word	0x08002608
 80020a4:	0800260e 	.word	0x0800260e
 80020a8:	08002612 	.word	0x08002612
 80020ac:	00000000 	.word	0x00000000
 80020b0:	08001e11 	.word	0x08001e11

080020b4 <_printf_common>:
 80020b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020b8:	4691      	mov	r9, r2
 80020ba:	461f      	mov	r7, r3
 80020bc:	688a      	ldr	r2, [r1, #8]
 80020be:	690b      	ldr	r3, [r1, #16]
 80020c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020c4:	4293      	cmp	r3, r2
 80020c6:	bfb8      	it	lt
 80020c8:	4613      	movlt	r3, r2
 80020ca:	f8c9 3000 	str.w	r3, [r9]
 80020ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020d2:	4606      	mov	r6, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	b112      	cbz	r2, 80020de <_printf_common+0x2a>
 80020d8:	3301      	adds	r3, #1
 80020da:	f8c9 3000 	str.w	r3, [r9]
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	0699      	lsls	r1, r3, #26
 80020e2:	bf42      	ittt	mi
 80020e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80020e8:	3302      	addmi	r3, #2
 80020ea:	f8c9 3000 	strmi.w	r3, [r9]
 80020ee:	6825      	ldr	r5, [r4, #0]
 80020f0:	f015 0506 	ands.w	r5, r5, #6
 80020f4:	d107      	bne.n	8002106 <_printf_common+0x52>
 80020f6:	f104 0a19 	add.w	sl, r4, #25
 80020fa:	68e3      	ldr	r3, [r4, #12]
 80020fc:	f8d9 2000 	ldr.w	r2, [r9]
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	42ab      	cmp	r3, r5
 8002104:	dc28      	bgt.n	8002158 <_printf_common+0xa4>
 8002106:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	3300      	adds	r3, #0
 800210e:	bf18      	it	ne
 8002110:	2301      	movne	r3, #1
 8002112:	0692      	lsls	r2, r2, #26
 8002114:	d42d      	bmi.n	8002172 <_printf_common+0xbe>
 8002116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800211a:	4639      	mov	r1, r7
 800211c:	4630      	mov	r0, r6
 800211e:	47c0      	blx	r8
 8002120:	3001      	adds	r0, #1
 8002122:	d020      	beq.n	8002166 <_printf_common+0xb2>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	68e5      	ldr	r5, [r4, #12]
 8002128:	f8d9 2000 	ldr.w	r2, [r9]
 800212c:	f003 0306 	and.w	r3, r3, #6
 8002130:	2b04      	cmp	r3, #4
 8002132:	bf08      	it	eq
 8002134:	1aad      	subeq	r5, r5, r2
 8002136:	68a3      	ldr	r3, [r4, #8]
 8002138:	6922      	ldr	r2, [r4, #16]
 800213a:	bf0c      	ite	eq
 800213c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002140:	2500      	movne	r5, #0
 8002142:	4293      	cmp	r3, r2
 8002144:	bfc4      	itt	gt
 8002146:	1a9b      	subgt	r3, r3, r2
 8002148:	18ed      	addgt	r5, r5, r3
 800214a:	f04f 0900 	mov.w	r9, #0
 800214e:	341a      	adds	r4, #26
 8002150:	454d      	cmp	r5, r9
 8002152:	d11a      	bne.n	800218a <_printf_common+0xd6>
 8002154:	2000      	movs	r0, #0
 8002156:	e008      	b.n	800216a <_printf_common+0xb6>
 8002158:	2301      	movs	r3, #1
 800215a:	4652      	mov	r2, sl
 800215c:	4639      	mov	r1, r7
 800215e:	4630      	mov	r0, r6
 8002160:	47c0      	blx	r8
 8002162:	3001      	adds	r0, #1
 8002164:	d103      	bne.n	800216e <_printf_common+0xba>
 8002166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800216a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800216e:	3501      	adds	r5, #1
 8002170:	e7c3      	b.n	80020fa <_printf_common+0x46>
 8002172:	18e1      	adds	r1, r4, r3
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	2030      	movs	r0, #48	; 0x30
 8002178:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800217c:	4422      	add	r2, r4
 800217e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002182:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002186:	3302      	adds	r3, #2
 8002188:	e7c5      	b.n	8002116 <_printf_common+0x62>
 800218a:	2301      	movs	r3, #1
 800218c:	4622      	mov	r2, r4
 800218e:	4639      	mov	r1, r7
 8002190:	4630      	mov	r0, r6
 8002192:	47c0      	blx	r8
 8002194:	3001      	adds	r0, #1
 8002196:	d0e6      	beq.n	8002166 <_printf_common+0xb2>
 8002198:	f109 0901 	add.w	r9, r9, #1
 800219c:	e7d8      	b.n	8002150 <_printf_common+0x9c>
	...

080021a0 <_printf_i>:
 80021a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80021a8:	460c      	mov	r4, r1
 80021aa:	7e09      	ldrb	r1, [r1, #24]
 80021ac:	b085      	sub	sp, #20
 80021ae:	296e      	cmp	r1, #110	; 0x6e
 80021b0:	4617      	mov	r7, r2
 80021b2:	4606      	mov	r6, r0
 80021b4:	4698      	mov	r8, r3
 80021b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80021b8:	f000 80b3 	beq.w	8002322 <_printf_i+0x182>
 80021bc:	d822      	bhi.n	8002204 <_printf_i+0x64>
 80021be:	2963      	cmp	r1, #99	; 0x63
 80021c0:	d036      	beq.n	8002230 <_printf_i+0x90>
 80021c2:	d80a      	bhi.n	80021da <_printf_i+0x3a>
 80021c4:	2900      	cmp	r1, #0
 80021c6:	f000 80b9 	beq.w	800233c <_printf_i+0x19c>
 80021ca:	2958      	cmp	r1, #88	; 0x58
 80021cc:	f000 8083 	beq.w	80022d6 <_printf_i+0x136>
 80021d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80021d8:	e032      	b.n	8002240 <_printf_i+0xa0>
 80021da:	2964      	cmp	r1, #100	; 0x64
 80021dc:	d001      	beq.n	80021e2 <_printf_i+0x42>
 80021de:	2969      	cmp	r1, #105	; 0x69
 80021e0:	d1f6      	bne.n	80021d0 <_printf_i+0x30>
 80021e2:	6820      	ldr	r0, [r4, #0]
 80021e4:	6813      	ldr	r3, [r2, #0]
 80021e6:	0605      	lsls	r5, r0, #24
 80021e8:	f103 0104 	add.w	r1, r3, #4
 80021ec:	d52a      	bpl.n	8002244 <_printf_i+0xa4>
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6011      	str	r1, [r2, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da03      	bge.n	80021fe <_printf_i+0x5e>
 80021f6:	222d      	movs	r2, #45	; 0x2d
 80021f8:	425b      	negs	r3, r3
 80021fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80021fe:	486f      	ldr	r0, [pc, #444]	; (80023bc <_printf_i+0x21c>)
 8002200:	220a      	movs	r2, #10
 8002202:	e039      	b.n	8002278 <_printf_i+0xd8>
 8002204:	2973      	cmp	r1, #115	; 0x73
 8002206:	f000 809d 	beq.w	8002344 <_printf_i+0x1a4>
 800220a:	d808      	bhi.n	800221e <_printf_i+0x7e>
 800220c:	296f      	cmp	r1, #111	; 0x6f
 800220e:	d020      	beq.n	8002252 <_printf_i+0xb2>
 8002210:	2970      	cmp	r1, #112	; 0x70
 8002212:	d1dd      	bne.n	80021d0 <_printf_i+0x30>
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	f043 0320 	orr.w	r3, r3, #32
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	e003      	b.n	8002226 <_printf_i+0x86>
 800221e:	2975      	cmp	r1, #117	; 0x75
 8002220:	d017      	beq.n	8002252 <_printf_i+0xb2>
 8002222:	2978      	cmp	r1, #120	; 0x78
 8002224:	d1d4      	bne.n	80021d0 <_printf_i+0x30>
 8002226:	2378      	movs	r3, #120	; 0x78
 8002228:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800222c:	4864      	ldr	r0, [pc, #400]	; (80023c0 <_printf_i+0x220>)
 800222e:	e055      	b.n	80022dc <_printf_i+0x13c>
 8002230:	6813      	ldr	r3, [r2, #0]
 8002232:	1d19      	adds	r1, r3, #4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6011      	str	r1, [r2, #0]
 8002238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800223c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002240:	2301      	movs	r3, #1
 8002242:	e08c      	b.n	800235e <_printf_i+0x1be>
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6011      	str	r1, [r2, #0]
 8002248:	f010 0f40 	tst.w	r0, #64	; 0x40
 800224c:	bf18      	it	ne
 800224e:	b21b      	sxthne	r3, r3
 8002250:	e7cf      	b.n	80021f2 <_printf_i+0x52>
 8002252:	6813      	ldr	r3, [r2, #0]
 8002254:	6825      	ldr	r5, [r4, #0]
 8002256:	1d18      	adds	r0, r3, #4
 8002258:	6010      	str	r0, [r2, #0]
 800225a:	0628      	lsls	r0, r5, #24
 800225c:	d501      	bpl.n	8002262 <_printf_i+0xc2>
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e002      	b.n	8002268 <_printf_i+0xc8>
 8002262:	0668      	lsls	r0, r5, #25
 8002264:	d5fb      	bpl.n	800225e <_printf_i+0xbe>
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	4854      	ldr	r0, [pc, #336]	; (80023bc <_printf_i+0x21c>)
 800226a:	296f      	cmp	r1, #111	; 0x6f
 800226c:	bf14      	ite	ne
 800226e:	220a      	movne	r2, #10
 8002270:	2208      	moveq	r2, #8
 8002272:	2100      	movs	r1, #0
 8002274:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002278:	6865      	ldr	r5, [r4, #4]
 800227a:	60a5      	str	r5, [r4, #8]
 800227c:	2d00      	cmp	r5, #0
 800227e:	f2c0 8095 	blt.w	80023ac <_printf_i+0x20c>
 8002282:	6821      	ldr	r1, [r4, #0]
 8002284:	f021 0104 	bic.w	r1, r1, #4
 8002288:	6021      	str	r1, [r4, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d13d      	bne.n	800230a <_printf_i+0x16a>
 800228e:	2d00      	cmp	r5, #0
 8002290:	f040 808e 	bne.w	80023b0 <_printf_i+0x210>
 8002294:	4665      	mov	r5, ip
 8002296:	2a08      	cmp	r2, #8
 8002298:	d10b      	bne.n	80022b2 <_printf_i+0x112>
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	07db      	lsls	r3, r3, #31
 800229e:	d508      	bpl.n	80022b2 <_printf_i+0x112>
 80022a0:	6923      	ldr	r3, [r4, #16]
 80022a2:	6862      	ldr	r2, [r4, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	bfde      	ittt	le
 80022a8:	2330      	movle	r3, #48	; 0x30
 80022aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80022b2:	ebac 0305 	sub.w	r3, ip, r5
 80022b6:	6123      	str	r3, [r4, #16]
 80022b8:	f8cd 8000 	str.w	r8, [sp]
 80022bc:	463b      	mov	r3, r7
 80022be:	aa03      	add	r2, sp, #12
 80022c0:	4621      	mov	r1, r4
 80022c2:	4630      	mov	r0, r6
 80022c4:	f7ff fef6 	bl	80020b4 <_printf_common>
 80022c8:	3001      	adds	r0, #1
 80022ca:	d14d      	bne.n	8002368 <_printf_i+0x1c8>
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d0:	b005      	add	sp, #20
 80022d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022d6:	4839      	ldr	r0, [pc, #228]	; (80023bc <_printf_i+0x21c>)
 80022d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	6821      	ldr	r1, [r4, #0]
 80022e0:	1d1d      	adds	r5, r3, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6015      	str	r5, [r2, #0]
 80022e6:	060a      	lsls	r2, r1, #24
 80022e8:	d50b      	bpl.n	8002302 <_printf_i+0x162>
 80022ea:	07ca      	lsls	r2, r1, #31
 80022ec:	bf44      	itt	mi
 80022ee:	f041 0120 	orrmi.w	r1, r1, #32
 80022f2:	6021      	strmi	r1, [r4, #0]
 80022f4:	b91b      	cbnz	r3, 80022fe <_printf_i+0x15e>
 80022f6:	6822      	ldr	r2, [r4, #0]
 80022f8:	f022 0220 	bic.w	r2, r2, #32
 80022fc:	6022      	str	r2, [r4, #0]
 80022fe:	2210      	movs	r2, #16
 8002300:	e7b7      	b.n	8002272 <_printf_i+0xd2>
 8002302:	064d      	lsls	r5, r1, #25
 8002304:	bf48      	it	mi
 8002306:	b29b      	uxthmi	r3, r3
 8002308:	e7ef      	b.n	80022ea <_printf_i+0x14a>
 800230a:	4665      	mov	r5, ip
 800230c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002310:	fb02 3311 	mls	r3, r2, r1, r3
 8002314:	5cc3      	ldrb	r3, [r0, r3]
 8002316:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800231a:	460b      	mov	r3, r1
 800231c:	2900      	cmp	r1, #0
 800231e:	d1f5      	bne.n	800230c <_printf_i+0x16c>
 8002320:	e7b9      	b.n	8002296 <_printf_i+0xf6>
 8002322:	6813      	ldr	r3, [r2, #0]
 8002324:	6825      	ldr	r5, [r4, #0]
 8002326:	6961      	ldr	r1, [r4, #20]
 8002328:	1d18      	adds	r0, r3, #4
 800232a:	6010      	str	r0, [r2, #0]
 800232c:	0628      	lsls	r0, r5, #24
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	d501      	bpl.n	8002336 <_printf_i+0x196>
 8002332:	6019      	str	r1, [r3, #0]
 8002334:	e002      	b.n	800233c <_printf_i+0x19c>
 8002336:	066a      	lsls	r2, r5, #25
 8002338:	d5fb      	bpl.n	8002332 <_printf_i+0x192>
 800233a:	8019      	strh	r1, [r3, #0]
 800233c:	2300      	movs	r3, #0
 800233e:	6123      	str	r3, [r4, #16]
 8002340:	4665      	mov	r5, ip
 8002342:	e7b9      	b.n	80022b8 <_printf_i+0x118>
 8002344:	6813      	ldr	r3, [r2, #0]
 8002346:	1d19      	adds	r1, r3, #4
 8002348:	6011      	str	r1, [r2, #0]
 800234a:	681d      	ldr	r5, [r3, #0]
 800234c:	6862      	ldr	r2, [r4, #4]
 800234e:	2100      	movs	r1, #0
 8002350:	4628      	mov	r0, r5
 8002352:	f7fd ff5d 	bl	8000210 <memchr>
 8002356:	b108      	cbz	r0, 800235c <_printf_i+0x1bc>
 8002358:	1b40      	subs	r0, r0, r5
 800235a:	6060      	str	r0, [r4, #4]
 800235c:	6863      	ldr	r3, [r4, #4]
 800235e:	6123      	str	r3, [r4, #16]
 8002360:	2300      	movs	r3, #0
 8002362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002366:	e7a7      	b.n	80022b8 <_printf_i+0x118>
 8002368:	6923      	ldr	r3, [r4, #16]
 800236a:	462a      	mov	r2, r5
 800236c:	4639      	mov	r1, r7
 800236e:	4630      	mov	r0, r6
 8002370:	47c0      	blx	r8
 8002372:	3001      	adds	r0, #1
 8002374:	d0aa      	beq.n	80022cc <_printf_i+0x12c>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	079b      	lsls	r3, r3, #30
 800237a:	d413      	bmi.n	80023a4 <_printf_i+0x204>
 800237c:	68e0      	ldr	r0, [r4, #12]
 800237e:	9b03      	ldr	r3, [sp, #12]
 8002380:	4298      	cmp	r0, r3
 8002382:	bfb8      	it	lt
 8002384:	4618      	movlt	r0, r3
 8002386:	e7a3      	b.n	80022d0 <_printf_i+0x130>
 8002388:	2301      	movs	r3, #1
 800238a:	464a      	mov	r2, r9
 800238c:	4639      	mov	r1, r7
 800238e:	4630      	mov	r0, r6
 8002390:	47c0      	blx	r8
 8002392:	3001      	adds	r0, #1
 8002394:	d09a      	beq.n	80022cc <_printf_i+0x12c>
 8002396:	3501      	adds	r5, #1
 8002398:	68e3      	ldr	r3, [r4, #12]
 800239a:	9a03      	ldr	r2, [sp, #12]
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	42ab      	cmp	r3, r5
 80023a0:	dcf2      	bgt.n	8002388 <_printf_i+0x1e8>
 80023a2:	e7eb      	b.n	800237c <_printf_i+0x1dc>
 80023a4:	2500      	movs	r5, #0
 80023a6:	f104 0919 	add.w	r9, r4, #25
 80023aa:	e7f5      	b.n	8002398 <_printf_i+0x1f8>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ac      	bne.n	800230a <_printf_i+0x16a>
 80023b0:	7803      	ldrb	r3, [r0, #0]
 80023b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023ba:	e76c      	b.n	8002296 <_printf_i+0xf6>
 80023bc:	08002619 	.word	0x08002619
 80023c0:	0800262a 	.word	0x0800262a

080023c4 <memmove>:
 80023c4:	4288      	cmp	r0, r1
 80023c6:	b510      	push	{r4, lr}
 80023c8:	eb01 0302 	add.w	r3, r1, r2
 80023cc:	d807      	bhi.n	80023de <memmove+0x1a>
 80023ce:	1e42      	subs	r2, r0, #1
 80023d0:	4299      	cmp	r1, r3
 80023d2:	d00a      	beq.n	80023ea <memmove+0x26>
 80023d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80023dc:	e7f8      	b.n	80023d0 <memmove+0xc>
 80023de:	4283      	cmp	r3, r0
 80023e0:	d9f5      	bls.n	80023ce <memmove+0xa>
 80023e2:	1881      	adds	r1, r0, r2
 80023e4:	1ad2      	subs	r2, r2, r3
 80023e6:	42d3      	cmn	r3, r2
 80023e8:	d100      	bne.n	80023ec <memmove+0x28>
 80023ea:	bd10      	pop	{r4, pc}
 80023ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80023f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80023f4:	e7f7      	b.n	80023e6 <memmove+0x22>
	...

080023f8 <_free_r>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	4605      	mov	r5, r0
 80023fc:	2900      	cmp	r1, #0
 80023fe:	d045      	beq.n	800248c <_free_r+0x94>
 8002400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002404:	1f0c      	subs	r4, r1, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	bfb8      	it	lt
 800240a:	18e4      	addlt	r4, r4, r3
 800240c:	f000 f8d2 	bl	80025b4 <__malloc_lock>
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <_free_r+0x98>)
 8002412:	6813      	ldr	r3, [r2, #0]
 8002414:	4610      	mov	r0, r2
 8002416:	b933      	cbnz	r3, 8002426 <_free_r+0x2e>
 8002418:	6063      	str	r3, [r4, #4]
 800241a:	6014      	str	r4, [r2, #0]
 800241c:	4628      	mov	r0, r5
 800241e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002422:	f000 b8c8 	b.w	80025b6 <__malloc_unlock>
 8002426:	42a3      	cmp	r3, r4
 8002428:	d90c      	bls.n	8002444 <_free_r+0x4c>
 800242a:	6821      	ldr	r1, [r4, #0]
 800242c:	1862      	adds	r2, r4, r1
 800242e:	4293      	cmp	r3, r2
 8002430:	bf04      	itt	eq
 8002432:	681a      	ldreq	r2, [r3, #0]
 8002434:	685b      	ldreq	r3, [r3, #4]
 8002436:	6063      	str	r3, [r4, #4]
 8002438:	bf04      	itt	eq
 800243a:	1852      	addeq	r2, r2, r1
 800243c:	6022      	streq	r2, [r4, #0]
 800243e:	6004      	str	r4, [r0, #0]
 8002440:	e7ec      	b.n	800241c <_free_r+0x24>
 8002442:	4613      	mov	r3, r2
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	b10a      	cbz	r2, 800244c <_free_r+0x54>
 8002448:	42a2      	cmp	r2, r4
 800244a:	d9fa      	bls.n	8002442 <_free_r+0x4a>
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	1858      	adds	r0, r3, r1
 8002450:	42a0      	cmp	r0, r4
 8002452:	d10b      	bne.n	800246c <_free_r+0x74>
 8002454:	6820      	ldr	r0, [r4, #0]
 8002456:	4401      	add	r1, r0
 8002458:	1858      	adds	r0, r3, r1
 800245a:	4282      	cmp	r2, r0
 800245c:	6019      	str	r1, [r3, #0]
 800245e:	d1dd      	bne.n	800241c <_free_r+0x24>
 8002460:	6810      	ldr	r0, [r2, #0]
 8002462:	6852      	ldr	r2, [r2, #4]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	4401      	add	r1, r0
 8002468:	6019      	str	r1, [r3, #0]
 800246a:	e7d7      	b.n	800241c <_free_r+0x24>
 800246c:	d902      	bls.n	8002474 <_free_r+0x7c>
 800246e:	230c      	movs	r3, #12
 8002470:	602b      	str	r3, [r5, #0]
 8002472:	e7d3      	b.n	800241c <_free_r+0x24>
 8002474:	6820      	ldr	r0, [r4, #0]
 8002476:	1821      	adds	r1, r4, r0
 8002478:	428a      	cmp	r2, r1
 800247a:	bf04      	itt	eq
 800247c:	6811      	ldreq	r1, [r2, #0]
 800247e:	6852      	ldreq	r2, [r2, #4]
 8002480:	6062      	str	r2, [r4, #4]
 8002482:	bf04      	itt	eq
 8002484:	1809      	addeq	r1, r1, r0
 8002486:	6021      	streq	r1, [r4, #0]
 8002488:	605c      	str	r4, [r3, #4]
 800248a:	e7c7      	b.n	800241c <_free_r+0x24>
 800248c:	bd38      	pop	{r3, r4, r5, pc}
 800248e:	bf00      	nop
 8002490:	2000013c 	.word	0x2000013c

08002494 <_malloc_r>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	1ccd      	adds	r5, r1, #3
 8002498:	f025 0503 	bic.w	r5, r5, #3
 800249c:	3508      	adds	r5, #8
 800249e:	2d0c      	cmp	r5, #12
 80024a0:	bf38      	it	cc
 80024a2:	250c      	movcc	r5, #12
 80024a4:	2d00      	cmp	r5, #0
 80024a6:	4606      	mov	r6, r0
 80024a8:	db01      	blt.n	80024ae <_malloc_r+0x1a>
 80024aa:	42a9      	cmp	r1, r5
 80024ac:	d903      	bls.n	80024b6 <_malloc_r+0x22>
 80024ae:	230c      	movs	r3, #12
 80024b0:	6033      	str	r3, [r6, #0]
 80024b2:	2000      	movs	r0, #0
 80024b4:	bd70      	pop	{r4, r5, r6, pc}
 80024b6:	f000 f87d 	bl	80025b4 <__malloc_lock>
 80024ba:	4a21      	ldr	r2, [pc, #132]	; (8002540 <_malloc_r+0xac>)
 80024bc:	6814      	ldr	r4, [r2, #0]
 80024be:	4621      	mov	r1, r4
 80024c0:	b991      	cbnz	r1, 80024e8 <_malloc_r+0x54>
 80024c2:	4c20      	ldr	r4, [pc, #128]	; (8002544 <_malloc_r+0xb0>)
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	b91b      	cbnz	r3, 80024d0 <_malloc_r+0x3c>
 80024c8:	4630      	mov	r0, r6
 80024ca:	f000 f863 	bl	8002594 <_sbrk_r>
 80024ce:	6020      	str	r0, [r4, #0]
 80024d0:	4629      	mov	r1, r5
 80024d2:	4630      	mov	r0, r6
 80024d4:	f000 f85e 	bl	8002594 <_sbrk_r>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d124      	bne.n	8002526 <_malloc_r+0x92>
 80024dc:	230c      	movs	r3, #12
 80024de:	6033      	str	r3, [r6, #0]
 80024e0:	4630      	mov	r0, r6
 80024e2:	f000 f868 	bl	80025b6 <__malloc_unlock>
 80024e6:	e7e4      	b.n	80024b2 <_malloc_r+0x1e>
 80024e8:	680b      	ldr	r3, [r1, #0]
 80024ea:	1b5b      	subs	r3, r3, r5
 80024ec:	d418      	bmi.n	8002520 <_malloc_r+0x8c>
 80024ee:	2b0b      	cmp	r3, #11
 80024f0:	d90f      	bls.n	8002512 <_malloc_r+0x7e>
 80024f2:	600b      	str	r3, [r1, #0]
 80024f4:	50cd      	str	r5, [r1, r3]
 80024f6:	18cc      	adds	r4, r1, r3
 80024f8:	4630      	mov	r0, r6
 80024fa:	f000 f85c 	bl	80025b6 <__malloc_unlock>
 80024fe:	f104 000b 	add.w	r0, r4, #11
 8002502:	1d23      	adds	r3, r4, #4
 8002504:	f020 0007 	bic.w	r0, r0, #7
 8002508:	1ac3      	subs	r3, r0, r3
 800250a:	d0d3      	beq.n	80024b4 <_malloc_r+0x20>
 800250c:	425a      	negs	r2, r3
 800250e:	50e2      	str	r2, [r4, r3]
 8002510:	e7d0      	b.n	80024b4 <_malloc_r+0x20>
 8002512:	428c      	cmp	r4, r1
 8002514:	684b      	ldr	r3, [r1, #4]
 8002516:	bf16      	itet	ne
 8002518:	6063      	strne	r3, [r4, #4]
 800251a:	6013      	streq	r3, [r2, #0]
 800251c:	460c      	movne	r4, r1
 800251e:	e7eb      	b.n	80024f8 <_malloc_r+0x64>
 8002520:	460c      	mov	r4, r1
 8002522:	6849      	ldr	r1, [r1, #4]
 8002524:	e7cc      	b.n	80024c0 <_malloc_r+0x2c>
 8002526:	1cc4      	adds	r4, r0, #3
 8002528:	f024 0403 	bic.w	r4, r4, #3
 800252c:	42a0      	cmp	r0, r4
 800252e:	d005      	beq.n	800253c <_malloc_r+0xa8>
 8002530:	1a21      	subs	r1, r4, r0
 8002532:	4630      	mov	r0, r6
 8002534:	f000 f82e 	bl	8002594 <_sbrk_r>
 8002538:	3001      	adds	r0, #1
 800253a:	d0cf      	beq.n	80024dc <_malloc_r+0x48>
 800253c:	6025      	str	r5, [r4, #0]
 800253e:	e7db      	b.n	80024f8 <_malloc_r+0x64>
 8002540:	2000013c 	.word	0x2000013c
 8002544:	20000140 	.word	0x20000140

08002548 <_realloc_r>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	4607      	mov	r7, r0
 800254c:	4614      	mov	r4, r2
 800254e:	460e      	mov	r6, r1
 8002550:	b921      	cbnz	r1, 800255c <_realloc_r+0x14>
 8002552:	4611      	mov	r1, r2
 8002554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002558:	f7ff bf9c 	b.w	8002494 <_malloc_r>
 800255c:	b922      	cbnz	r2, 8002568 <_realloc_r+0x20>
 800255e:	f7ff ff4b 	bl	80023f8 <_free_r>
 8002562:	4625      	mov	r5, r4
 8002564:	4628      	mov	r0, r5
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002568:	f000 f826 	bl	80025b8 <_malloc_usable_size_r>
 800256c:	42a0      	cmp	r0, r4
 800256e:	d20f      	bcs.n	8002590 <_realloc_r+0x48>
 8002570:	4621      	mov	r1, r4
 8002572:	4638      	mov	r0, r7
 8002574:	f7ff ff8e 	bl	8002494 <_malloc_r>
 8002578:	4605      	mov	r5, r0
 800257a:	2800      	cmp	r0, #0
 800257c:	d0f2      	beq.n	8002564 <_realloc_r+0x1c>
 800257e:	4631      	mov	r1, r6
 8002580:	4622      	mov	r2, r4
 8002582:	f7ff fc19 	bl	8001db8 <memcpy>
 8002586:	4631      	mov	r1, r6
 8002588:	4638      	mov	r0, r7
 800258a:	f7ff ff35 	bl	80023f8 <_free_r>
 800258e:	e7e9      	b.n	8002564 <_realloc_r+0x1c>
 8002590:	4635      	mov	r5, r6
 8002592:	e7e7      	b.n	8002564 <_realloc_r+0x1c>

08002594 <_sbrk_r>:
 8002594:	b538      	push	{r3, r4, r5, lr}
 8002596:	4c06      	ldr	r4, [pc, #24]	; (80025b0 <_sbrk_r+0x1c>)
 8002598:	2300      	movs	r3, #0
 800259a:	4605      	mov	r5, r0
 800259c:	4608      	mov	r0, r1
 800259e:	6023      	str	r3, [r4, #0]
 80025a0:	f7ff faea 	bl	8001b78 <_sbrk>
 80025a4:	1c43      	adds	r3, r0, #1
 80025a6:	d102      	bne.n	80025ae <_sbrk_r+0x1a>
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	b103      	cbz	r3, 80025ae <_sbrk_r+0x1a>
 80025ac:	602b      	str	r3, [r5, #0]
 80025ae:	bd38      	pop	{r3, r4, r5, pc}
 80025b0:	200001c8 	.word	0x200001c8

080025b4 <__malloc_lock>:
 80025b4:	4770      	bx	lr

080025b6 <__malloc_unlock>:
 80025b6:	4770      	bx	lr

080025b8 <_malloc_usable_size_r>:
 80025b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025bc:	1f18      	subs	r0, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bfbc      	itt	lt
 80025c2:	580b      	ldrlt	r3, [r1, r0]
 80025c4:	18c0      	addlt	r0, r0, r3
 80025c6:	4770      	bx	lr

080025c8 <_init>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr

080025d4 <_fini>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	bf00      	nop
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr
