
STM32_FreeRTOS_Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003654  08003654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080036f4  080036f4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036f4  080036f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080036fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008454  20000074  08003770  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200084c8  08003770  000284c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc98  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026fb  00000000  00000000  0002fd3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00032438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  000332c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029f05  00000000  00000000  00034010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c796  00000000  00000000  0005df15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd462  00000000  00000000  0006a6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167b0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ddc  00000000  00000000  00167b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800363c 	.word	0x0800363c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800363c 	.word	0x0800363c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <HAL_Init+0x40>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <HAL_Init+0x40>)
 80002ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <HAL_Init+0x40>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <HAL_Init+0x40>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <HAL_Init+0x40>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <HAL_Init+0x40>)
 80002d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002d8:	2003      	movs	r0, #3
 80002da:	f000 f8c4 	bl	8000466 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002de:	2000      	movs	r0, #0
 80002e0:	f002 fbfe 	bl	8002ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002e4:	f002 fbd4 	bl	8002a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002e8:	2300      	movs	r3, #0
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40023c00 	.word	0x40023c00

080002f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return uwTick;
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <HAL_GetTick+0x14>)
 80002fa:	681b      	ldr	r3, [r3, #0]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	20008440 	.word	0x20008440

0800030c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f003 0307 	and.w	r3, r3, #7
 800031a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <__NVIC_SetPriorityGrouping+0x44>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000328:	4013      	ands	r3, r2
 800032a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800033c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800033e:	4a04      	ldr	r2, [pc, #16]	; (8000350 <__NVIC_SetPriorityGrouping+0x44>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	60d3      	str	r3, [r2, #12]
}
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <__NVIC_GetPriorityGrouping+0x18>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	0a1b      	lsrs	r3, r3, #8
 800035e:	f003 0307 	and.w	r3, r3, #7
}
 8000362:	4618      	mov	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800037a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037e:	2b00      	cmp	r3, #0
 8000380:	db0b      	blt.n	800039a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	f003 021f 	and.w	r2, r3, #31
 8000388:	4907      	ldr	r1, [pc, #28]	; (80003a8 <__NVIC_EnableIRQ+0x38>)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	095b      	lsrs	r3, r3, #5
 8000390:	2001      	movs	r0, #1
 8000392:	fa00 f202 	lsl.w	r2, r0, r2
 8000396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000e100 	.word	0xe000e100

080003ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	6039      	str	r1, [r7, #0]
 80003b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db0a      	blt.n	80003d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <__NVIC_SetPriority+0x4c>)
 80003c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ca:	0112      	lsls	r2, r2, #4
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	440b      	add	r3, r1
 80003d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003d4:	e00a      	b.n	80003ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4908      	ldr	r1, [pc, #32]	; (80003fc <__NVIC_SetPriority+0x50>)
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	f003 030f 	and.w	r3, r3, #15
 80003e2:	3b04      	subs	r3, #4
 80003e4:	0112      	lsls	r2, r2, #4
 80003e6:	b2d2      	uxtb	r2, r2
 80003e8:	440b      	add	r3, r1
 80003ea:	761a      	strb	r2, [r3, #24]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	e000e100 	.word	0xe000e100
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000400:	b480      	push	{r7}
 8000402:	b089      	sub	sp, #36	; 0x24
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000414:	69fb      	ldr	r3, [r7, #28]
 8000416:	f1c3 0307 	rsb	r3, r3, #7
 800041a:	2b04      	cmp	r3, #4
 800041c:	bf28      	it	cs
 800041e:	2304      	movcs	r3, #4
 8000420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	3304      	adds	r3, #4
 8000426:	2b06      	cmp	r3, #6
 8000428:	d902      	bls.n	8000430 <NVIC_EncodePriority+0x30>
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	3b03      	subs	r3, #3
 800042e:	e000      	b.n	8000432 <NVIC_EncodePriority+0x32>
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000438:	69bb      	ldr	r3, [r7, #24]
 800043a:	fa02 f303 	lsl.w	r3, r2, r3
 800043e:	43da      	mvns	r2, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	401a      	ands	r2, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	43d9      	mvns	r1, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000458:	4313      	orrs	r3, r2
         );
}
 800045a:	4618      	mov	r0, r3
 800045c:	3724      	adds	r7, #36	; 0x24
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff4c 	bl	800030c <__NVIC_SetPriorityGrouping>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800048e:	f7ff ff61 	bl	8000354 <__NVIC_GetPriorityGrouping>
 8000492:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	68b9      	ldr	r1, [r7, #8]
 8000498:	6978      	ldr	r0, [r7, #20]
 800049a:	f7ff ffb1 	bl	8000400 <NVIC_EncodePriority>
 800049e:	4602      	mov	r2, r0
 80004a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004a4:	4611      	mov	r1, r2
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff80 	bl	80003ac <__NVIC_SetPriority>
}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff54 	bl	8000370 <__NVIC_EnableIRQ>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b089      	sub	sp, #36	; 0x24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
 80004ea:	e177      	b.n	80007dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80004ec:	2201      	movs	r2, #1
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	697a      	ldr	r2, [r7, #20]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	429a      	cmp	r2, r3
 8000506:	f040 8166 	bne.w	80007d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d003      	beq.n	800051a <HAL_GPIO_Init+0x4a>
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	2b12      	cmp	r3, #18
 8000518:	d123      	bne.n	8000562 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	08da      	lsrs	r2, r3, #3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3208      	adds	r2, #8
 8000522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	f003 0307 	and.w	r3, r3, #7
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	220f      	movs	r2, #15
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43db      	mvns	r3, r3
 8000538:	69ba      	ldr	r2, [r7, #24]
 800053a:	4013      	ands	r3, r2
 800053c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	691a      	ldr	r2, [r3, #16]
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	f003 0307 	and.w	r3, r3, #7
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	69ba      	ldr	r2, [r7, #24]
 8000550:	4313      	orrs	r3, r2
 8000552:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	08da      	lsrs	r2, r3, #3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3208      	adds	r2, #8
 800055c:	69b9      	ldr	r1, [r7, #24]
 800055e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	2203      	movs	r2, #3
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	43db      	mvns	r3, r3
 8000574:	69ba      	ldr	r2, [r7, #24]
 8000576:	4013      	ands	r3, r2
 8000578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	f003 0203 	and.w	r2, r3, #3
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	4313      	orrs	r3, r2
 800058e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d00b      	beq.n	80005b6 <HAL_GPIO_Init+0xe6>
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d007      	beq.n	80005b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005aa:	2b11      	cmp	r3, #17
 80005ac:	d003      	beq.n	80005b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	2b12      	cmp	r3, #18
 80005b4:	d130      	bne.n	8000618 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	2203      	movs	r2, #3
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	43db      	mvns	r3, r3
 80005c8:	69ba      	ldr	r2, [r7, #24]
 80005ca:	4013      	ands	r3, r2
 80005cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	4313      	orrs	r3, r2
 80005de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	69ba      	ldr	r2, [r7, #24]
 80005e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ec:	2201      	movs	r2, #1
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	69ba      	ldr	r2, [r7, #24]
 80005f8:	4013      	ands	r3, r2
 80005fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	f003 0201 	and.w	r2, r3, #1
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	69ba      	ldr	r2, [r7, #24]
 800060e:	4313      	orrs	r3, r2
 8000610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	69ba      	ldr	r2, [r7, #24]
 8000616:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	2203      	movs	r2, #3
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	43db      	mvns	r3, r3
 800062a:	69ba      	ldr	r2, [r7, #24]
 800062c:	4013      	ands	r3, r2
 800062e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	2b00      	cmp	r3, #0
 8000652:	f000 80c0 	beq.w	80007d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4b65      	ldr	r3, [pc, #404]	; (80007f0 <HAL_GPIO_Init+0x320>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	4a64      	ldr	r2, [pc, #400]	; (80007f0 <HAL_GPIO_Init+0x320>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000664:	6453      	str	r3, [r2, #68]	; 0x44
 8000666:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <HAL_GPIO_Init+0x320>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000672:	4a60      	ldr	r2, [pc, #384]	; (80007f4 <HAL_GPIO_Init+0x324>)
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	3302      	adds	r3, #2
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	220f      	movs	r2, #15
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	4013      	ands	r3, r2
 8000694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a57      	ldr	r2, [pc, #348]	; (80007f8 <HAL_GPIO_Init+0x328>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d037      	beq.n	800070e <HAL_GPIO_Init+0x23e>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a56      	ldr	r2, [pc, #344]	; (80007fc <HAL_GPIO_Init+0x32c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d031      	beq.n	800070a <HAL_GPIO_Init+0x23a>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a55      	ldr	r2, [pc, #340]	; (8000800 <HAL_GPIO_Init+0x330>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d02b      	beq.n	8000706 <HAL_GPIO_Init+0x236>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a54      	ldr	r2, [pc, #336]	; (8000804 <HAL_GPIO_Init+0x334>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d025      	beq.n	8000702 <HAL_GPIO_Init+0x232>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a53      	ldr	r2, [pc, #332]	; (8000808 <HAL_GPIO_Init+0x338>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d01f      	beq.n	80006fe <HAL_GPIO_Init+0x22e>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a52      	ldr	r2, [pc, #328]	; (800080c <HAL_GPIO_Init+0x33c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d019      	beq.n	80006fa <HAL_GPIO_Init+0x22a>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a51      	ldr	r2, [pc, #324]	; (8000810 <HAL_GPIO_Init+0x340>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d013      	beq.n	80006f6 <HAL_GPIO_Init+0x226>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a50      	ldr	r2, [pc, #320]	; (8000814 <HAL_GPIO_Init+0x344>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d00d      	beq.n	80006f2 <HAL_GPIO_Init+0x222>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a4f      	ldr	r2, [pc, #316]	; (8000818 <HAL_GPIO_Init+0x348>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d007      	beq.n	80006ee <HAL_GPIO_Init+0x21e>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a4e      	ldr	r2, [pc, #312]	; (800081c <HAL_GPIO_Init+0x34c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d101      	bne.n	80006ea <HAL_GPIO_Init+0x21a>
 80006e6:	2309      	movs	r3, #9
 80006e8:	e012      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006ea:	230a      	movs	r3, #10
 80006ec:	e010      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006ee:	2308      	movs	r3, #8
 80006f0:	e00e      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006f2:	2307      	movs	r3, #7
 80006f4:	e00c      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006f6:	2306      	movs	r3, #6
 80006f8:	e00a      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006fa:	2305      	movs	r3, #5
 80006fc:	e008      	b.n	8000710 <HAL_GPIO_Init+0x240>
 80006fe:	2304      	movs	r3, #4
 8000700:	e006      	b.n	8000710 <HAL_GPIO_Init+0x240>
 8000702:	2303      	movs	r3, #3
 8000704:	e004      	b.n	8000710 <HAL_GPIO_Init+0x240>
 8000706:	2302      	movs	r3, #2
 8000708:	e002      	b.n	8000710 <HAL_GPIO_Init+0x240>
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <HAL_GPIO_Init+0x240>
 800070e:	2300      	movs	r3, #0
 8000710:	69fa      	ldr	r2, [r7, #28]
 8000712:	f002 0203 	and.w	r2, r2, #3
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	4093      	lsls	r3, r2
 800071a:	69ba      	ldr	r2, [r7, #24]
 800071c:	4313      	orrs	r3, r2
 800071e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000720:	4934      	ldr	r1, [pc, #208]	; (80007f4 <HAL_GPIO_Init+0x324>)
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	089b      	lsrs	r3, r3, #2
 8000726:	3302      	adds	r3, #2
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <HAL_GPIO_Init+0x350>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	43db      	mvns	r3, r3
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	4013      	ands	r3, r2
 800073c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800074a:	69ba      	ldr	r2, [r7, #24]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	4313      	orrs	r3, r2
 8000750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000752:	4a33      	ldr	r2, [pc, #204]	; (8000820 <HAL_GPIO_Init+0x350>)
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000758:	4b31      	ldr	r3, [pc, #196]	; (8000820 <HAL_GPIO_Init+0x350>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	43db      	mvns	r3, r3
 8000762:	69ba      	ldr	r2, [r7, #24]
 8000764:	4013      	ands	r3, r2
 8000766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	4313      	orrs	r3, r2
 800077a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800077c:	4a28      	ldr	r2, [pc, #160]	; (8000820 <HAL_GPIO_Init+0x350>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <HAL_GPIO_Init+0x350>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	43db      	mvns	r3, r3
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	4013      	ands	r3, r2
 8000790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <HAL_GPIO_Init+0x350>)
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <HAL_GPIO_Init+0x350>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	43db      	mvns	r3, r3
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	4013      	ands	r3, r2
 80007ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d003      	beq.n	80007d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <HAL_GPIO_Init+0x350>)
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3301      	adds	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	2b0f      	cmp	r3, #15
 80007e0:	f67f ae84 	bls.w	80004ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80007e4:	bf00      	nop
 80007e6:	3724      	adds	r7, #36	; 0x24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40013800 	.word	0x40013800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020400 	.word	0x40020400
 8000800:	40020800 	.word	0x40020800
 8000804:	40020c00 	.word	0x40020c00
 8000808:	40021000 	.word	0x40021000
 800080c:	40021400 	.word	0x40021400
 8000810:	40021800 	.word	0x40021800
 8000814:	40021c00 	.word	0x40021c00
 8000818:	40022000 	.word	0x40022000
 800081c:	40022400 	.word	0x40022400
 8000820:	40013c00 	.word	0x40013c00

08000824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
 8000830:	4613      	mov	r3, r2
 8000832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000834:	787b      	ldrb	r3, [r7, #1]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800083a:	887a      	ldrh	r2, [r7, #2]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000840:	e003      	b.n	800084a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000842:	887b      	ldrh	r3, [r7, #2]
 8000844:	041a      	lsls	r2, r3, #16
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	619a      	str	r2, [r3, #24]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	695a      	ldr	r2, [r3, #20]
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	401a      	ands	r2, r3
 800086a:	887b      	ldrh	r3, [r7, #2]
 800086c:	429a      	cmp	r2, r3
 800086e:	d104      	bne.n	800087a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000870:	887b      	ldrh	r3, [r7, #2]
 8000872:	041a      	lsls	r2, r3, #16
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000878:	e002      	b.n	8000880 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800087a:	887a      	ldrh	r2, [r7, #2]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	619a      	str	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000000c 	.word	0x2000000c

080008a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80008a8:	f7ff fff0 	bl	800088c <HAL_RCC_GetHCLKFreq>
 80008ac:	4601      	mov	r1, r0
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	0a9b      	lsrs	r3, r3, #10
 80008b4:	f003 0307 	and.w	r3, r3, #7
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80008ba:	5cd3      	ldrb	r3, [r2, r3]
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	080036b8 	.word	0x080036b8

080008cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80008d0:	f7ff ffdc 	bl	800088c <HAL_RCC_GetHCLKFreq>
 80008d4:	4601      	mov	r1, r0
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	0b5b      	lsrs	r3, r3, #13
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	080036b8 	.word	0x080036b8

080008f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	220f      	movs	r2, #15
 8000902:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_RCC_GetClockConfig+0x5c>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f003 0203 	and.w	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_RCC_GetClockConfig+0x5c>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_RCC_GetClockConfig+0x5c>)
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_RCC_GetClockConfig+0x5c>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	08db      	lsrs	r3, r3, #3
 800092e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <HAL_RCC_GetClockConfig+0x60>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 020f 	and.w	r2, r3, #15
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	601a      	str	r2, [r3, #0]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e01d      	b.n	80009a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d106      	bne.n	8000984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f002 f98e 	bl	8002ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2202      	movs	r2, #2
 8000988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3304      	adds	r3, #4
 8000994:	4619      	mov	r1, r3
 8000996:	4610      	mov	r0, r2
 8000998:	f000 f968 	bl	8000c6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2201      	movs	r2, #1
 80009a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b085      	sub	sp, #20
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f042 0201 	orr.w	r2, r2, #1
 80009c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2b06      	cmp	r3, #6
 80009d6:	d007      	beq.n	80009e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0201 	orr.w	r2, r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d122      	bne.n	8000a52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d11b      	bne.n	8000a52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f06f 0202 	mvn.w	r2, #2
 8000a22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 f8f8 	bl	8000c2e <HAL_TIM_IC_CaptureCallback>
 8000a3e:	e005      	b.n	8000a4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f8ea 	bl	8000c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f8fb 	bl	8000c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	691b      	ldr	r3, [r3, #16]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d122      	bne.n	8000aa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d11b      	bne.n	8000aa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f06f 0204 	mvn.w	r2, #4
 8000a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 f8ce 	bl	8000c2e <HAL_TIM_IC_CaptureCallback>
 8000a92:	e005      	b.n	8000aa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f8c0 	bl	8000c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f8d1 	bl	8000c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	2b08      	cmp	r3, #8
 8000ab2:	d122      	bne.n	8000afa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d11b      	bne.n	8000afa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f06f 0208 	mvn.w	r2, #8
 8000aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2204      	movs	r2, #4
 8000ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	f003 0303 	and.w	r3, r3, #3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f8a4 	bl	8000c2e <HAL_TIM_IC_CaptureCallback>
 8000ae6:	e005      	b.n	8000af4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f896 	bl	8000c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f8a7 	bl	8000c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	d122      	bne.n	8000b4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	2b10      	cmp	r3, #16
 8000b14:	d11b      	bne.n	8000b4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f06f 0210 	mvn.w	r2, #16
 8000b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2208      	movs	r2, #8
 8000b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 f87a 	bl	8000c2e <HAL_TIM_IC_CaptureCallback>
 8000b3a:	e005      	b.n	8000b48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f86c 	bl	8000c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f87d 	bl	8000c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10e      	bne.n	8000b7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d107      	bne.n	8000b7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f06f 0201 	mvn.w	r2, #1
 8000b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f846 	bl	8000c06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b84:	2b80      	cmp	r3, #128	; 0x80
 8000b86:	d10e      	bne.n	8000ba6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	2b80      	cmp	r3, #128	; 0x80
 8000b94:	d107      	bne.n	8000ba6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f90d 	bl	8000dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb0:	2b40      	cmp	r3, #64	; 0x40
 8000bb2:	d10e      	bne.n	8000bd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	2b40      	cmp	r3, #64	; 0x40
 8000bc0:	d107      	bne.n	8000bd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 f842 	bl	8000c56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	f003 0320 	and.w	r3, r3, #32
 8000bdc:	2b20      	cmp	r3, #32
 8000bde:	d10e      	bne.n	8000bfe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	f003 0320 	and.w	r3, r3, #32
 8000bea:	2b20      	cmp	r3, #32
 8000bec:	d107      	bne.n	8000bfe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f06f 0220 	mvn.w	r2, #32
 8000bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f000 f8d7 	bl	8000dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a40      	ldr	r2, [pc, #256]	; (8000d80 <TIM_Base_SetConfig+0x114>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d013      	beq.n	8000cac <TIM_Base_SetConfig+0x40>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c8a:	d00f      	beq.n	8000cac <TIM_Base_SetConfig+0x40>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a3d      	ldr	r2, [pc, #244]	; (8000d84 <TIM_Base_SetConfig+0x118>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d00b      	beq.n	8000cac <TIM_Base_SetConfig+0x40>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a3c      	ldr	r2, [pc, #240]	; (8000d88 <TIM_Base_SetConfig+0x11c>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d007      	beq.n	8000cac <TIM_Base_SetConfig+0x40>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a3b      	ldr	r2, [pc, #236]	; (8000d8c <TIM_Base_SetConfig+0x120>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d003      	beq.n	8000cac <TIM_Base_SetConfig+0x40>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3a      	ldr	r2, [pc, #232]	; (8000d90 <TIM_Base_SetConfig+0x124>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d108      	bne.n	8000cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a2f      	ldr	r2, [pc, #188]	; (8000d80 <TIM_Base_SetConfig+0x114>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d02b      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ccc:	d027      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <TIM_Base_SetConfig+0x118>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d023      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a2b      	ldr	r2, [pc, #172]	; (8000d88 <TIM_Base_SetConfig+0x11c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d01f      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <TIM_Base_SetConfig+0x120>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d01b      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a29      	ldr	r2, [pc, #164]	; (8000d90 <TIM_Base_SetConfig+0x124>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d017      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a28      	ldr	r2, [pc, #160]	; (8000d94 <TIM_Base_SetConfig+0x128>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d013      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <TIM_Base_SetConfig+0x12c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d00f      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a26      	ldr	r2, [pc, #152]	; (8000d9c <TIM_Base_SetConfig+0x130>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00b      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <TIM_Base_SetConfig+0x134>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <TIM_Base_SetConfig+0x138>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d003      	beq.n	8000d1e <TIM_Base_SetConfig+0xb2>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a23      	ldr	r2, [pc, #140]	; (8000da8 <TIM_Base_SetConfig+0x13c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d108      	bne.n	8000d30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <TIM_Base_SetConfig+0x114>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d003      	beq.n	8000d64 <TIM_Base_SetConfig+0xf8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <TIM_Base_SetConfig+0x124>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d103      	bne.n	8000d6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	615a      	str	r2, [r3, #20]
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40010000 	.word	0x40010000
 8000d84:	40000400 	.word	0x40000400
 8000d88:	40000800 	.word	0x40000800
 8000d8c:	40000c00 	.word	0x40000c00
 8000d90:	40010400 	.word	0x40010400
 8000d94:	40014000 	.word	0x40014000
 8000d98:	40014400 	.word	0x40014400
 8000d9c:	40014800 	.word	0x40014800
 8000da0:	40001800 	.word	0x40001800
 8000da4:	40001c00 	.word	0x40001c00
 8000da8:	40002000 	.word	0x40002000

08000dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e03f      	b.n	8000e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d106      	bne.n	8000e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f001 ff72 	bl	8002ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2224      	movs	r2, #36	; 0x24
 8000e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f90b 	bl	8001034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2220      	movs	r2, #32
 8000e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2220      	movs	r2, #32
 8000e60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b088      	sub	sp, #32
 8000e72:	af02      	add	r7, sp, #8
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b20      	cmp	r3, #32
 8000e8c:	f040 8083 	bne.w	8000f96 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <HAL_UART_Transmit+0x2e>
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e07b      	b.n	8000f98 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d101      	bne.n	8000eae <HAL_UART_Transmit+0x40>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e074      	b.n	8000f98 <HAL_UART_Transmit+0x12a>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2221      	movs	r2, #33	; 0x21
 8000ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000ec4:	f7ff fa16 	bl	80002f4 <HAL_GetTick>
 8000ec8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	88fa      	ldrh	r2, [r7, #6]
 8000ed4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000ed6:	e042      	b.n	8000f5e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eee:	d122      	bne.n	8000f36 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f850 	bl	8000fa0 <UART_WaitOnFlagUntilTimeout>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e046      	b.n	8000f98 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f1c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d103      	bne.n	8000f2e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	e017      	b.n	8000f5e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	e013      	b.n	8000f5e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 f82d 	bl	8000fa0 <UART_WaitOnFlagUntilTimeout>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e023      	b.n	8000f98 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1b7      	bne.n	8000ed8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2140      	movs	r1, #64	; 0x40
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f000 f814 	bl	8000fa0 <UART_WaitOnFlagUntilTimeout>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e00a      	b.n	8000f98 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2220      	movs	r2, #32
 8000f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000f96:	2302      	movs	r3, #2
  }
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fb0:	e02c      	b.n	800100c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fb8:	d028      	beq.n	800100c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d007      	beq.n	8000fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8000fc0:	f7ff f998 	bl	80002f4 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d21d      	bcs.n	800100c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000fde:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	695a      	ldr	r2, [r3, #20]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0201 	bic.w	r2, r2, #1
 8000fee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e00f      	b.n	800102c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	4013      	ands	r3, r2
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	429a      	cmp	r2, r3
 800101a:	bf0c      	ite	eq
 800101c:	2301      	moveq	r3, #1
 800101e:	2300      	movne	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	461a      	mov	r2, r3
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	429a      	cmp	r2, r3
 8001028:	d0c3      	beq.n	8000fb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4313      	orrs	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001074:	f023 030c 	bic.w	r3, r3, #12
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	68f9      	ldr	r1, [r7, #12]
 800107e:	430b      	orrs	r3, r1
 8001080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	699a      	ldr	r2, [r3, #24]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010a0:	f040 80e4 	bne.w	800126c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4aab      	ldr	r2, [pc, #684]	; (8001358 <UART_SetConfig+0x324>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d004      	beq.n	80010b8 <UART_SetConfig+0x84>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4aaa      	ldr	r2, [pc, #680]	; (800135c <UART_SetConfig+0x328>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d16c      	bne.n	8001192 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010b8:	f7ff fc08 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 80010bc:	4602      	mov	r2, r0
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	009a      	lsls	r2, r3, #2
 80010c6:	441a      	add	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4aa3      	ldr	r2, [pc, #652]	; (8001360 <UART_SetConfig+0x32c>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	011c      	lsls	r4, r3, #4
 80010dc:	f7ff fbf6 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	009a      	lsls	r2, r3, #2
 80010ea:	441a      	add	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80010f6:	f7ff fbe9 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 80010fa:	4602      	mov	r2, r0
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	009a      	lsls	r2, r3, #2
 8001104:	441a      	add	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001110:	4a93      	ldr	r2, [pc, #588]	; (8001360 <UART_SetConfig+0x32c>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2264      	movs	r2, #100	; 0x64
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	1aeb      	subs	r3, r5, r3
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	3332      	adds	r3, #50	; 0x32
 8001124:	4a8e      	ldr	r2, [pc, #568]	; (8001360 <UART_SetConfig+0x32c>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001132:	441c      	add	r4, r3
 8001134:	f7ff fbca 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 8001138:	4602      	mov	r2, r0
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009a      	lsls	r2, r3, #2
 8001142:	441a      	add	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fbb2 f5f3 	udiv	r5, r2, r3
 800114e:	f7ff fbbd 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 8001152:	4602      	mov	r2, r0
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	009a      	lsls	r2, r3, #2
 800115c:	441a      	add	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fbb2 f3f3 	udiv	r3, r2, r3
 8001168:	4a7d      	ldr	r2, [pc, #500]	; (8001360 <UART_SetConfig+0x32c>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2264      	movs	r2, #100	; 0x64
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	1aeb      	subs	r3, r5, r3
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	3332      	adds	r3, #50	; 0x32
 800117c:	4a78      	ldr	r2, [pc, #480]	; (8001360 <UART_SetConfig+0x32c>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	f003 0207 	and.w	r2, r3, #7
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4422      	add	r2, r4
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	e154      	b.n	800143c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001192:	f7ff fb87 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 8001196:	4602      	mov	r2, r0
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	009a      	lsls	r2, r3, #2
 80011a0:	441a      	add	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ac:	4a6c      	ldr	r2, [pc, #432]	; (8001360 <UART_SetConfig+0x32c>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	011c      	lsls	r4, r3, #4
 80011b6:	f7ff fb75 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	009a      	lsls	r2, r3, #2
 80011c4:	441a      	add	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80011d0:	f7ff fb68 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	009a      	lsls	r2, r3, #2
 80011de:	441a      	add	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4a5d      	ldr	r2, [pc, #372]	; (8001360 <UART_SetConfig+0x32c>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	2264      	movs	r2, #100	; 0x64
 80011f4:	fb02 f303 	mul.w	r3, r2, r3
 80011f8:	1aeb      	subs	r3, r5, r3
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	3332      	adds	r3, #50	; 0x32
 80011fe:	4a58      	ldr	r2, [pc, #352]	; (8001360 <UART_SetConfig+0x32c>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	095b      	lsrs	r3, r3, #5
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800120c:	441c      	add	r4, r3
 800120e:	f7ff fb49 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 8001212:	4602      	mov	r2, r0
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	009a      	lsls	r2, r3, #2
 800121c:	441a      	add	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fbb2 f5f3 	udiv	r5, r2, r3
 8001228:	f7ff fb3c 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 800122c:	4602      	mov	r2, r0
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	009a      	lsls	r2, r3, #2
 8001236:	441a      	add	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4a47      	ldr	r2, [pc, #284]	; (8001360 <UART_SetConfig+0x32c>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	2264      	movs	r2, #100	; 0x64
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	1aeb      	subs	r3, r5, r3
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	3332      	adds	r3, #50	; 0x32
 8001256:	4a42      	ldr	r2, [pc, #264]	; (8001360 <UART_SetConfig+0x32c>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	095b      	lsrs	r3, r3, #5
 800125e:	f003 0207 	and.w	r2, r3, #7
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4422      	add	r2, r4
 8001268:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800126a:	e0e7      	b.n	800143c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a39      	ldr	r2, [pc, #228]	; (8001358 <UART_SetConfig+0x324>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d004      	beq.n	8001280 <UART_SetConfig+0x24c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a38      	ldr	r2, [pc, #224]	; (800135c <UART_SetConfig+0x328>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d171      	bne.n	8001364 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001280:	f7ff fb24 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 8001284:	4602      	mov	r2, r0
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	009a      	lsls	r2, r3, #2
 800128e:	441a      	add	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <UART_SetConfig+0x32c>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	095b      	lsrs	r3, r3, #5
 80012a2:	011c      	lsls	r4, r3, #4
 80012a4:	f7ff fb12 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 80012a8:	4602      	mov	r2, r0
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	009a      	lsls	r2, r3, #2
 80012b2:	441a      	add	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80012be:	f7ff fb05 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	009a      	lsls	r2, r3, #2
 80012cc:	441a      	add	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <UART_SetConfig+0x32c>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2264      	movs	r2, #100	; 0x64
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	1aeb      	subs	r3, r5, r3
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	3332      	adds	r3, #50	; 0x32
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <UART_SetConfig+0x32c>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012f8:	441c      	add	r4, r3
 80012fa:	f7ff fae7 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 80012fe:	4602      	mov	r2, r0
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	009a      	lsls	r2, r3, #2
 8001308:	441a      	add	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fbb2 f5f3 	udiv	r5, r2, r3
 8001314:	f7ff fada 	bl	80008cc <HAL_RCC_GetPCLK2Freq>
 8001318:	4602      	mov	r2, r0
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	009a      	lsls	r2, r3, #2
 8001322:	441a      	add	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <UART_SetConfig+0x32c>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	095b      	lsrs	r3, r3, #5
 8001336:	2264      	movs	r2, #100	; 0x64
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	1aeb      	subs	r3, r5, r3
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	3332      	adds	r3, #50	; 0x32
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <UART_SetConfig+0x32c>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	095b      	lsrs	r3, r3, #5
 800134a:	f003 020f 	and.w	r2, r3, #15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4422      	add	r2, r4
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	e071      	b.n	800143c <UART_SetConfig+0x408>
 8001358:	40011000 	.word	0x40011000
 800135c:	40011400 	.word	0x40011400
 8001360:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001364:	f7ff fa9e 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 8001368:	4602      	mov	r2, r0
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	009a      	lsls	r2, r3, #2
 8001372:	441a      	add	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	4a31      	ldr	r2, [pc, #196]	; (8001444 <UART_SetConfig+0x410>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	011c      	lsls	r4, r3, #4
 8001388:	f7ff fa8c 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 800138c:	4602      	mov	r2, r0
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009a      	lsls	r2, r3, #2
 8001396:	441a      	add	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	fbb2 f5f3 	udiv	r5, r2, r3
 80013a2:	f7ff fa7f 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009a      	lsls	r2, r3, #2
 80013b0:	441a      	add	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <UART_SetConfig+0x410>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2264      	movs	r2, #100	; 0x64
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	1aeb      	subs	r3, r5, r3
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	3332      	adds	r3, #50	; 0x32
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <UART_SetConfig+0x410>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013dc:	441c      	add	r4, r3
 80013de:	f7ff fa61 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	009a      	lsls	r2, r3, #2
 80013ec:	441a      	add	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80013f8:	f7ff fa54 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	009a      	lsls	r2, r3, #2
 8001406:	441a      	add	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <UART_SetConfig+0x410>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	095b      	lsrs	r3, r3, #5
 800141a:	2264      	movs	r2, #100	; 0x64
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	1aeb      	subs	r3, r5, r3
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	3332      	adds	r3, #50	; 0x32
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <UART_SetConfig+0x410>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	095b      	lsrs	r3, r3, #5
 800142e:	f003 020f 	and.w	r2, r3, #15
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4422      	add	r2, r4
 8001438:	609a      	str	r2, [r3, #8]
}
 800143a:	e7ff      	b.n	800143c <UART_SetConfig+0x408>
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bdb0      	pop	{r4, r5, r7, pc}
 8001444:	51eb851f 	.word	0x51eb851f

08001448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f103 0208 	add.w	r2, r3, #8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f103 0208 	add.w	r2, r3, #8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f103 0208 	add.w	r2, r3, #8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001500:	d103      	bne.n	800150a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e00c      	b.n	8001524 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3308      	adds	r3, #8
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	e002      	b.n	8001518 <vListInsert+0x2e>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	429a      	cmp	r2, r3
 8001522:	d2f6      	bcs.n	8001512 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6892      	ldr	r2, [r2, #8]
 8001572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6852      	ldr	r2, [r2, #4]
 800157c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	d103      	bne.n	8001590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	1e5a      	subs	r2, r3, #1
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80015be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d109      	bne.n	80015d8 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80015c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c8:	f383 8811 	msr	BASEPRI, r3
 80015cc:	f3bf 8f6f 	isb	sy
 80015d0:	f3bf 8f4f 	dsb	sy
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	e7fe      	b.n	80015d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80015d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <xTaskCreateStatic+0x42>
 80015de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e2:	f383 8811 	msr	BASEPRI, r3
 80015e6:	f3bf 8f6f 	isb	sy
 80015ea:	f3bf 8f4f 	dsb	sy
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	e7fe      	b.n	80015f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80015f2:	2358      	movs	r3, #88	; 0x58
 80015f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	2b58      	cmp	r3, #88	; 0x58
 80015fa:	d009      	beq.n	8001610 <xTaskCreateStatic+0x60>
 80015fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001600:	f383 8811 	msr	BASEPRI, r3
 8001604:	f3bf 8f6f 	isb	sy
 8001608:	f3bf 8f4f 	dsb	sy
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	e7fe      	b.n	800160e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01e      	beq.n	8001654 <xTaskCreateStatic+0xa4>
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01b      	beq.n	8001654 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001624:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	2202      	movs	r2, #2
 800162a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800162e:	2300      	movs	r3, #0
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f850 	bl	80016ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800164c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800164e:	f000 f8d7 	bl	8001800 <prvAddNewTaskToReadyList>
 8001652:	e001      	b.n	8001658 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001658:	697b      	ldr	r3, [r7, #20]
	}
 800165a:	4618      	mov	r0, r3
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001662:	b580      	push	{r7, lr}
 8001664:	b08c      	sub	sp, #48	; 0x30
 8001666:	af04      	add	r7, sp, #16
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fee4 	bl	8002444 <pvPortMalloc>
 800167c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00e      	beq.n	80016a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001684:	2058      	movs	r0, #88	; 0x58
 8001686:	f000 fedd 	bl	8002444 <pvPortMalloc>
 800168a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
 8001698:	e005      	b.n	80016a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f000 ff98 	bl	80025d0 <vPortFree>
 80016a0:	e001      	b.n	80016a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d017      	beq.n	80016dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	2300      	movs	r3, #0
 80016b8:	9303      	str	r3, [sp, #12]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f80e 	bl	80016ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80016d0:	69f8      	ldr	r0, [r7, #28]
 80016d2:	f000 f895 	bl	8001800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	e002      	b.n	80016e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80016e2:	69bb      	ldr	r3, [r7, #24]
	}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80016fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	461a      	mov	r2, r3
 8001704:	21a5      	movs	r1, #165	; 0xa5
 8001706:	f001 fb94 	bl	8002e32 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001714:	3b01      	subs	r3, #1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f023 0307 	bic.w	r3, r3, #7
 8001722:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <prvInitialiseNewTask+0x56>
 800172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001732:	f383 8811 	msr	BASEPRI, r3
 8001736:	f3bf 8f6f 	isb	sy
 800173a:	f3bf 8f4f 	dsb	sy
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e7fe      	b.n	8001740 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e012      	b.n	800176e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	7819      	ldrb	r1, [r3, #0]
 8001750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	4413      	add	r3, r2
 8001756:	3334      	adds	r3, #52	; 0x34
 8001758:	460a      	mov	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3301      	adds	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d9e9      	bls.n	8001748 <prvInitialiseNewTask+0x5c>
 8001774:	e000      	b.n	8001778 <prvInitialiseNewTask+0x8c>
		{
			break;
 8001776:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001782:	2b06      	cmp	r3, #6
 8001784:	d901      	bls.n	800178a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001786:	2306      	movs	r3, #6
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	2200      	movs	r2, #0
 800179a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179e:	3304      	adds	r3, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fe71 	bl	8001488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	3318      	adds	r3, #24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fe6c 	bl	8001488 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	f1c3 0207 	rsb	r2, r3, #7
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80017c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c8:	2200      	movs	r2, #0
 80017ca:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ce:	2200      	movs	r2, #0
 80017d0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	69b8      	ldr	r0, [r7, #24]
 80017e0:	f000 fc30 	bl	8002044 <pxPortInitialiseStack>
 80017e4:	4602      	mov	r2, r0
 80017e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001808:	f000 fd40 	bl	800228c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <prvAddNewTaskToReadyList+0xb8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <prvAddNewTaskToReadyList+0xb8>)
 8001814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <prvAddNewTaskToReadyList+0xbc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800181e:	4a27      	ldr	r2, [pc, #156]	; (80018bc <prvAddNewTaskToReadyList+0xbc>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <prvAddNewTaskToReadyList+0xb8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d110      	bne.n	800184e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800182c:	f000 fae4 	bl	8001df8 <prvInitialiseTaskLists>
 8001830:	e00d      	b.n	800184e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <prvAddNewTaskToReadyList+0xc0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <prvAddNewTaskToReadyList+0xbc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	429a      	cmp	r2, r3
 8001846:	d802      	bhi.n	800184e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001848:	4a1c      	ldr	r2, [pc, #112]	; (80018bc <prvAddNewTaskToReadyList+0xbc>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <prvAddNewTaskToReadyList+0xc4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <prvAddNewTaskToReadyList+0xc4>)
 8001856:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	2201      	movs	r2, #1
 800185e:	409a      	lsls	r2, r3
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <prvAddNewTaskToReadyList+0xc8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4313      	orrs	r3, r2
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <prvAddNewTaskToReadyList+0xc8>)
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4a15      	ldr	r2, [pc, #84]	; (80018cc <prvAddNewTaskToReadyList+0xcc>)
 8001878:	441a      	add	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff fe0e 	bl	80014a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001886:	f000 fd2f 	bl	80022e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <prvAddNewTaskToReadyList+0xc0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00e      	beq.n	80018b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <prvAddNewTaskToReadyList+0xbc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <prvAddNewTaskToReadyList+0xd0>)
 80018a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000190 	.word	0x20000190
 80018bc:	20000090 	.word	0x20000090
 80018c0:	2000019c 	.word	0x2000019c
 80018c4:	200001ac 	.word	0x200001ac
 80018c8:	20000198 	.word	0x20000198
 80018cc:	20000094 	.word	0x20000094
 80018d0:	e000ed04 	.word	0xe000ed04

080018d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d016      	beq.n	8001914 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <vTaskDelay+0x60>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <vTaskDelay+0x2e>
 80018ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f2:	f383 8811 	msr	BASEPRI, r3
 80018f6:	f3bf 8f6f 	isb	sy
 80018fa:	f3bf 8f4f 	dsb	sy
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	e7fe      	b.n	8001900 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001902:	f000 f879 	bl	80019f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001906:	2100      	movs	r1, #0
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fb35 	bl	8001f78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800190e:	f000 f881 	bl	8001a14 <xTaskResumeAll>
 8001912:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d107      	bne.n	800192a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <vTaskDelay+0x64>)
 800191c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	f3bf 8f4f 	dsb	sy
 8001926:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200001b8 	.word	0x200001b8
 8001938:	e000ed04 	.word	0xe000ed04

0800193c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800194a:	463a      	mov	r2, r7
 800194c:	1d39      	adds	r1, r7, #4
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4618      	mov	r0, r3
 8001954:	f000 ff6a 	bl	800282c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001958:	6839      	ldr	r1, [r7, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	9202      	str	r2, [sp, #8]
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	2300      	movs	r3, #0
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2300      	movs	r3, #0
 8001968:	460a      	mov	r2, r1
 800196a:	491d      	ldr	r1, [pc, #116]	; (80019e0 <vTaskStartScheduler+0xa4>)
 800196c:	481d      	ldr	r0, [pc, #116]	; (80019e4 <vTaskStartScheduler+0xa8>)
 800196e:	f7ff fe1f 	bl	80015b0 <xTaskCreateStatic>
 8001972:	4602      	mov	r2, r0
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <vTaskStartScheduler+0xac>)
 8001976:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <vTaskStartScheduler+0xac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001980:	2301      	movs	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e001      	b.n	800198a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d115      	bne.n	80019bc <vTaskStartScheduler+0x80>
 8001990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001994:	f383 8811 	msr	BASEPRI, r3
 8001998:	f3bf 8f6f 	isb	sy
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <vTaskStartScheduler+0xb0>)
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <vTaskStartScheduler+0xb4>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <vTaskStartScheduler+0xb8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80019b6:	f000 fbcb 	bl	8002150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80019ba:	e00d      	b.n	80019d8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c2:	d109      	bne.n	80019d8 <vTaskStartScheduler+0x9c>
 80019c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c8:	f383 8811 	msr	BASEPRI, r3
 80019cc:	f3bf 8f6f 	isb	sy
 80019d0:	f3bf 8f4f 	dsb	sy
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	e7fe      	b.n	80019d6 <vTaskStartScheduler+0x9a>
}
 80019d8:	bf00      	nop
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08003654 	.word	0x08003654
 80019e4:	08001dc5 	.word	0x08001dc5
 80019e8:	200001b4 	.word	0x200001b4
 80019ec:	200001b0 	.word	0x200001b0
 80019f0:	2000019c 	.word	0x2000019c
 80019f4:	20000194 	.word	0x20000194

080019f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <vTaskSuspendAll+0x18>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <vTaskSuspendAll+0x18>)
 8001a04:	6013      	str	r3, [r2, #0]
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	200001b8 	.word	0x200001b8

08001a14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <xTaskResumeAll+0x114>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <xTaskResumeAll+0x2a>
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	e7fe      	b.n	8001a3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001a3e:	f000 fc25 	bl	800228c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001a42:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <xTaskResumeAll+0x114>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <xTaskResumeAll+0x114>)
 8001a4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <xTaskResumeAll+0x114>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d161      	bne.n	8001b18 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a54:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <xTaskResumeAll+0x118>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d05d      	beq.n	8001b18 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a5c:	e02e      	b.n	8001abc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <xTaskResumeAll+0x11c>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3318      	adds	r3, #24
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fd76 	bl	800155c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3304      	adds	r3, #4
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fd71 	bl	800155c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	2201      	movs	r2, #1
 8001a80:	409a      	lsls	r2, r3
 8001a82:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <xTaskResumeAll+0x120>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <xTaskResumeAll+0x120>)
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <xTaskResumeAll+0x124>)
 8001a9a:	441a      	add	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f7ff fcfd 	bl	80014a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <xTaskResumeAll+0x128>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d302      	bcc.n	8001abc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <xTaskResumeAll+0x12c>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001abc:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <xTaskResumeAll+0x11c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1cc      	bne.n	8001a5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001aca:	f000 fa2f 	bl	8001f2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <xTaskResumeAll+0x130>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d010      	beq.n	8001afc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001ada:	f000 f837 	bl	8001b4c <xTaskIncrementTick>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <xTaskResumeAll+0x12c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f1      	bne.n	8001ada <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <xTaskResumeAll+0x130>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <xTaskResumeAll+0x12c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d009      	beq.n	8001b18 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001b04:	2301      	movs	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <xTaskResumeAll+0x134>)
 8001b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	f3bf 8f4f 	dsb	sy
 8001b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001b18:	f000 fbe6 	bl	80022e8 <vPortExitCritical>

	return xAlreadyYielded;
 8001b1c:	68bb      	ldr	r3, [r7, #8]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200001b8 	.word	0x200001b8
 8001b2c:	20000190 	.word	0x20000190
 8001b30:	20000150 	.word	0x20000150
 8001b34:	20000198 	.word	0x20000198
 8001b38:	20000094 	.word	0x20000094
 8001b3c:	20000090 	.word	0x20000090
 8001b40:	200001a4 	.word	0x200001a4
 8001b44:	200001a0 	.word	0x200001a0
 8001b48:	e000ed04 	.word	0xe000ed04

08001b4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b56:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <xTaskIncrementTick+0x14c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 808c 	bne.w	8001c78 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b60:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <xTaskIncrementTick+0x150>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b68:	4a4c      	ldr	r2, [pc, #304]	; (8001c9c <xTaskIncrementTick+0x150>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d11f      	bne.n	8001bb4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <xTaskIncrementTick+0x154>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <xTaskIncrementTick+0x46>
 8001b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	f3bf 8f6f 	isb	sy
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	e7fe      	b.n	8001b90 <xTaskIncrementTick+0x44>
 8001b92:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <xTaskIncrementTick+0x154>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <xTaskIncrementTick+0x158>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a40      	ldr	r2, [pc, #256]	; (8001ca0 <xTaskIncrementTick+0x154>)
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4a40      	ldr	r2, [pc, #256]	; (8001ca4 <xTaskIncrementTick+0x158>)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <xTaskIncrementTick+0x15c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a3e      	ldr	r2, [pc, #248]	; (8001ca8 <xTaskIncrementTick+0x15c>)
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	f000 f9bc 	bl	8001f2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001bb4:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <xTaskIncrementTick+0x160>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d34d      	bcc.n	8001c5a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <xTaskIncrementTick+0x154>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <xTaskIncrementTick+0x80>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <xTaskIncrementTick+0x82>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bd2:	4b36      	ldr	r3, [pc, #216]	; (8001cac <xTaskIncrementTick+0x160>)
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bd8:	601a      	str	r2, [r3, #0]
					break;
 8001bda:	e03e      	b.n	8001c5a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <xTaskIncrementTick+0x154>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d203      	bcs.n	8001bfc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	; (8001cac <xTaskIncrementTick+0x160>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
						break;
 8001bfa:	e02e      	b.n	8001c5a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fcab 	bl	800155c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3318      	adds	r3, #24
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fca2 	bl	800155c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <xTaskIncrementTick+0x164>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <xTaskIncrementTick+0x164>)
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <xTaskIncrementTick+0x168>)
 8001c38:	441a      	add	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f7ff fc2e 	bl	80014a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <xTaskIncrementTick+0x16c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d3b4      	bcc.n	8001bbe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c58:	e7b1      	b.n	8001bbe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <xTaskIncrementTick+0x16c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c60:	4914      	ldr	r1, [pc, #80]	; (8001cb4 <xTaskIncrementTick+0x168>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d907      	bls.n	8001c82 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001c72:	2301      	movs	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e004      	b.n	8001c82 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <xTaskIncrementTick+0x170>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <xTaskIncrementTick+0x170>)
 8001c80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <xTaskIncrementTick+0x174>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001c8e:	697b      	ldr	r3, [r7, #20]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200001b8 	.word	0x200001b8
 8001c9c:	20000194 	.word	0x20000194
 8001ca0:	20000148 	.word	0x20000148
 8001ca4:	2000014c 	.word	0x2000014c
 8001ca8:	200001a8 	.word	0x200001a8
 8001cac:	200001b0 	.word	0x200001b0
 8001cb0:	20000198 	.word	0x20000198
 8001cb4:	20000094 	.word	0x20000094
 8001cb8:	20000090 	.word	0x20000090
 8001cbc:	200001a0 	.word	0x200001a0
 8001cc0:	200001a4 	.word	0x200001a4

08001cc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <vTaskSwitchContext+0xec>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <vTaskSwitchContext+0xf0>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001cd8:	e065      	b.n	8001da6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001cda:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <vTaskSwitchContext+0xf0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <vTaskSwitchContext+0xf4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d111      	bne.n	8001d1c <vTaskSwitchContext+0x58>
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10b      	bne.n	8001d1c <vTaskSwitchContext+0x58>
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	3308      	adds	r3, #8
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d105      	bne.n	8001d1c <vTaskSwitchContext+0x58>
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	330c      	adds	r3, #12
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d008      	beq.n	8001d2e <vTaskSwitchContext+0x6a>
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <vTaskSwitchContext+0xf4>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <vTaskSwitchContext+0xf4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3334      	adds	r3, #52	; 0x34
 8001d26:	4619      	mov	r1, r3
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f000 fd6c 	bl	8002806 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <vTaskSwitchContext+0xf8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	f1c3 031f 	rsb	r3, r3, #31
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	491e      	ldr	r1, [pc, #120]	; (8001dc0 <vTaskSwitchContext+0xfc>)
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <vTaskSwitchContext+0xa8>
	__asm volatile
 8001d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e7fe      	b.n	8001d6a <vTaskSwitchContext+0xa6>
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <vTaskSwitchContext+0xfc>)
 8001d78:	4413      	add	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	3308      	adds	r3, #8
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d104      	bne.n	8001d9c <vTaskSwitchContext+0xd8>
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <vTaskSwitchContext+0xf4>)
 8001da4:	6013      	str	r3, [r2, #0]
}
 8001da6:	bf00      	nop
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200001b8 	.word	0x200001b8
 8001db4:	200001a4 	.word	0x200001a4
 8001db8:	20000090 	.word	0x20000090
 8001dbc:	20000198 	.word	0x20000198
 8001dc0:	20000094 	.word	0x20000094

08001dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001dcc:	f000 f854 	bl	8001e78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <prvIdleTask+0x2c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d907      	bls.n	8001de8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <prvIdleTask+0x30>)
 8001dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	f3bf 8f4f 	dsb	sy
 8001de4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001de8:	f000 fd06 	bl	80027f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001dec:	e7ee      	b.n	8001dcc <prvIdleTask+0x8>
 8001dee:	bf00      	nop
 8001df0:	20000094 	.word	0x20000094
 8001df4:	e000ed04 	.word	0xe000ed04

08001df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	e00c      	b.n	8001e1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <prvInitialiseTaskLists+0x60>)
 8001e10:	4413      	add	r3, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fb18 	bl	8001448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d9ef      	bls.n	8001e04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <prvInitialiseTaskLists+0x64>)
 8001e26:	f7ff fb0f 	bl	8001448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001e2a:	480d      	ldr	r0, [pc, #52]	; (8001e60 <prvInitialiseTaskLists+0x68>)
 8001e2c:	f7ff fb0c 	bl	8001448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001e30:	480c      	ldr	r0, [pc, #48]	; (8001e64 <prvInitialiseTaskLists+0x6c>)
 8001e32:	f7ff fb09 	bl	8001448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001e36:	480c      	ldr	r0, [pc, #48]	; (8001e68 <prvInitialiseTaskLists+0x70>)
 8001e38:	f7ff fb06 	bl	8001448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001e3c:	480b      	ldr	r0, [pc, #44]	; (8001e6c <prvInitialiseTaskLists+0x74>)
 8001e3e:	f7ff fb03 	bl	8001448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <prvInitialiseTaskLists+0x78>)
 8001e44:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <prvInitialiseTaskLists+0x64>)
 8001e46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <prvInitialiseTaskLists+0x7c>)
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <prvInitialiseTaskLists+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000094 	.word	0x20000094
 8001e5c:	20000120 	.word	0x20000120
 8001e60:	20000134 	.word	0x20000134
 8001e64:	20000150 	.word	0x20000150
 8001e68:	20000164 	.word	0x20000164
 8001e6c:	2000017c 	.word	0x2000017c
 8001e70:	20000148 	.word	0x20000148
 8001e74:	2000014c 	.word	0x2000014c

08001e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e7e:	e019      	b.n	8001eb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001e80:	f000 fa04 	bl	800228c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <prvCheckTasksWaitingTermination+0x4c>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fb63 	bl	800155c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <prvCheckTasksWaitingTermination+0x50>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <prvCheckTasksWaitingTermination+0x50>)
 8001e9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <prvCheckTasksWaitingTermination+0x54>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <prvCheckTasksWaitingTermination+0x54>)
 8001ea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001eaa:	f000 fa1d 	bl	80022e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f80e 	bl	8001ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <prvCheckTasksWaitingTermination+0x54>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e1      	bne.n	8001e80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000164 	.word	0x20000164
 8001ec8:	20000190 	.word	0x20000190
 8001ecc:	20000178 	.word	0x20000178

08001ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d108      	bne.n	8001ef4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fb72 	bl	80025d0 <vPortFree>
				vPortFree( pxTCB );
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fb6f 	bl	80025d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001ef2:	e017      	b.n	8001f24 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d103      	bne.n	8001f06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fb66 	bl	80025d0 <vPortFree>
	}
 8001f04:	e00e      	b.n	8001f24 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d009      	beq.n	8001f24 <prvDeleteTCB+0x54>
 8001f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f14:	f383 8811 	msr	BASEPRI, r3
 8001f18:	f3bf 8f6f 	isb	sy
 8001f1c:	f3bf 8f4f 	dsb	sy
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e7fe      	b.n	8001f22 <prvDeleteTCB+0x52>
	}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <prvResetNextTaskUnblockTime+0x44>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <prvResetNextTaskUnblockTime+0x14>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <prvResetNextTaskUnblockTime+0x16>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <prvResetNextTaskUnblockTime+0x48>)
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001f4e:	e008      	b.n	8001f62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <prvResetNextTaskUnblockTime+0x44>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <prvResetNextTaskUnblockTime+0x48>)
 8001f60:	6013      	str	r3, [r2, #0]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000148 	.word	0x20000148
 8001f74:	200001b0 	.word	0x200001b0

08001f78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fae4 	bl	800155c <uxListRemove>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10b      	bne.n	8001fb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4013      	ands	r3, r2
 8001fae:	4a20      	ldr	r2, [pc, #128]	; (8002030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001fb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fb8:	d10a      	bne.n	8001fd0 <prvAddCurrentTaskToDelayedList+0x58>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	481a      	ldr	r0, [pc, #104]	; (8002034 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001fca:	f7ff fa6a 	bl	80014a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001fce:	e026      	b.n	800201e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d209      	bcs.n	8001ffc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f7ff fa78 	bl	80014ea <vListInsert>
}
 8001ffa:	e010      	b.n	800201e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <prvAddCurrentTaskToDelayedList+0xc4>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3304      	adds	r3, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f7ff fa6e 	bl	80014ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	429a      	cmp	r2, r3
 8002016:	d202      	bcs.n	800201e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002018:	4a09      	ldr	r2, [pc, #36]	; (8002040 <prvAddCurrentTaskToDelayedList+0xc8>)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	6013      	str	r3, [r2, #0]
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000194 	.word	0x20000194
 800202c:	20000090 	.word	0x20000090
 8002030:	20000198 	.word	0x20000198
 8002034:	2000017c 	.word	0x2000017c
 8002038:	2000014c 	.word	0x2000014c
 800203c:	20000148 	.word	0x20000148
 8002040:	200001b0 	.word	0x200001b0

08002044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3b04      	subs	r3, #4
 8002054:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800205c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3b04      	subs	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f023 0201 	bic.w	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3b04      	subs	r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <pxPortInitialiseStack+0x64>)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3b14      	subs	r3, #20
 800207e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3b04      	subs	r3, #4
 800208a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f06f 0202 	mvn.w	r2, #2
 8002092:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3b20      	subs	r3, #32
 8002098:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	080020ad 	.word	0x080020ad

080020ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <prvTaskExitError+0x50>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020be:	d009      	beq.n	80020d4 <prvTaskExitError+0x28>
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e7fe      	b.n	80020d2 <prvTaskExitError+0x26>
 80020d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d8:	f383 8811 	msr	BASEPRI, r3
 80020dc:	f3bf 8f6f 	isb	sy
 80020e0:	f3bf 8f4f 	dsb	sy
 80020e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80020e6:	bf00      	nop
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0fc      	beq.n	80020e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000

08002100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <pxCurrentTCBConst2>)
 8002102:	6819      	ldr	r1, [r3, #0]
 8002104:	6808      	ldr	r0, [r1, #0]
 8002106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800210a:	f380 8809 	msr	PSP, r0
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	f380 8811 	msr	BASEPRI, r0
 800211a:	4770      	bx	lr
 800211c:	f3af 8000 	nop.w

08002120 <pxCurrentTCBConst2>:
 8002120:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop

08002128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002128:	4808      	ldr	r0, [pc, #32]	; (800214c <prvPortStartFirstTask+0x24>)
 800212a:	6800      	ldr	r0, [r0, #0]
 800212c:	6800      	ldr	r0, [r0, #0]
 800212e:	f380 8808 	msr	MSP, r0
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	f380 8814 	msr	CONTROL, r0
 800213a:	b662      	cpsie	i
 800213c:	b661      	cpsie	f
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	df00      	svc	0
 8002148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800214a:	bf00      	nop
 800214c:	e000ed08 	.word	0xe000ed08

08002150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002156:	4b44      	ldr	r3, [pc, #272]	; (8002268 <xPortStartScheduler+0x118>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a44      	ldr	r2, [pc, #272]	; (800226c <xPortStartScheduler+0x11c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d109      	bne.n	8002174 <xPortStartScheduler+0x24>
 8002160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002164:	f383 8811 	msr	BASEPRI, r3
 8002168:	f3bf 8f6f 	isb	sy
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	e7fe      	b.n	8002172 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002174:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <xPortStartScheduler+0x118>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <xPortStartScheduler+0x120>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d109      	bne.n	8002192 <xPortStartScheduler+0x42>
 800217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002182:	f383 8811 	msr	BASEPRI, r3
 8002186:	f3bf 8f6f 	isb	sy
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e7fe      	b.n	8002190 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <xPortStartScheduler+0x124>)
 8002194:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	22ff      	movs	r2, #255	; 0xff
 80021a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <xPortStartScheduler+0x128>)
 80021b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <xPortStartScheduler+0x12c>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021c0:	e009      	b.n	80021d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80021c2:	4b2e      	ldr	r3, [pc, #184]	; (800227c <xPortStartScheduler+0x12c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	4a2c      	ldr	r2, [pc, #176]	; (800227c <xPortStartScheduler+0x12c>)
 80021ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	d0ef      	beq.n	80021c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <xPortStartScheduler+0x12c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d009      	beq.n	8002202 <xPortStartScheduler+0xb2>
 80021ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f2:	f383 8811 	msr	BASEPRI, r3
 80021f6:	f3bf 8f6f 	isb	sy
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	e7fe      	b.n	8002200 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <xPortStartScheduler+0x12c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	4a1c      	ldr	r2, [pc, #112]	; (800227c <xPortStartScheduler+0x12c>)
 800220a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <xPortStartScheduler+0x12c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <xPortStartScheduler+0x12c>)
 8002216:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <xPortStartScheduler+0x130>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a16      	ldr	r2, [pc, #88]	; (8002280 <xPortStartScheduler+0x130>)
 8002226:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800222a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <xPortStartScheduler+0x130>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a13      	ldr	r2, [pc, #76]	; (8002280 <xPortStartScheduler+0x130>)
 8002232:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002236:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002238:	f000 f8d6 	bl	80023e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <xPortStartScheduler+0x134>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002242:	f000 f8f5 	bl	8002430 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <xPortStartScheduler+0x138>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <xPortStartScheduler+0x138>)
 800224c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002250:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002252:	f7ff ff69 	bl	8002128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002256:	f7ff fd35 	bl	8001cc4 <vTaskSwitchContext>
	prvTaskExitError();
 800225a:	f7ff ff27 	bl	80020ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	e000ed00 	.word	0xe000ed00
 800226c:	410fc271 	.word	0x410fc271
 8002270:	410fc270 	.word	0x410fc270
 8002274:	e000e400 	.word	0xe000e400
 8002278:	200001bc 	.word	0x200001bc
 800227c:	200001c0 	.word	0x200001c0
 8002280:	e000ed20 	.word	0xe000ed20
 8002284:	20000000 	.word	0x20000000
 8002288:	e000ef34 	.word	0xe000ef34

0800228c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <vPortEnterCritical+0x54>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <vPortEnterCritical+0x54>)
 80022ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <vPortEnterCritical+0x54>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d10e      	bne.n	80022d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <vPortEnterCritical+0x58>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d009      	beq.n	80022d4 <vPortEnterCritical+0x48>
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	e7fe      	b.n	80022d2 <vPortEnterCritical+0x46>
	}
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	20000000 	.word	0x20000000
 80022e4:	e000ed04 	.word	0xe000ed04

080022e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <vPortExitCritical+0x4c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <vPortExitCritical+0x22>
 80022f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fa:	f383 8811 	msr	BASEPRI, r3
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	e7fe      	b.n	8002308 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <vPortExitCritical+0x4c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3b01      	subs	r3, #1
 8002310:	4a08      	ldr	r2, [pc, #32]	; (8002334 <vPortExitCritical+0x4c>)
 8002312:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <vPortExitCritical+0x4c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <vPortExitCritical+0x3e>
 800231c:	2300      	movs	r3, #0
 800231e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000
	...

08002340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002340:	f3ef 8009 	mrs	r0, PSP
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <pxCurrentTCBConst>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	f01e 0f10 	tst.w	lr, #16
 8002350:	bf08      	it	eq
 8002352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800235a:	6010      	str	r0, [r2, #0]
 800235c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002364:	f380 8811 	msr	BASEPRI, r0
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f7ff fca8 	bl	8001cc4 <vTaskSwitchContext>
 8002374:	f04f 0000 	mov.w	r0, #0
 8002378:	f380 8811 	msr	BASEPRI, r0
 800237c:	bc09      	pop	{r0, r3}
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	6808      	ldr	r0, [r1, #0]
 8002382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002386:	f01e 0f10 	tst.w	lr, #16
 800238a:	bf08      	it	eq
 800238c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002390:	f380 8809 	msr	PSP, r0
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	f3af 8000 	nop.w

080023a0 <pxCurrentTCBConst>:
 80023a0:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop

080023a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
	__asm volatile
 80023ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80023c0:	f7ff fbc4 	bl	8001b4c <xTaskIncrementTick>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <SysTick_Handler+0x3c>)
 80023cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	e000ed04 	.word	0xe000ed04

080023e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <vPortSetupTimerInterrupt+0x34>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <vPortSetupTimerInterrupt+0x38>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <vPortSetupTimerInterrupt+0x3c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <vPortSetupTimerInterrupt+0x40>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	099b      	lsrs	r3, r3, #6
 8002404:	4a09      	ldr	r2, [pc, #36]	; (800242c <vPortSetupTimerInterrupt+0x44>)
 8002406:	3b01      	subs	r3, #1
 8002408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <vPortSetupTimerInterrupt+0x34>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010
 8002420:	e000e018 	.word	0xe000e018
 8002424:	2000000c 	.word	0x2000000c
 8002428:	10624dd3 	.word	0x10624dd3
 800242c:	e000e014 	.word	0xe000e014

08002430 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002430:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002440 <vPortEnableVFP+0x10>
 8002434:	6801      	ldr	r1, [r0, #0]
 8002436:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800243a:	6001      	str	r1, [r0, #0]
 800243c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800243e:	bf00      	nop
 8002440:	e000ed88 	.word	0xe000ed88

08002444 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002450:	f7ff fad2 	bl	80019f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002454:	4b59      	ldr	r3, [pc, #356]	; (80025bc <pvPortMalloc+0x178>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800245c:	f000 f910 	bl	8002680 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002460:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <pvPortMalloc+0x17c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 808c 	bne.w	8002586 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01c      	beq.n	80024ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002474:	2208      	movs	r2, #8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	2b00      	cmp	r3, #0
 8002484:	d013      	beq.n	80024ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f023 0307 	bic.w	r3, r3, #7
 800248c:	3308      	adds	r3, #8
 800248e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <pvPortMalloc+0x6a>
	__asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e7fe      	b.n	80024ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d068      	beq.n	8002586 <pvPortMalloc+0x142>
 80024b4:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <pvPortMalloc+0x180>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d863      	bhi.n	8002586 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <pvPortMalloc+0x184>)
 80024c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <pvPortMalloc+0x184>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024c8:	e004      	b.n	80024d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d903      	bls.n	80024e6 <pvPortMalloc+0xa2>
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f1      	bne.n	80024ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80024e6:	4b35      	ldr	r3, [pc, #212]	; (80025bc <pvPortMalloc+0x178>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d04a      	beq.n	8002586 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2208      	movs	r2, #8
 80024f6:	4413      	add	r3, r2
 80024f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	1ad2      	subs	r2, r2, r3
 800250a:	2308      	movs	r3, #8
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	429a      	cmp	r2, r3
 8002510:	d91e      	bls.n	8002550 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <pvPortMalloc+0xf4>
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	e7fe      	b.n	8002536 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800254a:	69b8      	ldr	r0, [r7, #24]
 800254c:	f000 f8fa 	bl	8002744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <pvPortMalloc+0x180>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <pvPortMalloc+0x180>)
 800255c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800255e:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <pvPortMalloc+0x180>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <pvPortMalloc+0x188>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d203      	bcs.n	8002572 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <pvPortMalloc+0x180>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <pvPortMalloc+0x188>)
 8002570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <pvPortMalloc+0x17c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	431a      	orrs	r2, r3
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002586:	f7ff fa45 	bl	8001a14 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8002590:	f000 f944 	bl	800281c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <pvPortMalloc+0x16e>
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	e7fe      	b.n	80025b0 <pvPortMalloc+0x16c>
	return pvReturn;
 80025b2:	69fb      	ldr	r3, [r7, #28]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	200081cc 	.word	0x200081cc
 80025c0:	200081d8 	.word	0x200081d8
 80025c4:	200081d0 	.word	0x200081d0
 80025c8:	200081c4 	.word	0x200081c4
 80025cc:	200081d4 	.word	0x200081d4

080025d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d046      	beq.n	8002670 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80025e2:	2308      	movs	r3, #8
 80025e4:	425b      	negs	r3, r3
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4413      	add	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <vPortFree+0xa8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <vPortFree+0x42>
 80025fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e7fe      	b.n	8002610 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <vPortFree+0x5e>
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	e7fe      	b.n	800262c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <vPortFree+0xa8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d019      	beq.n	8002670 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d115      	bne.n	8002670 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <vPortFree+0xa8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002654:	f7ff f9d0 	bl	80019f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <vPortFree+0xac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4413      	add	r3, r2
 8002662:	4a06      	ldr	r2, [pc, #24]	; (800267c <vPortFree+0xac>)
 8002664:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002666:	6938      	ldr	r0, [r7, #16]
 8002668:	f000 f86c 	bl	8002744 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800266c:	f7ff f9d2 	bl	8001a14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002670:	bf00      	nop
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200081d8 	.word	0x200081d8
 800267c:	200081d0 	.word	0x200081d0

08002680 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <prvHeapInit+0xac>)
 800268e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3307      	adds	r3, #7
 800269e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0307 	bic.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	4a1f      	ldr	r2, [pc, #124]	; (800272c <prvHeapInit+0xac>)
 80026b0:	4413      	add	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026b8:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <prvHeapInit+0xb0>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <prvHeapInit+0xb0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4413      	add	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80026cc:	2208      	movs	r2, #8
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0307 	bic.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <prvHeapInit+0xb4>)
 80026e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <prvHeapInit+0xb4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <prvHeapInit+0xb4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <prvHeapInit+0xb4>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <prvHeapInit+0xb8>)
 800270e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <prvHeapInit+0xbc>)
 8002716:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <prvHeapInit+0xc0>)
 800271a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800271e:	601a      	str	r2, [r3, #0]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	200001c4 	.word	0x200001c4
 8002730:	200081c4 	.word	0x200081c4
 8002734:	200081cc 	.word	0x200081cc
 8002738:	200081d4 	.word	0x200081d4
 800273c:	200081d0 	.word	0x200081d0
 8002740:	200081d8 	.word	0x200081d8

08002744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <prvInsertBlockIntoFreeList+0xac>)
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e002      	b.n	8002758 <prvInsertBlockIntoFreeList+0x14>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d8f7      	bhi.n	8002752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d108      	bne.n	8002786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	441a      	add	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	441a      	add	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d118      	bne.n	80027cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <prvInsertBlockIntoFreeList+0xb0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d00d      	beq.n	80027c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e008      	b.n	80027d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <prvInsertBlockIntoFreeList+0xb0>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e003      	b.n	80027d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d002      	beq.n	80027e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	200081c4 	.word	0x200081c4
 80027f4:	200081cc 	.word	0x200081cc

080027f8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a07      	ldr	r2, [pc, #28]	; (8002858 <vApplicationGetIdleTaskMemory+0x2c>)
 800283c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4a06      	ldr	r2, [pc, #24]	; (800285c <vApplicationGetIdleTaskMemory+0x30>)
 8002842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200081dc 	.word	0x200081dc
 800285c:	20008234 	.word	0x20008234

08002860 <main>:




int main(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af02      	add	r7, sp, #8

  static const char *pcTextForTask1 = "Hello, Task 1 is Running!\r\n";
  static const char *pcTextForTask2 = "Hello, Task 2 is Running!\r\n";

  HAL_Init();
 8002866:	f7fd fd23 	bl	80002b0 <HAL_Init>

  
  MX_GPIO_Init();
 800286a:	f000 f879 	bl	8002960 <MX_GPIO_Init>

  MX_USART3_UART_Init();
 800286e:	f000 f84d 	bl	800290c <MX_USART3_UART_Init>

  xTaskCreate(vTaskFunction, "Task1", 1000, (void*)pcTextForTask1, 1, NULL);
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <main+0x4c>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	2301      	movs	r3, #1
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002884:	490a      	ldr	r1, [pc, #40]	; (80028b0 <main+0x50>)
 8002886:	480b      	ldr	r0, [pc, #44]	; (80028b4 <main+0x54>)
 8002888:	f7fe feeb 	bl	8001662 <xTaskCreate>

  xTaskCreate(vTaskFunction, "Task2", 1000, (void*)pcTextForTask2, 1, NULL);
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <main+0x58>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2300      	movs	r3, #0
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	2301      	movs	r3, #1
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289e:	4907      	ldr	r1, [pc, #28]	; (80028bc <main+0x5c>)
 80028a0:	4804      	ldr	r0, [pc, #16]	; (80028b4 <main+0x54>)
 80028a2:	f7fe fede 	bl	8001662 <xTaskCreate>

  vTaskStartScheduler();
 80028a6:	f7ff f849 	bl	800193c <vTaskStartScheduler>

  for(;;);
 80028aa:	e7fe      	b.n	80028aa <main+0x4a>
 80028ac:	20000004 	.word	0x20000004
 80028b0:	0800365c 	.word	0x0800365c
 80028b4:	08002a69 	.word	0x08002a69
 80028b8:	20000008 	.word	0x20000008
 80028bc:	08003664 	.word	0x08003664

080028c0 <print>:

}

static void print(char string[]){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b0ce      	sub	sp, #312	; 0x138
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	6018      	str	r0, [r3, #0]
	char buffer[300];
	int len;
	sprintf(buffer, string);
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	f107 0208 	add.w	r2, r7, #8
 80028d0:	6819      	ldr	r1, [r3, #0]
 80028d2:	4610      	mov	r0, r2
 80028d4:	f000 fab6 	bl	8002e44 <siprintf>
	len = strlen(buffer);
 80028d8:	f107 0308 	add.w	r3, r7, #8
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fc8f 	bl	8000200 <strlen>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 80028e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	f107 0108 	add.w	r1, r7, #8
 80028f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f6:	4804      	ldr	r0, [pc, #16]	; (8002908 <print+0x48>)
 80028f8:	f7fe fab9 	bl	8000e6e <HAL_UART_Transmit>

}
 80028fc:	bf00      	nop
 80028fe:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20008444 	.word	0x20008444

0800290c <MX_USART3_UART_Init>:


static void MX_USART3_UART_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <MX_USART3_UART_Init+0x50>)
 8002914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800291c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002944:	f7fe fa46 	bl	8000dd4 <HAL_UART_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800294e:	f000 f881 	bl	8002a54 <Error_Handler>
  }

}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20008444 	.word	0x20008444
 800295c:	40004800 	.word	0x40004800

08002960 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <MX_GPIO_Init+0xe4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <MX_GPIO_Init+0xe4>)
 8002980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <MX_GPIO_Init+0xe4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]

  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <MX_GPIO_Init+0xe4>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a2a      	ldr	r2, [pc, #168]	; (8002a44 <MX_GPIO_Init+0xe4>)
 800299c:	f043 0308 	orr.w	r3, r3, #8
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <MX_GPIO_Init+0xe4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]

  __HAL_RCC_GPIOK_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <MX_GPIO_Init+0xe4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <MX_GPIO_Init+0xe4>)
 80029b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <MX_GPIO_Init+0xe4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_SET); //PORT D
 80029ca:	2201      	movs	r2, #1
 80029cc:	2130      	movs	r1, #48	; 0x30
 80029ce:	481e      	ldr	r0, [pc, #120]	; (8002a48 <MX_GPIO_Init+0xe8>)
 80029d0:	f7fd ff28 	bl	8000824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET); //PORT K
 80029d4:	2201      	movs	r2, #1
 80029d6:	2108      	movs	r1, #8
 80029d8:	481c      	ldr	r0, [pc, #112]	; (8002a4c <MX_GPIO_Init+0xec>)
 80029da:	f7fd ff23 	bl	8000824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); //PORT G
 80029de:	2201      	movs	r2, #1
 80029e0:	2140      	movs	r1, #64	; 0x40
 80029e2:	481b      	ldr	r0, [pc, #108]	; (8002a50 <MX_GPIO_Init+0xf0>)
 80029e4:	f7fd ff1e 	bl	8000824 <HAL_GPIO_WritePin>



  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80029e8:	2330      	movs	r3, #48	; 0x30
 80029ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80029ec:	2311      	movs	r3, #17
 80029ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	4619      	mov	r1, r3
 80029fe:	4812      	ldr	r0, [pc, #72]	; (8002a48 <MX_GPIO_Init+0xe8>)
 8002a00:	f7fd fd66 	bl	80004d0 <HAL_GPIO_Init>


  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8002a04:	2308      	movs	r3, #8
 8002a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a08:	2311      	movs	r3, #17
 8002a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480c      	ldr	r0, [pc, #48]	; (8002a4c <MX_GPIO_Init+0xec>)
 8002a1c:	f7fd fd58 	bl	80004d0 <HAL_GPIO_Init>


  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002a20:	2340      	movs	r3, #64	; 0x40
 8002a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a24:	2311      	movs	r3, #17
 8002a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	4619      	mov	r1, r3
 8002a36:	4806      	ldr	r0, [pc, #24]	; (8002a50 <MX_GPIO_Init+0xf0>)
 8002a38:	f7fd fd4a 	bl	80004d0 <HAL_GPIO_Init>

}
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40022800 	.word	0x40022800
 8002a50:	40021800 	.word	0x40021800

08002a54 <Error_Handler>:



void Error_Handler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	print("Error in USART3\n");
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <Error_Handler+0x10>)
 8002a5a:	f7ff ff31 	bl	80028c0 <print>
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	0800366c 	.word	0x0800366c

08002a68 <vTaskFunction>:


void vTaskFunction(void *pvParameters){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	char *pcTaskName;

	pcTaskName = (char * ) pvParameters;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60fb      	str	r3, [r7, #12]

	for (;;) {
		print(pcTaskName);
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff ff23 	bl	80028c0 <print>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	4803      	ldr	r0, [pc, #12]	; (8002a8c <vTaskFunction+0x24>)
 8002a7e:	f7fd feea 	bl	8000856 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 8002a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a86:	f7fe ff25 	bl	80018d4 <vTaskDelay>
		print(pcTaskName);
 8002a8a:	e7f3      	b.n	8002a74 <vTaskFunction+0xc>
 8002a8c:	40022800 	.word	0x40022800

08002a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <HAL_MspInit+0x4c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_MspInit+0x4c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <HAL_MspInit+0x4c>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08c      	sub	sp, #48	; 0x30
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002af0:	2200      	movs	r2, #0
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	2036      	movs	r0, #54	; 0x36
 8002af6:	f7fd fcc1 	bl	800047c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002afa:	2036      	movs	r0, #54	; 0x36
 8002afc:	f7fd fcda 	bl	80004b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_InitTick+0xa4>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_InitTick+0xa4>)
 8002b0a:	f043 0310 	orr.w	r3, r3, #16
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_InitTick+0xa4>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b1c:	f107 0210 	add.w	r2, r7, #16
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fee4 	bl	80008f4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b2c:	f7fd feba 	bl	80008a4 <HAL_RCC_GetPCLK1Freq>
 8002b30:	4603      	mov	r3, r0
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_InitTick+0xa8>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0c9b      	lsrs	r3, r3, #18
 8002b40:	3b01      	subs	r3, #1
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_InitTick+0xac>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <HAL_InitTick+0xb0>)
 8002b48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_InitTick+0xac>)
 8002b4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b52:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <HAL_InitTick+0xac>)
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <HAL_InitTick+0xac>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_InitTick+0xac>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b64:	4809      	ldr	r0, [pc, #36]	; (8002b8c <HAL_InitTick+0xac>)
 8002b66:	f7fd fef7 	bl	8000958 <HAL_TIM_Base_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d104      	bne.n	8002b7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b70:	4806      	ldr	r0, [pc, #24]	; (8002b8c <HAL_InitTick+0xac>)
 8002b72:	f7fd ff1c 	bl	80009ae <HAL_TIM_Base_Start_IT>
 8002b76:	4603      	mov	r3, r0
 8002b78:	e000      	b.n	8002b7c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3730      	adds	r7, #48	; 0x30
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	431bde83 	.word	0x431bde83
 8002b8c:	20008484 	.word	0x20008484
 8002b90:	40001000 	.word	0x40001000

08002b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba6:	e7fe      	b.n	8002ba6 <HardFault_Handler+0x4>

08002ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <MemManage_Handler+0x4>

08002bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb2:	e7fe      	b.n	8002bb2 <BusFault_Handler+0x4>

08002bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <UsageFault_Handler+0x4>

08002bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <TIM6_DAC_IRQHandler+0x10>)
 8002bce:	f7fd ff12 	bl	80009f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20008484 	.word	0x20008484

08002bdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <_sbrk+0x50>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <_sbrk+0x16>
		heap_end = &end;
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <_sbrk+0x50>)
 8002bee:	4a10      	ldr	r2, [pc, #64]	; (8002c30 <_sbrk+0x54>)
 8002bf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <_sbrk+0x50>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <_sbrk+0x50>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	466a      	mov	r2, sp
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d907      	bls.n	8002c16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c06:	f000 f8df 	bl	8002dc8 <__errno>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c14:	e006      	b.n	8002c24 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <_sbrk+0x50>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a03      	ldr	r2, [pc, #12]	; (8002c2c <_sbrk+0x50>)
 8002c20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20008434 	.word	0x20008434
 8002c30:	200084c8 	.word	0x200084c8

08002c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <SystemInit+0x60>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <SystemInit+0x60>)
 8002c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <SystemInit+0x64>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <SystemInit+0x64>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <SystemInit+0x64>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <SystemInit+0x64>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <SystemInit+0x64>)
 8002c60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <SystemInit+0x64>)
 8002c6c:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <SystemInit+0x68>)
 8002c6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <SystemInit+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <SystemInit+0x64>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <SystemInit+0x64>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c82:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <SystemInit+0x60>)
 8002c84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c88:	609a      	str	r2, [r3, #8]
#endif
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	24003010 	.word	0x24003010

08002ca0 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0b      	ldr	r2, [pc, #44]	; (8002cdc <HAL_TIM_Base_MspInit+0x3c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10d      	bne.n	8002cce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_TIM_Base_MspInit+0x40>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_TIM_Base_MspInit+0x40>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <HAL_TIM_Base_MspInit+0x40>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_UART_MspInit+0x84>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d12c      	bne.n	8002d60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d50:	2307      	movs	r3, #7
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_UART_MspInit+0x8c>)
 8002d5c:	f7fd fbb8 	bl	80004d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d60:	bf00      	nop
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40004800 	.word	0x40004800
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020400 	.word	0x40020400

08002d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d7a:	e003      	b.n	8002d84 <LoopCopyDataInit>

08002d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d82:	3104      	adds	r1, #4

08002d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d84:	480b      	ldr	r0, [pc, #44]	; (8002db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d8c:	d3f6      	bcc.n	8002d7c <CopyDataInit>
  ldr  r2, =_sbss
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d90:	e002      	b.n	8002d98 <LoopFillZerobss>

08002d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d94:	f842 3b04 	str.w	r3, [r2], #4

08002d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d9c:	d3f9      	bcc.n	8002d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d9e:	f7ff ff49 	bl	8002c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002da2:	f000 f817 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da6:	f7ff fd5b 	bl	8002860 <main>
  bx  lr    
 8002daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dac:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002db0:	080036fc 	.word	0x080036fc
  ldr  r0, =_sdata
 8002db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002db8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002dbc:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002dc0:	200084c8 	.word	0x200084c8

08002dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc4:	e7fe      	b.n	8002dc4 <ADC_IRQHandler>
	...

08002dc8 <__errno>:
 8002dc8:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <__errno+0x8>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000010 	.word	0x20000010

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4e0d      	ldr	r6, [pc, #52]	; (8002e0c <__libc_init_array+0x38>)
 8002dd8:	4c0d      	ldr	r4, [pc, #52]	; (8002e10 <__libc_init_array+0x3c>)
 8002dda:	1ba4      	subs	r4, r4, r6
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	2500      	movs	r5, #0
 8002de0:	42a5      	cmp	r5, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	4e0b      	ldr	r6, [pc, #44]	; (8002e14 <__libc_init_array+0x40>)
 8002de6:	4c0c      	ldr	r4, [pc, #48]	; (8002e18 <__libc_init_array+0x44>)
 8002de8:	f000 fc28 	bl	800363c <_init>
 8002dec:	1ba4      	subs	r4, r4, r6
 8002dee:	10a4      	asrs	r4, r4, #2
 8002df0:	2500      	movs	r5, #0
 8002df2:	42a5      	cmp	r5, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dfc:	4798      	blx	r3
 8002dfe:	3501      	adds	r5, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e06:	4798      	blx	r3
 8002e08:	3501      	adds	r5, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	080036f4 	.word	0x080036f4
 8002e10:	080036f4 	.word	0x080036f4
 8002e14:	080036f4 	.word	0x080036f4
 8002e18:	080036f8 	.word	0x080036f8

08002e1c <memcpy>:
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	1e43      	subs	r3, r0, #1
 8002e20:	440a      	add	r2, r1
 8002e22:	4291      	cmp	r1, r2
 8002e24:	d100      	bne.n	8002e28 <memcpy+0xc>
 8002e26:	bd10      	pop	{r4, pc}
 8002e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e30:	e7f7      	b.n	8002e22 <memcpy+0x6>

08002e32 <memset>:
 8002e32:	4402      	add	r2, r0
 8002e34:	4603      	mov	r3, r0
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d100      	bne.n	8002e3c <memset+0xa>
 8002e3a:	4770      	bx	lr
 8002e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8002e40:	e7f9      	b.n	8002e36 <memset+0x4>
	...

08002e44 <siprintf>:
 8002e44:	b40e      	push	{r1, r2, r3}
 8002e46:	b500      	push	{lr}
 8002e48:	b09c      	sub	sp, #112	; 0x70
 8002e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8002e4c:	9002      	str	r0, [sp, #8]
 8002e4e:	9006      	str	r0, [sp, #24]
 8002e50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e54:	4809      	ldr	r0, [pc, #36]	; (8002e7c <siprintf+0x38>)
 8002e56:	9107      	str	r1, [sp, #28]
 8002e58:	9104      	str	r1, [sp, #16]
 8002e5a:	4909      	ldr	r1, [pc, #36]	; (8002e80 <siprintf+0x3c>)
 8002e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e60:	9105      	str	r1, [sp, #20]
 8002e62:	6800      	ldr	r0, [r0, #0]
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	a902      	add	r1, sp, #8
 8002e68:	f000 f866 	bl	8002f38 <_svfiprintf_r>
 8002e6c:	9b02      	ldr	r3, [sp, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	b01c      	add	sp, #112	; 0x70
 8002e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e78:	b003      	add	sp, #12
 8002e7a:	4770      	bx	lr
 8002e7c:	20000010 	.word	0x20000010
 8002e80:	ffff0208 	.word	0xffff0208

08002e84 <__ssputs_r>:
 8002e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e88:	688e      	ldr	r6, [r1, #8]
 8002e8a:	429e      	cmp	r6, r3
 8002e8c:	4682      	mov	sl, r0
 8002e8e:	460c      	mov	r4, r1
 8002e90:	4690      	mov	r8, r2
 8002e92:	4699      	mov	r9, r3
 8002e94:	d837      	bhi.n	8002f06 <__ssputs_r+0x82>
 8002e96:	898a      	ldrh	r2, [r1, #12]
 8002e98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e9c:	d031      	beq.n	8002f02 <__ssputs_r+0x7e>
 8002e9e:	6825      	ldr	r5, [r4, #0]
 8002ea0:	6909      	ldr	r1, [r1, #16]
 8002ea2:	1a6f      	subs	r7, r5, r1
 8002ea4:	6965      	ldr	r5, [r4, #20]
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002eac:	fb95 f5f3 	sdiv	r5, r5, r3
 8002eb0:	f109 0301 	add.w	r3, r9, #1
 8002eb4:	443b      	add	r3, r7
 8002eb6:	429d      	cmp	r5, r3
 8002eb8:	bf38      	it	cc
 8002eba:	461d      	movcc	r5, r3
 8002ebc:	0553      	lsls	r3, r2, #21
 8002ebe:	d530      	bpl.n	8002f22 <__ssputs_r+0x9e>
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f000 fb21 	bl	8003508 <_malloc_r>
 8002ec6:	4606      	mov	r6, r0
 8002ec8:	b950      	cbnz	r0, 8002ee0 <__ssputs_r+0x5c>
 8002eca:	230c      	movs	r3, #12
 8002ecc:	f8ca 3000 	str.w	r3, [sl]
 8002ed0:	89a3      	ldrh	r3, [r4, #12]
 8002ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee0:	463a      	mov	r2, r7
 8002ee2:	6921      	ldr	r1, [r4, #16]
 8002ee4:	f7ff ff9a 	bl	8002e1c <memcpy>
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef2:	81a3      	strh	r3, [r4, #12]
 8002ef4:	6126      	str	r6, [r4, #16]
 8002ef6:	6165      	str	r5, [r4, #20]
 8002ef8:	443e      	add	r6, r7
 8002efa:	1bed      	subs	r5, r5, r7
 8002efc:	6026      	str	r6, [r4, #0]
 8002efe:	60a5      	str	r5, [r4, #8]
 8002f00:	464e      	mov	r6, r9
 8002f02:	454e      	cmp	r6, r9
 8002f04:	d900      	bls.n	8002f08 <__ssputs_r+0x84>
 8002f06:	464e      	mov	r6, r9
 8002f08:	4632      	mov	r2, r6
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	6820      	ldr	r0, [r4, #0]
 8002f0e:	f000 fa93 	bl	8003438 <memmove>
 8002f12:	68a3      	ldr	r3, [r4, #8]
 8002f14:	1b9b      	subs	r3, r3, r6
 8002f16:	60a3      	str	r3, [r4, #8]
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	441e      	add	r6, r3
 8002f1c:	6026      	str	r6, [r4, #0]
 8002f1e:	2000      	movs	r0, #0
 8002f20:	e7dc      	b.n	8002edc <__ssputs_r+0x58>
 8002f22:	462a      	mov	r2, r5
 8002f24:	f000 fb4a 	bl	80035bc <_realloc_r>
 8002f28:	4606      	mov	r6, r0
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d1e2      	bne.n	8002ef4 <__ssputs_r+0x70>
 8002f2e:	6921      	ldr	r1, [r4, #16]
 8002f30:	4650      	mov	r0, sl
 8002f32:	f000 fa9b 	bl	800346c <_free_r>
 8002f36:	e7c8      	b.n	8002eca <__ssputs_r+0x46>

08002f38 <_svfiprintf_r>:
 8002f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3c:	461d      	mov	r5, r3
 8002f3e:	898b      	ldrh	r3, [r1, #12]
 8002f40:	061f      	lsls	r7, r3, #24
 8002f42:	b09d      	sub	sp, #116	; 0x74
 8002f44:	4680      	mov	r8, r0
 8002f46:	460c      	mov	r4, r1
 8002f48:	4616      	mov	r6, r2
 8002f4a:	d50f      	bpl.n	8002f6c <_svfiprintf_r+0x34>
 8002f4c:	690b      	ldr	r3, [r1, #16]
 8002f4e:	b96b      	cbnz	r3, 8002f6c <_svfiprintf_r+0x34>
 8002f50:	2140      	movs	r1, #64	; 0x40
 8002f52:	f000 fad9 	bl	8003508 <_malloc_r>
 8002f56:	6020      	str	r0, [r4, #0]
 8002f58:	6120      	str	r0, [r4, #16]
 8002f5a:	b928      	cbnz	r0, 8002f68 <_svfiprintf_r+0x30>
 8002f5c:	230c      	movs	r3, #12
 8002f5e:	f8c8 3000 	str.w	r3, [r8]
 8002f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f66:	e0c8      	b.n	80030fa <_svfiprintf_r+0x1c2>
 8002f68:	2340      	movs	r3, #64	; 0x40
 8002f6a:	6163      	str	r3, [r4, #20]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f70:	2320      	movs	r3, #32
 8002f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f76:	2330      	movs	r3, #48	; 0x30
 8002f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f7c:	9503      	str	r5, [sp, #12]
 8002f7e:	f04f 0b01 	mov.w	fp, #1
 8002f82:	4637      	mov	r7, r6
 8002f84:	463d      	mov	r5, r7
 8002f86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f8a:	b10b      	cbz	r3, 8002f90 <_svfiprintf_r+0x58>
 8002f8c:	2b25      	cmp	r3, #37	; 0x25
 8002f8e:	d13e      	bne.n	800300e <_svfiprintf_r+0xd6>
 8002f90:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f94:	d00b      	beq.n	8002fae <_svfiprintf_r+0x76>
 8002f96:	4653      	mov	r3, sl
 8002f98:	4632      	mov	r2, r6
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	4640      	mov	r0, r8
 8002f9e:	f7ff ff71 	bl	8002e84 <__ssputs_r>
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	f000 80a4 	beq.w	80030f0 <_svfiprintf_r+0x1b8>
 8002fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002faa:	4453      	add	r3, sl
 8002fac:	9309      	str	r3, [sp, #36]	; 0x24
 8002fae:	783b      	ldrb	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 809d 	beq.w	80030f0 <_svfiprintf_r+0x1b8>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fc0:	9304      	str	r3, [sp, #16]
 8002fc2:	9307      	str	r3, [sp, #28]
 8002fc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8002fca:	462f      	mov	r7, r5
 8002fcc:	2205      	movs	r2, #5
 8002fce:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002fd2:	4850      	ldr	r0, [pc, #320]	; (8003114 <_svfiprintf_r+0x1dc>)
 8002fd4:	f7fd f91c 	bl	8000210 <memchr>
 8002fd8:	9b04      	ldr	r3, [sp, #16]
 8002fda:	b9d0      	cbnz	r0, 8003012 <_svfiprintf_r+0xda>
 8002fdc:	06d9      	lsls	r1, r3, #27
 8002fde:	bf44      	itt	mi
 8002fe0:	2220      	movmi	r2, #32
 8002fe2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fe6:	071a      	lsls	r2, r3, #28
 8002fe8:	bf44      	itt	mi
 8002fea:	222b      	movmi	r2, #43	; 0x2b
 8002fec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ff0:	782a      	ldrb	r2, [r5, #0]
 8002ff2:	2a2a      	cmp	r2, #42	; 0x2a
 8002ff4:	d015      	beq.n	8003022 <_svfiprintf_r+0xea>
 8002ff6:	9a07      	ldr	r2, [sp, #28]
 8002ff8:	462f      	mov	r7, r5
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	250a      	movs	r5, #10
 8002ffe:	4639      	mov	r1, r7
 8003000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003004:	3b30      	subs	r3, #48	; 0x30
 8003006:	2b09      	cmp	r3, #9
 8003008:	d94d      	bls.n	80030a6 <_svfiprintf_r+0x16e>
 800300a:	b1b8      	cbz	r0, 800303c <_svfiprintf_r+0x104>
 800300c:	e00f      	b.n	800302e <_svfiprintf_r+0xf6>
 800300e:	462f      	mov	r7, r5
 8003010:	e7b8      	b.n	8002f84 <_svfiprintf_r+0x4c>
 8003012:	4a40      	ldr	r2, [pc, #256]	; (8003114 <_svfiprintf_r+0x1dc>)
 8003014:	1a80      	subs	r0, r0, r2
 8003016:	fa0b f000 	lsl.w	r0, fp, r0
 800301a:	4318      	orrs	r0, r3
 800301c:	9004      	str	r0, [sp, #16]
 800301e:	463d      	mov	r5, r7
 8003020:	e7d3      	b.n	8002fca <_svfiprintf_r+0x92>
 8003022:	9a03      	ldr	r2, [sp, #12]
 8003024:	1d11      	adds	r1, r2, #4
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	9103      	str	r1, [sp, #12]
 800302a:	2a00      	cmp	r2, #0
 800302c:	db01      	blt.n	8003032 <_svfiprintf_r+0xfa>
 800302e:	9207      	str	r2, [sp, #28]
 8003030:	e004      	b.n	800303c <_svfiprintf_r+0x104>
 8003032:	4252      	negs	r2, r2
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	9207      	str	r2, [sp, #28]
 800303a:	9304      	str	r3, [sp, #16]
 800303c:	783b      	ldrb	r3, [r7, #0]
 800303e:	2b2e      	cmp	r3, #46	; 0x2e
 8003040:	d10c      	bne.n	800305c <_svfiprintf_r+0x124>
 8003042:	787b      	ldrb	r3, [r7, #1]
 8003044:	2b2a      	cmp	r3, #42	; 0x2a
 8003046:	d133      	bne.n	80030b0 <_svfiprintf_r+0x178>
 8003048:	9b03      	ldr	r3, [sp, #12]
 800304a:	1d1a      	adds	r2, r3, #4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	9203      	str	r2, [sp, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	bfb8      	it	lt
 8003054:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003058:	3702      	adds	r7, #2
 800305a:	9305      	str	r3, [sp, #20]
 800305c:	4d2e      	ldr	r5, [pc, #184]	; (8003118 <_svfiprintf_r+0x1e0>)
 800305e:	7839      	ldrb	r1, [r7, #0]
 8003060:	2203      	movs	r2, #3
 8003062:	4628      	mov	r0, r5
 8003064:	f7fd f8d4 	bl	8000210 <memchr>
 8003068:	b138      	cbz	r0, 800307a <_svfiprintf_r+0x142>
 800306a:	2340      	movs	r3, #64	; 0x40
 800306c:	1b40      	subs	r0, r0, r5
 800306e:	fa03 f000 	lsl.w	r0, r3, r0
 8003072:	9b04      	ldr	r3, [sp, #16]
 8003074:	4303      	orrs	r3, r0
 8003076:	3701      	adds	r7, #1
 8003078:	9304      	str	r3, [sp, #16]
 800307a:	7839      	ldrb	r1, [r7, #0]
 800307c:	4827      	ldr	r0, [pc, #156]	; (800311c <_svfiprintf_r+0x1e4>)
 800307e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003082:	2206      	movs	r2, #6
 8003084:	1c7e      	adds	r6, r7, #1
 8003086:	f7fd f8c3 	bl	8000210 <memchr>
 800308a:	2800      	cmp	r0, #0
 800308c:	d038      	beq.n	8003100 <_svfiprintf_r+0x1c8>
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <_svfiprintf_r+0x1e8>)
 8003090:	bb13      	cbnz	r3, 80030d8 <_svfiprintf_r+0x1a0>
 8003092:	9b03      	ldr	r3, [sp, #12]
 8003094:	3307      	adds	r3, #7
 8003096:	f023 0307 	bic.w	r3, r3, #7
 800309a:	3308      	adds	r3, #8
 800309c:	9303      	str	r3, [sp, #12]
 800309e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a0:	444b      	add	r3, r9
 80030a2:	9309      	str	r3, [sp, #36]	; 0x24
 80030a4:	e76d      	b.n	8002f82 <_svfiprintf_r+0x4a>
 80030a6:	fb05 3202 	mla	r2, r5, r2, r3
 80030aa:	2001      	movs	r0, #1
 80030ac:	460f      	mov	r7, r1
 80030ae:	e7a6      	b.n	8002ffe <_svfiprintf_r+0xc6>
 80030b0:	2300      	movs	r3, #0
 80030b2:	3701      	adds	r7, #1
 80030b4:	9305      	str	r3, [sp, #20]
 80030b6:	4619      	mov	r1, r3
 80030b8:	250a      	movs	r5, #10
 80030ba:	4638      	mov	r0, r7
 80030bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030c0:	3a30      	subs	r2, #48	; 0x30
 80030c2:	2a09      	cmp	r2, #9
 80030c4:	d903      	bls.n	80030ce <_svfiprintf_r+0x196>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0c8      	beq.n	800305c <_svfiprintf_r+0x124>
 80030ca:	9105      	str	r1, [sp, #20]
 80030cc:	e7c6      	b.n	800305c <_svfiprintf_r+0x124>
 80030ce:	fb05 2101 	mla	r1, r5, r1, r2
 80030d2:	2301      	movs	r3, #1
 80030d4:	4607      	mov	r7, r0
 80030d6:	e7f0      	b.n	80030ba <_svfiprintf_r+0x182>
 80030d8:	ab03      	add	r3, sp, #12
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	4622      	mov	r2, r4
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <_svfiprintf_r+0x1ec>)
 80030e0:	a904      	add	r1, sp, #16
 80030e2:	4640      	mov	r0, r8
 80030e4:	f3af 8000 	nop.w
 80030e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80030ec:	4681      	mov	r9, r0
 80030ee:	d1d6      	bne.n	800309e <_svfiprintf_r+0x166>
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	065b      	lsls	r3, r3, #25
 80030f4:	f53f af35 	bmi.w	8002f62 <_svfiprintf_r+0x2a>
 80030f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030fa:	b01d      	add	sp, #116	; 0x74
 80030fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003100:	ab03      	add	r3, sp, #12
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	4622      	mov	r2, r4
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <_svfiprintf_r+0x1ec>)
 8003108:	a904      	add	r1, sp, #16
 800310a:	4640      	mov	r0, r8
 800310c:	f000 f882 	bl	8003214 <_printf_i>
 8003110:	e7ea      	b.n	80030e8 <_svfiprintf_r+0x1b0>
 8003112:	bf00      	nop
 8003114:	080036c0 	.word	0x080036c0
 8003118:	080036c6 	.word	0x080036c6
 800311c:	080036ca 	.word	0x080036ca
 8003120:	00000000 	.word	0x00000000
 8003124:	08002e85 	.word	0x08002e85

08003128 <_printf_common>:
 8003128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800312c:	4691      	mov	r9, r2
 800312e:	461f      	mov	r7, r3
 8003130:	688a      	ldr	r2, [r1, #8]
 8003132:	690b      	ldr	r3, [r1, #16]
 8003134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003138:	4293      	cmp	r3, r2
 800313a:	bfb8      	it	lt
 800313c:	4613      	movlt	r3, r2
 800313e:	f8c9 3000 	str.w	r3, [r9]
 8003142:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003146:	4606      	mov	r6, r0
 8003148:	460c      	mov	r4, r1
 800314a:	b112      	cbz	r2, 8003152 <_printf_common+0x2a>
 800314c:	3301      	adds	r3, #1
 800314e:	f8c9 3000 	str.w	r3, [r9]
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	0699      	lsls	r1, r3, #26
 8003156:	bf42      	ittt	mi
 8003158:	f8d9 3000 	ldrmi.w	r3, [r9]
 800315c:	3302      	addmi	r3, #2
 800315e:	f8c9 3000 	strmi.w	r3, [r9]
 8003162:	6825      	ldr	r5, [r4, #0]
 8003164:	f015 0506 	ands.w	r5, r5, #6
 8003168:	d107      	bne.n	800317a <_printf_common+0x52>
 800316a:	f104 0a19 	add.w	sl, r4, #25
 800316e:	68e3      	ldr	r3, [r4, #12]
 8003170:	f8d9 2000 	ldr.w	r2, [r9]
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	42ab      	cmp	r3, r5
 8003178:	dc28      	bgt.n	80031cc <_printf_common+0xa4>
 800317a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800317e:	6822      	ldr	r2, [r4, #0]
 8003180:	3300      	adds	r3, #0
 8003182:	bf18      	it	ne
 8003184:	2301      	movne	r3, #1
 8003186:	0692      	lsls	r2, r2, #26
 8003188:	d42d      	bmi.n	80031e6 <_printf_common+0xbe>
 800318a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800318e:	4639      	mov	r1, r7
 8003190:	4630      	mov	r0, r6
 8003192:	47c0      	blx	r8
 8003194:	3001      	adds	r0, #1
 8003196:	d020      	beq.n	80031da <_printf_common+0xb2>
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	68e5      	ldr	r5, [r4, #12]
 800319c:	f8d9 2000 	ldr.w	r2, [r9]
 80031a0:	f003 0306 	and.w	r3, r3, #6
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	bf08      	it	eq
 80031a8:	1aad      	subeq	r5, r5, r2
 80031aa:	68a3      	ldr	r3, [r4, #8]
 80031ac:	6922      	ldr	r2, [r4, #16]
 80031ae:	bf0c      	ite	eq
 80031b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031b4:	2500      	movne	r5, #0
 80031b6:	4293      	cmp	r3, r2
 80031b8:	bfc4      	itt	gt
 80031ba:	1a9b      	subgt	r3, r3, r2
 80031bc:	18ed      	addgt	r5, r5, r3
 80031be:	f04f 0900 	mov.w	r9, #0
 80031c2:	341a      	adds	r4, #26
 80031c4:	454d      	cmp	r5, r9
 80031c6:	d11a      	bne.n	80031fe <_printf_common+0xd6>
 80031c8:	2000      	movs	r0, #0
 80031ca:	e008      	b.n	80031de <_printf_common+0xb6>
 80031cc:	2301      	movs	r3, #1
 80031ce:	4652      	mov	r2, sl
 80031d0:	4639      	mov	r1, r7
 80031d2:	4630      	mov	r0, r6
 80031d4:	47c0      	blx	r8
 80031d6:	3001      	adds	r0, #1
 80031d8:	d103      	bne.n	80031e2 <_printf_common+0xba>
 80031da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e2:	3501      	adds	r5, #1
 80031e4:	e7c3      	b.n	800316e <_printf_common+0x46>
 80031e6:	18e1      	adds	r1, r4, r3
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	2030      	movs	r0, #48	; 0x30
 80031ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031f0:	4422      	add	r2, r4
 80031f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031fa:	3302      	adds	r3, #2
 80031fc:	e7c5      	b.n	800318a <_printf_common+0x62>
 80031fe:	2301      	movs	r3, #1
 8003200:	4622      	mov	r2, r4
 8003202:	4639      	mov	r1, r7
 8003204:	4630      	mov	r0, r6
 8003206:	47c0      	blx	r8
 8003208:	3001      	adds	r0, #1
 800320a:	d0e6      	beq.n	80031da <_printf_common+0xb2>
 800320c:	f109 0901 	add.w	r9, r9, #1
 8003210:	e7d8      	b.n	80031c4 <_printf_common+0x9c>
	...

08003214 <_printf_i>:
 8003214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003218:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800321c:	460c      	mov	r4, r1
 800321e:	7e09      	ldrb	r1, [r1, #24]
 8003220:	b085      	sub	sp, #20
 8003222:	296e      	cmp	r1, #110	; 0x6e
 8003224:	4617      	mov	r7, r2
 8003226:	4606      	mov	r6, r0
 8003228:	4698      	mov	r8, r3
 800322a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800322c:	f000 80b3 	beq.w	8003396 <_printf_i+0x182>
 8003230:	d822      	bhi.n	8003278 <_printf_i+0x64>
 8003232:	2963      	cmp	r1, #99	; 0x63
 8003234:	d036      	beq.n	80032a4 <_printf_i+0x90>
 8003236:	d80a      	bhi.n	800324e <_printf_i+0x3a>
 8003238:	2900      	cmp	r1, #0
 800323a:	f000 80b9 	beq.w	80033b0 <_printf_i+0x19c>
 800323e:	2958      	cmp	r1, #88	; 0x58
 8003240:	f000 8083 	beq.w	800334a <_printf_i+0x136>
 8003244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003248:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800324c:	e032      	b.n	80032b4 <_printf_i+0xa0>
 800324e:	2964      	cmp	r1, #100	; 0x64
 8003250:	d001      	beq.n	8003256 <_printf_i+0x42>
 8003252:	2969      	cmp	r1, #105	; 0x69
 8003254:	d1f6      	bne.n	8003244 <_printf_i+0x30>
 8003256:	6820      	ldr	r0, [r4, #0]
 8003258:	6813      	ldr	r3, [r2, #0]
 800325a:	0605      	lsls	r5, r0, #24
 800325c:	f103 0104 	add.w	r1, r3, #4
 8003260:	d52a      	bpl.n	80032b8 <_printf_i+0xa4>
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6011      	str	r1, [r2, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	da03      	bge.n	8003272 <_printf_i+0x5e>
 800326a:	222d      	movs	r2, #45	; 0x2d
 800326c:	425b      	negs	r3, r3
 800326e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003272:	486f      	ldr	r0, [pc, #444]	; (8003430 <_printf_i+0x21c>)
 8003274:	220a      	movs	r2, #10
 8003276:	e039      	b.n	80032ec <_printf_i+0xd8>
 8003278:	2973      	cmp	r1, #115	; 0x73
 800327a:	f000 809d 	beq.w	80033b8 <_printf_i+0x1a4>
 800327e:	d808      	bhi.n	8003292 <_printf_i+0x7e>
 8003280:	296f      	cmp	r1, #111	; 0x6f
 8003282:	d020      	beq.n	80032c6 <_printf_i+0xb2>
 8003284:	2970      	cmp	r1, #112	; 0x70
 8003286:	d1dd      	bne.n	8003244 <_printf_i+0x30>
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	f043 0320 	orr.w	r3, r3, #32
 800328e:	6023      	str	r3, [r4, #0]
 8003290:	e003      	b.n	800329a <_printf_i+0x86>
 8003292:	2975      	cmp	r1, #117	; 0x75
 8003294:	d017      	beq.n	80032c6 <_printf_i+0xb2>
 8003296:	2978      	cmp	r1, #120	; 0x78
 8003298:	d1d4      	bne.n	8003244 <_printf_i+0x30>
 800329a:	2378      	movs	r3, #120	; 0x78
 800329c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032a0:	4864      	ldr	r0, [pc, #400]	; (8003434 <_printf_i+0x220>)
 80032a2:	e055      	b.n	8003350 <_printf_i+0x13c>
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	1d19      	adds	r1, r3, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6011      	str	r1, [r2, #0]
 80032ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032b4:	2301      	movs	r3, #1
 80032b6:	e08c      	b.n	80033d2 <_printf_i+0x1be>
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6011      	str	r1, [r2, #0]
 80032bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032c0:	bf18      	it	ne
 80032c2:	b21b      	sxthne	r3, r3
 80032c4:	e7cf      	b.n	8003266 <_printf_i+0x52>
 80032c6:	6813      	ldr	r3, [r2, #0]
 80032c8:	6825      	ldr	r5, [r4, #0]
 80032ca:	1d18      	adds	r0, r3, #4
 80032cc:	6010      	str	r0, [r2, #0]
 80032ce:	0628      	lsls	r0, r5, #24
 80032d0:	d501      	bpl.n	80032d6 <_printf_i+0xc2>
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	e002      	b.n	80032dc <_printf_i+0xc8>
 80032d6:	0668      	lsls	r0, r5, #25
 80032d8:	d5fb      	bpl.n	80032d2 <_printf_i+0xbe>
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	4854      	ldr	r0, [pc, #336]	; (8003430 <_printf_i+0x21c>)
 80032de:	296f      	cmp	r1, #111	; 0x6f
 80032e0:	bf14      	ite	ne
 80032e2:	220a      	movne	r2, #10
 80032e4:	2208      	moveq	r2, #8
 80032e6:	2100      	movs	r1, #0
 80032e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ec:	6865      	ldr	r5, [r4, #4]
 80032ee:	60a5      	str	r5, [r4, #8]
 80032f0:	2d00      	cmp	r5, #0
 80032f2:	f2c0 8095 	blt.w	8003420 <_printf_i+0x20c>
 80032f6:	6821      	ldr	r1, [r4, #0]
 80032f8:	f021 0104 	bic.w	r1, r1, #4
 80032fc:	6021      	str	r1, [r4, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d13d      	bne.n	800337e <_printf_i+0x16a>
 8003302:	2d00      	cmp	r5, #0
 8003304:	f040 808e 	bne.w	8003424 <_printf_i+0x210>
 8003308:	4665      	mov	r5, ip
 800330a:	2a08      	cmp	r2, #8
 800330c:	d10b      	bne.n	8003326 <_printf_i+0x112>
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	07db      	lsls	r3, r3, #31
 8003312:	d508      	bpl.n	8003326 <_printf_i+0x112>
 8003314:	6923      	ldr	r3, [r4, #16]
 8003316:	6862      	ldr	r2, [r4, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	bfde      	ittt	le
 800331c:	2330      	movle	r3, #48	; 0x30
 800331e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003322:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003326:	ebac 0305 	sub.w	r3, ip, r5
 800332a:	6123      	str	r3, [r4, #16]
 800332c:	f8cd 8000 	str.w	r8, [sp]
 8003330:	463b      	mov	r3, r7
 8003332:	aa03      	add	r2, sp, #12
 8003334:	4621      	mov	r1, r4
 8003336:	4630      	mov	r0, r6
 8003338:	f7ff fef6 	bl	8003128 <_printf_common>
 800333c:	3001      	adds	r0, #1
 800333e:	d14d      	bne.n	80033dc <_printf_i+0x1c8>
 8003340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003344:	b005      	add	sp, #20
 8003346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800334a:	4839      	ldr	r0, [pc, #228]	; (8003430 <_printf_i+0x21c>)
 800334c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	6821      	ldr	r1, [r4, #0]
 8003354:	1d1d      	adds	r5, r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6015      	str	r5, [r2, #0]
 800335a:	060a      	lsls	r2, r1, #24
 800335c:	d50b      	bpl.n	8003376 <_printf_i+0x162>
 800335e:	07ca      	lsls	r2, r1, #31
 8003360:	bf44      	itt	mi
 8003362:	f041 0120 	orrmi.w	r1, r1, #32
 8003366:	6021      	strmi	r1, [r4, #0]
 8003368:	b91b      	cbnz	r3, 8003372 <_printf_i+0x15e>
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	f022 0220 	bic.w	r2, r2, #32
 8003370:	6022      	str	r2, [r4, #0]
 8003372:	2210      	movs	r2, #16
 8003374:	e7b7      	b.n	80032e6 <_printf_i+0xd2>
 8003376:	064d      	lsls	r5, r1, #25
 8003378:	bf48      	it	mi
 800337a:	b29b      	uxthmi	r3, r3
 800337c:	e7ef      	b.n	800335e <_printf_i+0x14a>
 800337e:	4665      	mov	r5, ip
 8003380:	fbb3 f1f2 	udiv	r1, r3, r2
 8003384:	fb02 3311 	mls	r3, r2, r1, r3
 8003388:	5cc3      	ldrb	r3, [r0, r3]
 800338a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800338e:	460b      	mov	r3, r1
 8003390:	2900      	cmp	r1, #0
 8003392:	d1f5      	bne.n	8003380 <_printf_i+0x16c>
 8003394:	e7b9      	b.n	800330a <_printf_i+0xf6>
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	6825      	ldr	r5, [r4, #0]
 800339a:	6961      	ldr	r1, [r4, #20]
 800339c:	1d18      	adds	r0, r3, #4
 800339e:	6010      	str	r0, [r2, #0]
 80033a0:	0628      	lsls	r0, r5, #24
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	d501      	bpl.n	80033aa <_printf_i+0x196>
 80033a6:	6019      	str	r1, [r3, #0]
 80033a8:	e002      	b.n	80033b0 <_printf_i+0x19c>
 80033aa:	066a      	lsls	r2, r5, #25
 80033ac:	d5fb      	bpl.n	80033a6 <_printf_i+0x192>
 80033ae:	8019      	strh	r1, [r3, #0]
 80033b0:	2300      	movs	r3, #0
 80033b2:	6123      	str	r3, [r4, #16]
 80033b4:	4665      	mov	r5, ip
 80033b6:	e7b9      	b.n	800332c <_printf_i+0x118>
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	1d19      	adds	r1, r3, #4
 80033bc:	6011      	str	r1, [r2, #0]
 80033be:	681d      	ldr	r5, [r3, #0]
 80033c0:	6862      	ldr	r2, [r4, #4]
 80033c2:	2100      	movs	r1, #0
 80033c4:	4628      	mov	r0, r5
 80033c6:	f7fc ff23 	bl	8000210 <memchr>
 80033ca:	b108      	cbz	r0, 80033d0 <_printf_i+0x1bc>
 80033cc:	1b40      	subs	r0, r0, r5
 80033ce:	6060      	str	r0, [r4, #4]
 80033d0:	6863      	ldr	r3, [r4, #4]
 80033d2:	6123      	str	r3, [r4, #16]
 80033d4:	2300      	movs	r3, #0
 80033d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033da:	e7a7      	b.n	800332c <_printf_i+0x118>
 80033dc:	6923      	ldr	r3, [r4, #16]
 80033de:	462a      	mov	r2, r5
 80033e0:	4639      	mov	r1, r7
 80033e2:	4630      	mov	r0, r6
 80033e4:	47c0      	blx	r8
 80033e6:	3001      	adds	r0, #1
 80033e8:	d0aa      	beq.n	8003340 <_printf_i+0x12c>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	079b      	lsls	r3, r3, #30
 80033ee:	d413      	bmi.n	8003418 <_printf_i+0x204>
 80033f0:	68e0      	ldr	r0, [r4, #12]
 80033f2:	9b03      	ldr	r3, [sp, #12]
 80033f4:	4298      	cmp	r0, r3
 80033f6:	bfb8      	it	lt
 80033f8:	4618      	movlt	r0, r3
 80033fa:	e7a3      	b.n	8003344 <_printf_i+0x130>
 80033fc:	2301      	movs	r3, #1
 80033fe:	464a      	mov	r2, r9
 8003400:	4639      	mov	r1, r7
 8003402:	4630      	mov	r0, r6
 8003404:	47c0      	blx	r8
 8003406:	3001      	adds	r0, #1
 8003408:	d09a      	beq.n	8003340 <_printf_i+0x12c>
 800340a:	3501      	adds	r5, #1
 800340c:	68e3      	ldr	r3, [r4, #12]
 800340e:	9a03      	ldr	r2, [sp, #12]
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	42ab      	cmp	r3, r5
 8003414:	dcf2      	bgt.n	80033fc <_printf_i+0x1e8>
 8003416:	e7eb      	b.n	80033f0 <_printf_i+0x1dc>
 8003418:	2500      	movs	r5, #0
 800341a:	f104 0919 	add.w	r9, r4, #25
 800341e:	e7f5      	b.n	800340c <_printf_i+0x1f8>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ac      	bne.n	800337e <_printf_i+0x16a>
 8003424:	7803      	ldrb	r3, [r0, #0]
 8003426:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800342a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800342e:	e76c      	b.n	800330a <_printf_i+0xf6>
 8003430:	080036d1 	.word	0x080036d1
 8003434:	080036e2 	.word	0x080036e2

08003438 <memmove>:
 8003438:	4288      	cmp	r0, r1
 800343a:	b510      	push	{r4, lr}
 800343c:	eb01 0302 	add.w	r3, r1, r2
 8003440:	d807      	bhi.n	8003452 <memmove+0x1a>
 8003442:	1e42      	subs	r2, r0, #1
 8003444:	4299      	cmp	r1, r3
 8003446:	d00a      	beq.n	800345e <memmove+0x26>
 8003448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003450:	e7f8      	b.n	8003444 <memmove+0xc>
 8003452:	4283      	cmp	r3, r0
 8003454:	d9f5      	bls.n	8003442 <memmove+0xa>
 8003456:	1881      	adds	r1, r0, r2
 8003458:	1ad2      	subs	r2, r2, r3
 800345a:	42d3      	cmn	r3, r2
 800345c:	d100      	bne.n	8003460 <memmove+0x28>
 800345e:	bd10      	pop	{r4, pc}
 8003460:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003464:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003468:	e7f7      	b.n	800345a <memmove+0x22>
	...

0800346c <_free_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4605      	mov	r5, r0
 8003470:	2900      	cmp	r1, #0
 8003472:	d045      	beq.n	8003500 <_free_r+0x94>
 8003474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003478:	1f0c      	subs	r4, r1, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	bfb8      	it	lt
 800347e:	18e4      	addlt	r4, r4, r3
 8003480:	f000 f8d2 	bl	8003628 <__malloc_lock>
 8003484:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <_free_r+0x98>)
 8003486:	6813      	ldr	r3, [r2, #0]
 8003488:	4610      	mov	r0, r2
 800348a:	b933      	cbnz	r3, 800349a <_free_r+0x2e>
 800348c:	6063      	str	r3, [r4, #4]
 800348e:	6014      	str	r4, [r2, #0]
 8003490:	4628      	mov	r0, r5
 8003492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003496:	f000 b8c8 	b.w	800362a <__malloc_unlock>
 800349a:	42a3      	cmp	r3, r4
 800349c:	d90c      	bls.n	80034b8 <_free_r+0x4c>
 800349e:	6821      	ldr	r1, [r4, #0]
 80034a0:	1862      	adds	r2, r4, r1
 80034a2:	4293      	cmp	r3, r2
 80034a4:	bf04      	itt	eq
 80034a6:	681a      	ldreq	r2, [r3, #0]
 80034a8:	685b      	ldreq	r3, [r3, #4]
 80034aa:	6063      	str	r3, [r4, #4]
 80034ac:	bf04      	itt	eq
 80034ae:	1852      	addeq	r2, r2, r1
 80034b0:	6022      	streq	r2, [r4, #0]
 80034b2:	6004      	str	r4, [r0, #0]
 80034b4:	e7ec      	b.n	8003490 <_free_r+0x24>
 80034b6:	4613      	mov	r3, r2
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	b10a      	cbz	r2, 80034c0 <_free_r+0x54>
 80034bc:	42a2      	cmp	r2, r4
 80034be:	d9fa      	bls.n	80034b6 <_free_r+0x4a>
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	1858      	adds	r0, r3, r1
 80034c4:	42a0      	cmp	r0, r4
 80034c6:	d10b      	bne.n	80034e0 <_free_r+0x74>
 80034c8:	6820      	ldr	r0, [r4, #0]
 80034ca:	4401      	add	r1, r0
 80034cc:	1858      	adds	r0, r3, r1
 80034ce:	4282      	cmp	r2, r0
 80034d0:	6019      	str	r1, [r3, #0]
 80034d2:	d1dd      	bne.n	8003490 <_free_r+0x24>
 80034d4:	6810      	ldr	r0, [r2, #0]
 80034d6:	6852      	ldr	r2, [r2, #4]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	4401      	add	r1, r0
 80034dc:	6019      	str	r1, [r3, #0]
 80034de:	e7d7      	b.n	8003490 <_free_r+0x24>
 80034e0:	d902      	bls.n	80034e8 <_free_r+0x7c>
 80034e2:	230c      	movs	r3, #12
 80034e4:	602b      	str	r3, [r5, #0]
 80034e6:	e7d3      	b.n	8003490 <_free_r+0x24>
 80034e8:	6820      	ldr	r0, [r4, #0]
 80034ea:	1821      	adds	r1, r4, r0
 80034ec:	428a      	cmp	r2, r1
 80034ee:	bf04      	itt	eq
 80034f0:	6811      	ldreq	r1, [r2, #0]
 80034f2:	6852      	ldreq	r2, [r2, #4]
 80034f4:	6062      	str	r2, [r4, #4]
 80034f6:	bf04      	itt	eq
 80034f8:	1809      	addeq	r1, r1, r0
 80034fa:	6021      	streq	r1, [r4, #0]
 80034fc:	605c      	str	r4, [r3, #4]
 80034fe:	e7c7      	b.n	8003490 <_free_r+0x24>
 8003500:	bd38      	pop	{r3, r4, r5, pc}
 8003502:	bf00      	nop
 8003504:	20008438 	.word	0x20008438

08003508 <_malloc_r>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	1ccd      	adds	r5, r1, #3
 800350c:	f025 0503 	bic.w	r5, r5, #3
 8003510:	3508      	adds	r5, #8
 8003512:	2d0c      	cmp	r5, #12
 8003514:	bf38      	it	cc
 8003516:	250c      	movcc	r5, #12
 8003518:	2d00      	cmp	r5, #0
 800351a:	4606      	mov	r6, r0
 800351c:	db01      	blt.n	8003522 <_malloc_r+0x1a>
 800351e:	42a9      	cmp	r1, r5
 8003520:	d903      	bls.n	800352a <_malloc_r+0x22>
 8003522:	230c      	movs	r3, #12
 8003524:	6033      	str	r3, [r6, #0]
 8003526:	2000      	movs	r0, #0
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	f000 f87d 	bl	8003628 <__malloc_lock>
 800352e:	4a21      	ldr	r2, [pc, #132]	; (80035b4 <_malloc_r+0xac>)
 8003530:	6814      	ldr	r4, [r2, #0]
 8003532:	4621      	mov	r1, r4
 8003534:	b991      	cbnz	r1, 800355c <_malloc_r+0x54>
 8003536:	4c20      	ldr	r4, [pc, #128]	; (80035b8 <_malloc_r+0xb0>)
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	b91b      	cbnz	r3, 8003544 <_malloc_r+0x3c>
 800353c:	4630      	mov	r0, r6
 800353e:	f000 f863 	bl	8003608 <_sbrk_r>
 8003542:	6020      	str	r0, [r4, #0]
 8003544:	4629      	mov	r1, r5
 8003546:	4630      	mov	r0, r6
 8003548:	f000 f85e 	bl	8003608 <_sbrk_r>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d124      	bne.n	800359a <_malloc_r+0x92>
 8003550:	230c      	movs	r3, #12
 8003552:	6033      	str	r3, [r6, #0]
 8003554:	4630      	mov	r0, r6
 8003556:	f000 f868 	bl	800362a <__malloc_unlock>
 800355a:	e7e4      	b.n	8003526 <_malloc_r+0x1e>
 800355c:	680b      	ldr	r3, [r1, #0]
 800355e:	1b5b      	subs	r3, r3, r5
 8003560:	d418      	bmi.n	8003594 <_malloc_r+0x8c>
 8003562:	2b0b      	cmp	r3, #11
 8003564:	d90f      	bls.n	8003586 <_malloc_r+0x7e>
 8003566:	600b      	str	r3, [r1, #0]
 8003568:	50cd      	str	r5, [r1, r3]
 800356a:	18cc      	adds	r4, r1, r3
 800356c:	4630      	mov	r0, r6
 800356e:	f000 f85c 	bl	800362a <__malloc_unlock>
 8003572:	f104 000b 	add.w	r0, r4, #11
 8003576:	1d23      	adds	r3, r4, #4
 8003578:	f020 0007 	bic.w	r0, r0, #7
 800357c:	1ac3      	subs	r3, r0, r3
 800357e:	d0d3      	beq.n	8003528 <_malloc_r+0x20>
 8003580:	425a      	negs	r2, r3
 8003582:	50e2      	str	r2, [r4, r3]
 8003584:	e7d0      	b.n	8003528 <_malloc_r+0x20>
 8003586:	428c      	cmp	r4, r1
 8003588:	684b      	ldr	r3, [r1, #4]
 800358a:	bf16      	itet	ne
 800358c:	6063      	strne	r3, [r4, #4]
 800358e:	6013      	streq	r3, [r2, #0]
 8003590:	460c      	movne	r4, r1
 8003592:	e7eb      	b.n	800356c <_malloc_r+0x64>
 8003594:	460c      	mov	r4, r1
 8003596:	6849      	ldr	r1, [r1, #4]
 8003598:	e7cc      	b.n	8003534 <_malloc_r+0x2c>
 800359a:	1cc4      	adds	r4, r0, #3
 800359c:	f024 0403 	bic.w	r4, r4, #3
 80035a0:	42a0      	cmp	r0, r4
 80035a2:	d005      	beq.n	80035b0 <_malloc_r+0xa8>
 80035a4:	1a21      	subs	r1, r4, r0
 80035a6:	4630      	mov	r0, r6
 80035a8:	f000 f82e 	bl	8003608 <_sbrk_r>
 80035ac:	3001      	adds	r0, #1
 80035ae:	d0cf      	beq.n	8003550 <_malloc_r+0x48>
 80035b0:	6025      	str	r5, [r4, #0]
 80035b2:	e7db      	b.n	800356c <_malloc_r+0x64>
 80035b4:	20008438 	.word	0x20008438
 80035b8:	2000843c 	.word	0x2000843c

080035bc <_realloc_r>:
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035be:	4607      	mov	r7, r0
 80035c0:	4614      	mov	r4, r2
 80035c2:	460e      	mov	r6, r1
 80035c4:	b921      	cbnz	r1, 80035d0 <_realloc_r+0x14>
 80035c6:	4611      	mov	r1, r2
 80035c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035cc:	f7ff bf9c 	b.w	8003508 <_malloc_r>
 80035d0:	b922      	cbnz	r2, 80035dc <_realloc_r+0x20>
 80035d2:	f7ff ff4b 	bl	800346c <_free_r>
 80035d6:	4625      	mov	r5, r4
 80035d8:	4628      	mov	r0, r5
 80035da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035dc:	f000 f826 	bl	800362c <_malloc_usable_size_r>
 80035e0:	42a0      	cmp	r0, r4
 80035e2:	d20f      	bcs.n	8003604 <_realloc_r+0x48>
 80035e4:	4621      	mov	r1, r4
 80035e6:	4638      	mov	r0, r7
 80035e8:	f7ff ff8e 	bl	8003508 <_malloc_r>
 80035ec:	4605      	mov	r5, r0
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d0f2      	beq.n	80035d8 <_realloc_r+0x1c>
 80035f2:	4631      	mov	r1, r6
 80035f4:	4622      	mov	r2, r4
 80035f6:	f7ff fc11 	bl	8002e1c <memcpy>
 80035fa:	4631      	mov	r1, r6
 80035fc:	4638      	mov	r0, r7
 80035fe:	f7ff ff35 	bl	800346c <_free_r>
 8003602:	e7e9      	b.n	80035d8 <_realloc_r+0x1c>
 8003604:	4635      	mov	r5, r6
 8003606:	e7e7      	b.n	80035d8 <_realloc_r+0x1c>

08003608 <_sbrk_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4c06      	ldr	r4, [pc, #24]	; (8003624 <_sbrk_r+0x1c>)
 800360c:	2300      	movs	r3, #0
 800360e:	4605      	mov	r5, r0
 8003610:	4608      	mov	r0, r1
 8003612:	6023      	str	r3, [r4, #0]
 8003614:	f7ff fae2 	bl	8002bdc <_sbrk>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_sbrk_r+0x1a>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	b103      	cbz	r3, 8003622 <_sbrk_r+0x1a>
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	200084c4 	.word	0x200084c4

08003628 <__malloc_lock>:
 8003628:	4770      	bx	lr

0800362a <__malloc_unlock>:
 800362a:	4770      	bx	lr

0800362c <_malloc_usable_size_r>:
 800362c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003630:	1f18      	subs	r0, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	bfbc      	itt	lt
 8003636:	580b      	ldrlt	r3, [r1, r0]
 8003638:	18c0      	addlt	r0, r0, r3
 800363a:	4770      	bx	lr

0800363c <_init>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	bf00      	nop
 8003640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003642:	bc08      	pop	{r3}
 8003644:	469e      	mov	lr, r3
 8003646:	4770      	bx	lr

08003648 <_fini>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr
