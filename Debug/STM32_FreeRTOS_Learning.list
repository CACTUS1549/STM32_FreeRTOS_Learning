
STM32_FreeRTOS_Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003804  08003804  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800380c  0800380c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000006c  08003880  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003880  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010229  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000278e  00000000  00000000  000302c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00032a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00033968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0a1  00000000  00000000  00034720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d181  00000000  00000000  0005e7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd573  00000000  00000000  0006b942  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168eb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000403c  00000000  00000000  00168f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08003790 	.word	0x08003790

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000070 	.word	0x20000070
 80001fc:	08003790 	.word	0x08003790

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_Init+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <HAL_Init+0x40>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x40>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <HAL_Init+0x40>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_Init+0x40>)
 80005d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f8e6 	bl	80007aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	2000      	movs	r0, #0
 80005e0:	f002 fb28 	bl	8002c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f002 fafe 	bl	8002be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000148 	.word	0x20000148

0800060c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000614:	f7ff ffee 	bl	80005f4 <HAL_GetTick>
 8000618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000624:	d005      	beq.n	8000632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_Delay+0x40>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000632:	bf00      	nop
 8000634:	f7ff ffde 	bl	80005f4 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8f7      	bhi.n	8000634 <HAL_Delay+0x28>
  {
  }
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000000 	.word	0x20000000

08000650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f003 0307 	and.w	r3, r3, #7
 800065e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <__NVIC_SetPriorityGrouping+0x44>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800066c:	4013      	ands	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800067c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000682:	4a04      	ldr	r2, [pc, #16]	; (8000694 <__NVIC_SetPriorityGrouping+0x44>)
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	60d3      	str	r3, [r2, #12]
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <__NVIC_GetPriorityGrouping+0x18>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	0a1b      	lsrs	r3, r3, #8
 80006a2:	f003 0307 	and.w	r3, r3, #7
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	db0b      	blt.n	80006de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f003 021f 	and.w	r2, r3, #31
 80006cc:	4907      	ldr	r1, [pc, #28]	; (80006ec <__NVIC_EnableIRQ+0x38>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	095b      	lsrs	r3, r3, #5
 80006d4:	2001      	movs	r0, #1
 80006d6:	fa00 f202 	lsl.w	r2, r0, r2
 80006da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db0a      	blt.n	800071a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	490c      	ldr	r1, [pc, #48]	; (800073c <__NVIC_SetPriority+0x4c>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	0112      	lsls	r2, r2, #4
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	440b      	add	r3, r1
 8000714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000718:	e00a      	b.n	8000730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4908      	ldr	r1, [pc, #32]	; (8000740 <__NVIC_SetPriority+0x50>)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	3b04      	subs	r3, #4
 8000728:	0112      	lsls	r2, r2, #4
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	440b      	add	r3, r1
 800072e:	761a      	strb	r2, [r3, #24]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	43da      	mvns	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	401a      	ands	r2, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	43d9      	mvns	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	4313      	orrs	r3, r2
         );
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3724      	adds	r7, #36	; 0x24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff ff4c 	bl	8000650 <__NVIC_SetPriorityGrouping>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d2:	f7ff ff61 	bl	8000698 <__NVIC_GetPriorityGrouping>
 80007d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	6978      	ldr	r0, [r7, #20]
 80007de:	f7ff ffb1 	bl	8000744 <NVIC_EncodePriority>
 80007e2:	4602      	mov	r2, r0
 80007e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff80 	bl	80006f0 <__NVIC_SetPriority>
}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff54 	bl	80006b4 <__NVIC_EnableIRQ>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e177      	b.n	8000b20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 8166 	bne.w	8000b1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0x4a>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d123      	bne.n	80008a6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	220f      	movs	r2, #15
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4013      	ands	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	691a      	ldr	r2, [r3, #16]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	69b9      	ldr	r1, [r7, #24]
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2203      	movs	r2, #3
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4013      	ands	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0203 	and.w	r2, r3, #3
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d00b      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d007      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	2b11      	cmp	r3, #17
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d130      	bne.n	800095c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2203      	movs	r2, #3
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80c0 	beq.w	8000b1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b65      	ldr	r3, [pc, #404]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a64      	ldr	r2, [pc, #400]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a60      	ldr	r2, [pc, #384]	; (8000b38 <HAL_GPIO_Init+0x324>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a57      	ldr	r2, [pc, #348]	; (8000b3c <HAL_GPIO_Init+0x328>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d037      	beq.n	8000a52 <HAL_GPIO_Init+0x23e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a56      	ldr	r2, [pc, #344]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d031      	beq.n	8000a4e <HAL_GPIO_Init+0x23a>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a55      	ldr	r2, [pc, #340]	; (8000b44 <HAL_GPIO_Init+0x330>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d02b      	beq.n	8000a4a <HAL_GPIO_Init+0x236>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a54      	ldr	r2, [pc, #336]	; (8000b48 <HAL_GPIO_Init+0x334>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d025      	beq.n	8000a46 <HAL_GPIO_Init+0x232>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a53      	ldr	r2, [pc, #332]	; (8000b4c <HAL_GPIO_Init+0x338>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d01f      	beq.n	8000a42 <HAL_GPIO_Init+0x22e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a52      	ldr	r2, [pc, #328]	; (8000b50 <HAL_GPIO_Init+0x33c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d019      	beq.n	8000a3e <HAL_GPIO_Init+0x22a>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a51      	ldr	r2, [pc, #324]	; (8000b54 <HAL_GPIO_Init+0x340>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d013      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a50      	ldr	r2, [pc, #320]	; (8000b58 <HAL_GPIO_Init+0x344>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00d      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4f      	ldr	r2, [pc, #316]	; (8000b5c <HAL_GPIO_Init+0x348>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d007      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4e      	ldr	r2, [pc, #312]	; (8000b60 <HAL_GPIO_Init+0x34c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_GPIO_Init+0x21a>
 8000a2a:	2309      	movs	r3, #9
 8000a2c:	e012      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a2e:	230a      	movs	r3, #10
 8000a30:	e010      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a32:	2308      	movs	r3, #8
 8000a34:	e00e      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a36:	2307      	movs	r3, #7
 8000a38:	e00c      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	e00a      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a3e:	2305      	movs	r3, #5
 8000a40:	e008      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a42:	2304      	movs	r3, #4
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e004      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e002      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a52:	2300      	movs	r3, #0
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	f002 0203 	and.w	r2, r2, #3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4093      	lsls	r3, r2
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a64:	4934      	ldr	r1, [pc, #208]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a96:	4a33      	ldr	r2, [pc, #204]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a9c:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ac0:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	f67f ae84 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3724      	adds	r7, #36	; 0x24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40021400 	.word	0x40021400
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40021c00 	.word	0x40021c00
 8000b5c:	40022000 	.word	0x40022000
 8000b60:	40022400 	.word	0x40022400
 8000b64:	40013c00 	.word	0x40013c00

08000b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b78:	787b      	ldrb	r3, [r7, #1]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b84:	e003      	b.n	8000b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	041a      	lsls	r2, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	619a      	str	r2, [r3, #24]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_PWREx_EnableOverDrive+0x94>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bc8:	f7ff fd14 	bl	80005f4 <HAL_GetTick>
 8000bcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bce:	e009      	b.n	8000be4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bd0:	f7ff fd10 	bl	80005f4 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bde:	d901      	bls.n	8000be4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e01f      	b.n	8000c24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d1ee      	bne.n	8000bd0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bf8:	f7ff fcfc 	bl	80005f4 <HAL_GetTick>
 8000bfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bfe:	e009      	b.n	8000c14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c00:	f7ff fcf8 	bl	80005f4 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c0e:	d901      	bls.n	8000c14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e007      	b.n	8000c24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c20:	d1ee      	bne.n	8000c00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	420e0040 	.word	0x420e0040
 8000c34:	40007000 	.word	0x40007000
 8000c38:	420e0044 	.word	0x420e0044

08000c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e0ca      	b.n	8000de6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c50:	4b67      	ldr	r3, [pc, #412]	; (8000df0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d90c      	bls.n	8000c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c5e:	4b64      	ldr	r3, [pc, #400]	; (8000df0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c66:	4b62      	ldr	r3, [pc, #392]	; (8000df0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d001      	beq.n	8000c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e0b6      	b.n	8000de6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d020      	beq.n	8000cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d005      	beq.n	8000c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c90:	4b58      	ldr	r3, [pc, #352]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	4a57      	ldr	r2, [pc, #348]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d005      	beq.n	8000cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ca8:	4b52      	ldr	r3, [pc, #328]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	4a51      	ldr	r2, [pc, #324]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cb4:	4b4f      	ldr	r3, [pc, #316]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	494c      	ldr	r1, [pc, #304]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d044      	beq.n	8000d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d107      	bne.n	8000cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cda:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d119      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e07d      	b.n	8000de6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d003      	beq.n	8000cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d107      	bne.n	8000d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d109      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e06d      	b.n	8000de6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e065      	b.n	8000de6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f023 0203 	bic.w	r2, r3, #3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4933      	ldr	r1, [pc, #204]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d2c:	f7ff fc62 	bl	80005f4 <HAL_GetTick>
 8000d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d32:	e00a      	b.n	8000d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d34:	f7ff fc5e 	bl	80005f4 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e04d      	b.n	8000de6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 020c 	and.w	r2, r3, #12
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d1eb      	bne.n	8000d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <HAL_RCC_ClockConfig+0x1b4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d20c      	bcs.n	8000d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <HAL_RCC_ClockConfig+0x1b4>)
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <HAL_RCC_ClockConfig+0x1b4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d001      	beq.n	8000d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e030      	b.n	8000de6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	4915      	ldr	r1, [pc, #84]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d009      	beq.n	8000dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	490d      	ldr	r1, [pc, #52]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dc2:	f000 f81d 	bl	8000e00 <HAL_RCC_GetSysClockFreq>
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_RCC_ClockConfig+0x1bc>)
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_RCC_ClockConfig+0x1c0>)
 8000ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f001 ff28 	bl	8002c34 <HAL_InitTick>

  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00
 8000df4:	40023800 	.word	0x40023800
 8000df8:	080037b8 	.word	0x080037b8
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e16:	4b63      	ldr	r3, [pc, #396]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d007      	beq.n	8000e32 <HAL_RCC_GetSysClockFreq+0x32>
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d008      	beq.n	8000e38 <HAL_RCC_GetSysClockFreq+0x38>
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f040 80b4 	bne.w	8000f94 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e2c:	4b5e      	ldr	r3, [pc, #376]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8000e2e:	60bb      	str	r3, [r7, #8]
       break;
 8000e30:	e0b3      	b.n	8000f9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e32:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8000e34:	60bb      	str	r3, [r7, #8]
      break;
 8000e36:	e0b0      	b.n	8000f9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e38:	4b5a      	ldr	r3, [pc, #360]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e42:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d04a      	beq.n	8000ee4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e4e:	4b55      	ldr	r3, [pc, #340]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	099b      	lsrs	r3, r3, #6
 8000e54:	f04f 0400 	mov.w	r4, #0
 8000e58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	ea03 0501 	and.w	r5, r3, r1
 8000e64:	ea04 0602 	and.w	r6, r4, r2
 8000e68:	4629      	mov	r1, r5
 8000e6a:	4632      	mov	r2, r6
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	f04f 0400 	mov.w	r4, #0
 8000e74:	0154      	lsls	r4, r2, #5
 8000e76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e7a:	014b      	lsls	r3, r1, #5
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4622      	mov	r2, r4
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	eb62 0206 	sbc.w	r2, r2, r6
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	f04f 0400 	mov.w	r4, #0
 8000e8e:	0194      	lsls	r4, r2, #6
 8000e90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000e94:	018b      	lsls	r3, r1, #6
 8000e96:	1a5b      	subs	r3, r3, r1
 8000e98:	eb64 0402 	sbc.w	r4, r4, r2
 8000e9c:	f04f 0100 	mov.w	r1, #0
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	00e2      	lsls	r2, r4, #3
 8000ea6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000eaa:	00d9      	lsls	r1, r3, #3
 8000eac:	460b      	mov	r3, r1
 8000eae:	4614      	mov	r4, r2
 8000eb0:	195b      	adds	r3, r3, r5
 8000eb2:	eb44 0406 	adc.w	r4, r4, r6
 8000eb6:	f04f 0100 	mov.w	r1, #0
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	0262      	lsls	r2, r4, #9
 8000ec0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000ec4:	0259      	lsls	r1, r3, #9
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4614      	mov	r4, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	4621      	mov	r1, r4
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f04f 0400 	mov.w	r4, #0
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	f7ff f9ea 	bl	80002b0 <__aeabi_uldivmod>
 8000edc:	4603      	mov	r3, r0
 8000ede:	460c      	mov	r4, r1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	e049      	b.n	8000f78 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	099b      	lsrs	r3, r3, #6
 8000eea:	f04f 0400 	mov.w	r4, #0
 8000eee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	ea03 0501 	and.w	r5, r3, r1
 8000efa:	ea04 0602 	and.w	r6, r4, r2
 8000efe:	4629      	mov	r1, r5
 8000f00:	4632      	mov	r2, r6
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	f04f 0400 	mov.w	r4, #0
 8000f0a:	0154      	lsls	r4, r2, #5
 8000f0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	4619      	mov	r1, r3
 8000f14:	4622      	mov	r2, r4
 8000f16:	1b49      	subs	r1, r1, r5
 8000f18:	eb62 0206 	sbc.w	r2, r2, r6
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	f04f 0400 	mov.w	r4, #0
 8000f24:	0194      	lsls	r4, r2, #6
 8000f26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f2a:	018b      	lsls	r3, r1, #6
 8000f2c:	1a5b      	subs	r3, r3, r1
 8000f2e:	eb64 0402 	sbc.w	r4, r4, r2
 8000f32:	f04f 0100 	mov.w	r1, #0
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	00e2      	lsls	r2, r4, #3
 8000f3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f40:	00d9      	lsls	r1, r3, #3
 8000f42:	460b      	mov	r3, r1
 8000f44:	4614      	mov	r4, r2
 8000f46:	195b      	adds	r3, r3, r5
 8000f48:	eb44 0406 	adc.w	r4, r4, r6
 8000f4c:	f04f 0100 	mov.w	r1, #0
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	02a2      	lsls	r2, r4, #10
 8000f56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f5a:	0299      	lsls	r1, r3, #10
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4614      	mov	r4, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	4621      	mov	r1, r4
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f04f 0400 	mov.w	r4, #0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	f7ff f99f 	bl	80002b0 <__aeabi_uldivmod>
 8000f72:	4603      	mov	r3, r0
 8000f74:	460c      	mov	r4, r1
 8000f76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	3301      	adds	r3, #1
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f90:	60bb      	str	r3, [r7, #8]
      break;
 8000f92:	e002      	b.n	8000f9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8000f96:	60bb      	str	r3, [r7, #8]
      break;
 8000f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	00f42400 	.word	0x00f42400
 8000fac:	007a1200 	.word	0x007a1200

08000fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fcc:	f7ff fff0 	bl	8000fb0 <HAL_RCC_GetHCLKFreq>
 8000fd0:	4601      	mov	r1, r0
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	0a9b      	lsrs	r3, r3, #10
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fde:	5cd3      	ldrb	r3, [r2, r3]
 8000fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	080037c8 	.word	0x080037c8

08000ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ff4:	f7ff ffdc 	bl	8000fb0 <HAL_RCC_GetHCLKFreq>
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	0b5b      	lsrs	r3, r3, #13
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	4a03      	ldr	r2, [pc, #12]	; (8001014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	fa21 f303 	lsr.w	r3, r1, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	080037c8 	.word	0x080037c8

08001018 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	220f      	movs	r2, #15
 8001026:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_RCC_GetClockConfig+0x5c>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_RCC_GetClockConfig+0x5c>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_RCC_GetClockConfig+0x5c>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_RCC_GetClockConfig+0x5c>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	08db      	lsrs	r3, r3, #3
 8001052:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <HAL_RCC_GetClockConfig+0x60>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 020f 	and.w	r2, r3, #15
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d075      	beq.n	8001180 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001094:	4ba2      	ldr	r3, [pc, #648]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b04      	cmp	r3, #4
 800109e:	d00c      	beq.n	80010ba <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a0:	4b9f      	ldr	r3, [pc, #636]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d112      	bne.n	80010d2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ac:	4b9c      	ldr	r3, [pc, #624]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b8:	d10b      	bne.n	80010d2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ba:	4b99      	ldr	r3, [pc, #612]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d05b      	beq.n	800117e <HAL_RCC_OscConfig+0x102>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d157      	bne.n	800117e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e20b      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x6e>
 80010dc:	4b90      	ldr	r3, [pc, #576]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a8f      	ldr	r2, [pc, #572]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e01d      	b.n	8001126 <HAL_RCC_OscConfig+0xaa>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f2:	d10c      	bne.n	800110e <HAL_RCC_OscConfig+0x92>
 80010f4:	4b8a      	ldr	r3, [pc, #552]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a89      	ldr	r2, [pc, #548]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80010fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b87      	ldr	r3, [pc, #540]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a86      	ldr	r2, [pc, #536]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e00b      	b.n	8001126 <HAL_RCC_OscConfig+0xaa>
 800110e:	4b84      	ldr	r3, [pc, #528]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a83      	ldr	r2, [pc, #524]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b81      	ldr	r3, [pc, #516]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a80      	ldr	r2, [pc, #512]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d013      	beq.n	8001156 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fa61 	bl	80005f4 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff fa5d 	bl	80005f4 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e1d0      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001148:	4b75      	ldr	r3, [pc, #468]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0xba>
 8001154:	e014      	b.n	8001180 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001156:	f7ff fa4d 	bl	80005f4 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115e:	f7ff fa49 	bl	80005f4 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b64      	cmp	r3, #100	; 0x64
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1bc      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001170:	4b6b      	ldr	r3, [pc, #428]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0xe2>
 800117c:	e000      	b.n	8001180 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d063      	beq.n	8001254 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800118c:	4b64      	ldr	r3, [pc, #400]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00b      	beq.n	80011b0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001198:	4b61      	ldr	r3, [pc, #388]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d11c      	bne.n	80011de <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a4:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d116      	bne.n	80011de <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b0:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_OscConfig+0x14c>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e190      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b55      	ldr	r3, [pc, #340]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4952      	ldr	r1, [pc, #328]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011dc:	e03a      	b.n	8001254 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d020      	beq.n	8001228 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e6:	4b4f      	ldr	r3, [pc, #316]	; (8001324 <HAL_RCC_OscConfig+0x2a8>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff fa02 	bl	80005f4 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff f9fe 	bl	80005f4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e171      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b46      	ldr	r3, [pc, #280]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b43      	ldr	r3, [pc, #268]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	493f      	ldr	r1, [pc, #252]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
 8001226:	e015      	b.n	8001254 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001228:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <HAL_RCC_OscConfig+0x2a8>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122e:	f7ff f9e1 	bl	80005f4 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff f9dd 	bl	80005f4 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e150      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001248:	4b35      	ldr	r3, [pc, #212]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d030      	beq.n	80012c2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d016      	beq.n	8001296 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001268:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126e:	f7ff f9c1 	bl	80005f4 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001276:	f7ff f9bd 	bl	80005f4 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e130      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 800128a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x1fa>
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff f9aa 	bl	80005f4 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff f9a6 	bl	80005f4 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e119      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80012b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 809f 	beq.w	800140e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10f      	bne.n	8001300 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_OscConfig+0x2a4>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012fc:	2301      	movs	r3, #1
 80012fe:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_RCC_OscConfig+0x2b0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d120      	bne.n	800134e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <HAL_RCC_OscConfig+0x2b0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_RCC_OscConfig+0x2b0>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001318:	f7ff f96c 	bl	80005f4 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	e010      	b.n	8001342 <HAL_RCC_OscConfig+0x2c6>
 8001320:	40023800 	.word	0x40023800
 8001324:	42470000 	.word	0x42470000
 8001328:	42470e80 	.word	0x42470e80
 800132c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001330:	f7ff f960 	bl	80005f4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e0d3      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001342:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <HAL_RCC_OscConfig+0x478>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x2e8>
 8001356:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135a:	4a67      	ldr	r2, [pc, #412]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6713      	str	r3, [r2, #112]	; 0x70
 8001362:	e01c      	b.n	800139e <HAL_RCC_OscConfig+0x322>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b05      	cmp	r3, #5
 800136a:	d10c      	bne.n	8001386 <HAL_RCC_OscConfig+0x30a>
 800136c:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	4a61      	ldr	r2, [pc, #388]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	6713      	str	r3, [r2, #112]	; 0x70
 8001378:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a5e      	ldr	r2, [pc, #376]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
 8001384:	e00b      	b.n	800139e <HAL_RCC_OscConfig+0x322>
 8001386:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138a:	4a5b      	ldr	r2, [pc, #364]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	6713      	str	r3, [r2, #112]	; 0x70
 8001392:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001396:	4a58      	ldr	r2, [pc, #352]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001398:	f023 0304 	bic.w	r3, r3, #4
 800139c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d015      	beq.n	80013d2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a6:	f7ff f925 	bl	80005f4 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ae:	f7ff f921 	bl	80005f4 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013bc:	4293      	cmp	r3, r2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e092      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0ee      	beq.n	80013ae <HAL_RCC_OscConfig+0x332>
 80013d0:	e014      	b.n	80013fc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d2:	f7ff f90f 	bl	80005f4 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	e00a      	b.n	80013f0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff f90b 	bl	80005f4 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e07c      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f0:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1ee      	bne.n	80013da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013fc:	7dfb      	ldrb	r3, [r7, #23]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d105      	bne.n	800140e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a3c      	ldr	r2, [pc, #240]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d068      	beq.n	80014e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001416:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d060      	beq.n	80014e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d145      	bne.n	80014b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142a:	4b34      	ldr	r3, [pc, #208]	; (80014fc <HAL_RCC_OscConfig+0x480>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff f8e0 	bl	80005f4 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff f8dc 	bl	80005f4 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e04f      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	019b      	lsls	r3, r3, #6
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	3b01      	subs	r3, #1
 8001470:	041b      	lsls	r3, r3, #16
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	061b      	lsls	r3, r3, #24
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	071b      	lsls	r3, r3, #28
 8001482:	491d      	ldr	r1, [pc, #116]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_RCC_OscConfig+0x480>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff f8b1 	bl	80005f4 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff f8ad 	bl	80005f4 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e020      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x41a>
 80014b4:	e018      	b.n	80014e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_OscConfig+0x480>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff f89a 	bl	80005f4 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff f896 	bl	80005f4 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e009      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x448>
 80014e2:	e001      	b.n	80014e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40007000 	.word	0x40007000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	42470060 	.word	0x42470060

08001500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e01d      	b.n	800154e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f001 fc64 	bl	8002df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3304      	adds	r3, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f000 f968 	bl	8001814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0201 	orr.w	r2, r2, #1
 800156c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b06      	cmp	r3, #6
 800157e:	d007      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d122      	bne.n	80015fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d11b      	bne.n	80015fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f06f 0202 	mvn.w	r2, #2
 80015ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f8f8 	bl	80017d6 <HAL_TIM_IC_CaptureCallback>
 80015e6:	e005      	b.n	80015f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f8ea 	bl	80017c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8fb 	bl	80017ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b04      	cmp	r3, #4
 8001606:	d122      	bne.n	800164e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b04      	cmp	r3, #4
 8001614:	d11b      	bne.n	800164e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f06f 0204 	mvn.w	r2, #4
 800161e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f8ce 	bl	80017d6 <HAL_TIM_IC_CaptureCallback>
 800163a:	e005      	b.n	8001648 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f8c0 	bl	80017c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f8d1 	bl	80017ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b08      	cmp	r3, #8
 800165a:	d122      	bne.n	80016a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b08      	cmp	r3, #8
 8001668:	d11b      	bne.n	80016a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f06f 0208 	mvn.w	r2, #8
 8001672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2204      	movs	r2, #4
 8001678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f8a4 	bl	80017d6 <HAL_TIM_IC_CaptureCallback>
 800168e:	e005      	b.n	800169c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f896 	bl	80017c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f8a7 	bl	80017ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d122      	bne.n	80016f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d11b      	bne.n	80016f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f06f 0210 	mvn.w	r2, #16
 80016c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2208      	movs	r2, #8
 80016cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f87a 	bl	80017d6 <HAL_TIM_IC_CaptureCallback>
 80016e2:	e005      	b.n	80016f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f86c 	bl	80017c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f87d 	bl	80017ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10e      	bne.n	8001722 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d107      	bne.n	8001722 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f06f 0201 	mvn.w	r2, #1
 800171a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f846 	bl	80017ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172c:	2b80      	cmp	r3, #128	; 0x80
 800172e:	d10e      	bne.n	800174e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	2b80      	cmp	r3, #128	; 0x80
 800173c:	d107      	bne.n	800174e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f90d 	bl	8001968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001758:	2b40      	cmp	r3, #64	; 0x40
 800175a:	d10e      	bne.n	800177a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001766:	2b40      	cmp	r3, #64	; 0x40
 8001768:	d107      	bne.n	800177a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f842 	bl	80017fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	2b20      	cmp	r3, #32
 8001786:	d10e      	bne.n	80017a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	2b20      	cmp	r3, #32
 8001794:	d107      	bne.n	80017a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f06f 0220 	mvn.w	r2, #32
 800179e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f8d7 	bl	8001954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a40      	ldr	r2, [pc, #256]	; (8001928 <TIM_Base_SetConfig+0x114>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d013      	beq.n	8001854 <TIM_Base_SetConfig+0x40>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001832:	d00f      	beq.n	8001854 <TIM_Base_SetConfig+0x40>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3d      	ldr	r2, [pc, #244]	; (800192c <TIM_Base_SetConfig+0x118>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00b      	beq.n	8001854 <TIM_Base_SetConfig+0x40>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3c      	ldr	r2, [pc, #240]	; (8001930 <TIM_Base_SetConfig+0x11c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <TIM_Base_SetConfig+0x40>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3b      	ldr	r2, [pc, #236]	; (8001934 <TIM_Base_SetConfig+0x120>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d003      	beq.n	8001854 <TIM_Base_SetConfig+0x40>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a3a      	ldr	r2, [pc, #232]	; (8001938 <TIM_Base_SetConfig+0x124>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d108      	bne.n	8001866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800185a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <TIM_Base_SetConfig+0x114>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02b      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d027      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a2c      	ldr	r2, [pc, #176]	; (800192c <TIM_Base_SetConfig+0x118>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d023      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <TIM_Base_SetConfig+0x11c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01f      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a2a      	ldr	r2, [pc, #168]	; (8001934 <TIM_Base_SetConfig+0x120>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d01b      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a29      	ldr	r2, [pc, #164]	; (8001938 <TIM_Base_SetConfig+0x124>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d017      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a28      	ldr	r2, [pc, #160]	; (800193c <TIM_Base_SetConfig+0x128>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a27      	ldr	r2, [pc, #156]	; (8001940 <TIM_Base_SetConfig+0x12c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00f      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a26      	ldr	r2, [pc, #152]	; (8001944 <TIM_Base_SetConfig+0x130>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00b      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a25      	ldr	r2, [pc, #148]	; (8001948 <TIM_Base_SetConfig+0x134>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d007      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a24      	ldr	r2, [pc, #144]	; (800194c <TIM_Base_SetConfig+0x138>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d003      	beq.n	80018c6 <TIM_Base_SetConfig+0xb2>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a23      	ldr	r2, [pc, #140]	; (8001950 <TIM_Base_SetConfig+0x13c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d108      	bne.n	80018d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <TIM_Base_SetConfig+0x114>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d003      	beq.n	800190c <TIM_Base_SetConfig+0xf8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <TIM_Base_SetConfig+0x124>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d103      	bne.n	8001914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	615a      	str	r2, [r3, #20]
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40010000 	.word	0x40010000
 800192c:	40000400 	.word	0x40000400
 8001930:	40000800 	.word	0x40000800
 8001934:	40000c00 	.word	0x40000c00
 8001938:	40010400 	.word	0x40010400
 800193c:	40014000 	.word	0x40014000
 8001940:	40014400 	.word	0x40014400
 8001944:	40014800 	.word	0x40014800
 8001948:	40001800 	.word	0x40001800
 800194c:	40001c00 	.word	0x40001c00
 8001950:	40002000 	.word	0x40002000

08001954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e03f      	b.n	8001a0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f001 fa48 	bl	8002e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f90b 	bl	8001bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b088      	sub	sp, #32
 8001a1a:	af02      	add	r7, sp, #8
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4613      	mov	r3, r2
 8001a24:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	f040 8083 	bne.w	8001b3e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_UART_Transmit+0x2e>
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e07b      	b.n	8001b40 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_UART_Transmit+0x40>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e074      	b.n	8001b40 <HAL_UART_Transmit+0x12a>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2221      	movs	r2, #33	; 0x21
 8001a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a6c:	f7fe fdc2 	bl	80005f4 <HAL_GetTick>
 8001a70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a7e:	e042      	b.n	8001b06 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a96:	d122      	bne.n	8001ade <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f850 	bl	8001b48 <UART_WaitOnFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e046      	b.n	8001b40 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ac4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	e017      	b.n	8001b06 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	e013      	b.n	8001b06 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f82d 	bl	8001b48 <UART_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e023      	b.n	8001b40 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1b7      	bne.n	8001a80 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2200      	movs	r2, #0
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f814 	bl	8001b48 <UART_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e00a      	b.n	8001b40 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001b3e:	2302      	movs	r3, #2
  }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b58:	e02c      	b.n	8001bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b60:	d028      	beq.n	8001bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b68:	f7fe fd44 	bl	80005f4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d21d      	bcs.n	8001bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e00f      	b.n	8001bd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d0c3      	beq.n	8001b5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c1c:	f023 030c 	bic.w	r3, r3, #12
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c48:	f040 80e4 	bne.w	8001e14 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4aab      	ldr	r2, [pc, #684]	; (8001f00 <UART_SetConfig+0x324>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <UART_SetConfig+0x84>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4aaa      	ldr	r2, [pc, #680]	; (8001f04 <UART_SetConfig+0x328>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d16c      	bne.n	8001d3a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c60:	f7ff f9c6 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009a      	lsls	r2, r3, #2
 8001c6e:	441a      	add	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4aa3      	ldr	r2, [pc, #652]	; (8001f08 <UART_SetConfig+0x32c>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	011c      	lsls	r4, r3, #4
 8001c84:	f7ff f9b4 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	009a      	lsls	r2, r3, #2
 8001c92:	441a      	add	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c9e:	f7ff f9a7 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	009a      	lsls	r2, r3, #2
 8001cac:	441a      	add	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	4a93      	ldr	r2, [pc, #588]	; (8001f08 <UART_SetConfig+0x32c>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2264      	movs	r2, #100	; 0x64
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	1aeb      	subs	r3, r5, r3
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	3332      	adds	r3, #50	; 0x32
 8001ccc:	4a8e      	ldr	r2, [pc, #568]	; (8001f08 <UART_SetConfig+0x32c>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cda:	441c      	add	r4, r3
 8001cdc:	f7ff f988 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009a      	lsls	r2, r3, #2
 8001cea:	441a      	add	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fbb2 f5f3 	udiv	r5, r2, r3
 8001cf6:	f7ff f97b 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	009a      	lsls	r2, r3, #2
 8001d04:	441a      	add	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	4a7d      	ldr	r2, [pc, #500]	; (8001f08 <UART_SetConfig+0x32c>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2264      	movs	r2, #100	; 0x64
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	1aeb      	subs	r3, r5, r3
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	3332      	adds	r3, #50	; 0x32
 8001d24:	4a78      	ldr	r2, [pc, #480]	; (8001f08 <UART_SetConfig+0x32c>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	f003 0207 	and.w	r2, r3, #7
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4422      	add	r2, r4
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	e154      	b.n	8001fe4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d3a:	f7ff f945 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009a      	lsls	r2, r3, #2
 8001d48:	441a      	add	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	4a6c      	ldr	r2, [pc, #432]	; (8001f08 <UART_SetConfig+0x32c>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	011c      	lsls	r4, r3, #4
 8001d5e:	f7ff f933 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009a      	lsls	r2, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d78:	f7ff f926 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	441a      	add	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <UART_SetConfig+0x32c>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	2264      	movs	r2, #100	; 0x64
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	1aeb      	subs	r3, r5, r3
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	3332      	adds	r3, #50	; 0x32
 8001da6:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <UART_SetConfig+0x32c>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001db4:	441c      	add	r4, r3
 8001db6:	f7ff f907 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009a      	lsls	r2, r3, #2
 8001dc4:	441a      	add	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fbb2 f5f3 	udiv	r5, r2, r3
 8001dd0:	f7ff f8fa 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	009a      	lsls	r2, r3, #2
 8001dde:	441a      	add	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4a47      	ldr	r2, [pc, #284]	; (8001f08 <UART_SetConfig+0x32c>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	2264      	movs	r2, #100	; 0x64
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	1aeb      	subs	r3, r5, r3
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	3332      	adds	r3, #50	; 0x32
 8001dfe:	4a42      	ldr	r2, [pc, #264]	; (8001f08 <UART_SetConfig+0x32c>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	f003 0207 	and.w	r2, r3, #7
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4422      	add	r2, r4
 8001e10:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001e12:	e0e7      	b.n	8001fe4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a39      	ldr	r2, [pc, #228]	; (8001f00 <UART_SetConfig+0x324>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <UART_SetConfig+0x24c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a38      	ldr	r2, [pc, #224]	; (8001f04 <UART_SetConfig+0x328>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d171      	bne.n	8001f0c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e28:	f7ff f8e2 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	009a      	lsls	r2, r3, #2
 8001e36:	441a      	add	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <UART_SetConfig+0x32c>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	011c      	lsls	r4, r3, #4
 8001e4c:	f7ff f8d0 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	009a      	lsls	r2, r3, #2
 8001e5a:	441a      	add	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e66:	f7ff f8c3 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	441a      	add	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <UART_SetConfig+0x32c>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2264      	movs	r2, #100	; 0x64
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	1aeb      	subs	r3, r5, r3
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	3332      	adds	r3, #50	; 0x32
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <UART_SetConfig+0x32c>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	441c      	add	r4, r3
 8001ea2:	f7ff f8a5 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ebc:	f7ff f898 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009a      	lsls	r2, r3, #2
 8001eca:	441a      	add	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <UART_SetConfig+0x32c>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	2264      	movs	r2, #100	; 0x64
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	1aeb      	subs	r3, r5, r3
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	3332      	adds	r3, #50	; 0x32
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <UART_SetConfig+0x32c>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	f003 020f 	and.w	r2, r3, #15
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4422      	add	r2, r4
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	e071      	b.n	8001fe4 <UART_SetConfig+0x408>
 8001f00:	40011000 	.word	0x40011000
 8001f04:	40011400 	.word	0x40011400
 8001f08:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f0c:	f7ff f85c 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	009a      	lsls	r2, r3, #2
 8001f1a:	441a      	add	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4a31      	ldr	r2, [pc, #196]	; (8001fec <UART_SetConfig+0x410>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	011c      	lsls	r4, r3, #4
 8001f30:	f7ff f84a 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009a      	lsls	r2, r3, #2
 8001f3e:	441a      	add	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f4a:	f7ff f83d 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009a      	lsls	r2, r3, #2
 8001f58:	441a      	add	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <UART_SetConfig+0x410>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2264      	movs	r2, #100	; 0x64
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	1aeb      	subs	r3, r5, r3
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	3332      	adds	r3, #50	; 0x32
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <UART_SetConfig+0x410>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f84:	441c      	add	r4, r3
 8001f86:	f7ff f81f 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	009a      	lsls	r2, r3, #2
 8001f94:	441a      	add	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001fa0:	f7ff f812 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	009a      	lsls	r2, r3, #2
 8001fae:	441a      	add	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <UART_SetConfig+0x410>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	2264      	movs	r2, #100	; 0x64
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	1aeb      	subs	r3, r5, r3
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	3332      	adds	r3, #50	; 0x32
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <UART_SetConfig+0x410>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	f003 020f 	and.w	r2, r3, #15
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4422      	add	r2, r4
 8001fe0:	609a      	str	r2, [r3, #8]
}
 8001fe2:	e7ff      	b.n	8001fe4 <UART_SetConfig+0x408>
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}
 8001fec:	51eb851f 	.word	0x51eb851f

08001ff0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	601a      	str	r2, [r3, #0]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6892      	ldr	r2, [r2, #8]
 800204e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6852      	ldr	r2, [r2, #4]
 8002058:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	d103      	bne.n	800206c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002096:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <xTaskIncrementTick+0x14c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 808c 	bne.w	80021b8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020a0:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <xTaskIncrementTick+0x150>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80020a8:	4a4c      	ldr	r2, [pc, #304]	; (80021dc <xTaskIncrementTick+0x150>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d11f      	bne.n	80020f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80020b4:	4b4a      	ldr	r3, [pc, #296]	; (80021e0 <xTaskIncrementTick+0x154>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	e7fe      	b.n	80020d0 <xTaskIncrementTick+0x44>
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <xTaskIncrementTick+0x154>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <xTaskIncrementTick+0x158>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a40      	ldr	r2, [pc, #256]	; (80021e0 <xTaskIncrementTick+0x154>)
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4a40      	ldr	r2, [pc, #256]	; (80021e4 <xTaskIncrementTick+0x158>)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <xTaskIncrementTick+0x15c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	4a3e      	ldr	r2, [pc, #248]	; (80021e8 <xTaskIncrementTick+0x15c>)
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	f000 f908 	bl	8002304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80020f4:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <xTaskIncrementTick+0x160>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d34d      	bcc.n	800219a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020fe:	4b38      	ldr	r3, [pc, #224]	; (80021e0 <xTaskIncrementTick+0x154>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <xTaskIncrementTick+0x80>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <xTaskIncrementTick+0x82>
 800210c:	2300      	movs	r3, #0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002112:	4b36      	ldr	r3, [pc, #216]	; (80021ec <xTaskIncrementTick+0x160>)
 8002114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002118:	601a      	str	r2, [r3, #0]
					break;
 800211a:	e03e      	b.n	800219a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800211c:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <xTaskIncrementTick+0x154>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d203      	bcs.n	800213c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002134:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <xTaskIncrementTick+0x160>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
						break;
 800213a:	e02e      	b.n	800219a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3304      	adds	r3, #4
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff79 	bl	8002038 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3318      	adds	r3, #24
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff70 	bl	8002038 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2201      	movs	r2, #1
 800215e:	409a      	lsls	r2, r3
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <xTaskIncrementTick+0x164>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4313      	orrs	r3, r2
 8002166:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <xTaskIncrementTick+0x164>)
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <xTaskIncrementTick+0x168>)
 8002178:	441a      	add	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	3304      	adds	r3, #4
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f7ff ff35 	bl	8001ff0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <xTaskIncrementTick+0x16c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	429a      	cmp	r2, r3
 8002192:	d3b4      	bcc.n	80020fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002194:	2301      	movs	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002198:	e7b1      	b.n	80020fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <xTaskIncrementTick+0x16c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a0:	4914      	ldr	r1, [pc, #80]	; (80021f4 <xTaskIncrementTick+0x168>)
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d907      	bls.n	80021c2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e004      	b.n	80021c2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80021b8:	4b10      	ldr	r3, [pc, #64]	; (80021fc <xTaskIncrementTick+0x170>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <xTaskIncrementTick+0x170>)
 80021c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <xTaskIncrementTick+0x174>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80021ca:	2301      	movs	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80021ce:	697b      	ldr	r3, [r7, #20]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000138 	.word	0x20000138
 80021dc:	20000120 	.word	0x20000120
 80021e0:	20000118 	.word	0x20000118
 80021e4:	2000011c 	.word	0x2000011c
 80021e8:	20000130 	.word	0x20000130
 80021ec:	20000134 	.word	0x20000134
 80021f0:	20000124 	.word	0x20000124
 80021f4:	2000008c 	.word	0x2000008c
 80021f8:	20000088 	.word	0x20000088
 80021fc:	20000128 	.word	0x20000128
 8002200:	2000012c 	.word	0x2000012c

08002204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <vTaskSwitchContext+0xec>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <vTaskSwitchContext+0xf0>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002218:	e065      	b.n	80022e6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <vTaskSwitchContext+0xf0>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002220:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <vTaskSwitchContext+0xf4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	429a      	cmp	r2, r3
 8002236:	d111      	bne.n	800225c <vTaskSwitchContext+0x58>
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3304      	adds	r3, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	429a      	cmp	r2, r3
 8002242:	d10b      	bne.n	800225c <vTaskSwitchContext+0x58>
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3308      	adds	r3, #8
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	429a      	cmp	r2, r3
 800224e:	d105      	bne.n	800225c <vTaskSwitchContext+0x58>
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	330c      	adds	r3, #12
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	429a      	cmp	r2, r3
 800225a:	d008      	beq.n	800226e <vTaskSwitchContext+0x6a>
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <vTaskSwitchContext+0xf4>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <vTaskSwitchContext+0xf4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3334      	adds	r3, #52	; 0x34
 8002266:	4619      	mov	r1, r3
 8002268:	4610      	mov	r0, r2
 800226a:	f000 f8dd 	bl	8002428 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <vTaskSwitchContext+0xf8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	f1c3 031f 	rsb	r3, r3, #31
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	491e      	ldr	r1, [pc, #120]	; (8002300 <vTaskSwitchContext+0xfc>)
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <vTaskSwitchContext+0xa8>
	__asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	e7fe      	b.n	80022aa <vTaskSwitchContext+0xa6>
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <vTaskSwitchContext+0xfc>)
 80022b8:	4413      	add	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	3308      	adds	r3, #8
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d104      	bne.n	80022dc <vTaskSwitchContext+0xd8>
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <vTaskSwitchContext+0xf4>)
 80022e4:	6013      	str	r3, [r2, #0]
}
 80022e6:	bf00      	nop
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000138 	.word	0x20000138
 80022f4:	2000012c 	.word	0x2000012c
 80022f8:	20000088 	.word	0x20000088
 80022fc:	20000124 	.word	0x20000124
 8002300:	2000008c 	.word	0x2000008c

08002304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <prvResetNextTaskUnblockTime+0x44>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <prvResetNextTaskUnblockTime+0x14>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <prvResetNextTaskUnblockTime+0x16>
 8002318:	2300      	movs	r3, #0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <prvResetNextTaskUnblockTime+0x48>)
 8002320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002324:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002326:	e008      	b.n	800233a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <prvResetNextTaskUnblockTime+0x44>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <prvResetNextTaskUnblockTime+0x48>)
 8002338:	6013      	str	r3, [r2, #0]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000118 	.word	0x20000118
 800234c:	20000134 	.word	0x20000134

08002350 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <pxCurrentTCBConst2>)
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	6808      	ldr	r0, [r1, #0]
 8002356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800235a:	f380 8809 	msr	PSP, r0
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f04f 0000 	mov.w	r0, #0
 8002366:	f380 8811 	msr	BASEPRI, r0
 800236a:	4770      	bx	lr
 800236c:	f3af 8000 	nop.w

08002370 <pxCurrentTCBConst2>:
 8002370:	20000088 	.word	0x20000088
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
	...

08002380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002380:	f3ef 8009 	mrs	r0, PSP
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <pxCurrentTCBConst>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f01e 0f10 	tst.w	lr, #16
 8002390:	bf08      	it	eq
 8002392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800239a:	6010      	str	r0, [r2, #0]
 800239c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80023a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80023a4:	f380 8811 	msr	BASEPRI, r0
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f7ff ff28 	bl	8002204 <vTaskSwitchContext>
 80023b4:	f04f 0000 	mov.w	r0, #0
 80023b8:	f380 8811 	msr	BASEPRI, r0
 80023bc:	bc09      	pop	{r0, r3}
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	6808      	ldr	r0, [r1, #0]
 80023c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c6:	f01e 0f10 	tst.w	lr, #16
 80023ca:	bf08      	it	eq
 80023cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80023d0:	f380 8809 	msr	PSP, r0
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	f3af 8000 	nop.w

080023e0 <pxCurrentTCBConst>:
 80023e0:	20000088 	.word	0x20000088
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop

080023e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002400:	f7ff fe44 	bl	800208c <xTaskIncrementTick>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <SysTick_Handler+0x3c>)
 800240c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	e000ed04 	.word	0xe000ed04

08002428 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <main>:
static void MX_USART3_UART_Init(void);
static void print(char string[]);


int main(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0

  HAL_Init();
 8002444:	f7fe f8b4 	bl	80005b0 <HAL_Init>


  SystemClock_Config();
 8002448:	f000 f830 	bl	80024ac <SystemClock_Config>


  MX_GPIO_Init();
 800244c:	f000 f8ca 	bl	80025e4 <MX_GPIO_Init>

  MX_USART3_UART_Init();
 8002450:	f000 f89e 	bl	8002590 <MX_USART3_UART_Init>


  while (1)
  {

	  print("Hello Deepak!\r\n");
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <main+0x24>)
 8002456:	f000 f807 	bl	8002468 <print>
	  HAL_Delay(500);
 800245a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800245e:	f7fe f8d5 	bl	800060c <HAL_Delay>
	  print("Hello Deepak!\r\n");
 8002462:	e7f7      	b.n	8002454 <main+0x14>
 8002464:	080037a8 	.word	0x080037a8

08002468 <print>:
  }

}

static void print(char string[]){
 8002468:	b580      	push	{r7, lr}
 800246a:	b0b6      	sub	sp, #216	; 0xd8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	char buffer[200];
	int len;
	sprintf(buffer, string);
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fd8e 	bl	8002f98 <siprintf>
	len = strlen(buffer);
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	4618      	mov	r0, r3
 8002482:	f7fd febd 	bl	8000200 <strlen>
 8002486:	4603      	mov	r3, r0
 8002488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 800248c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002490:	b29a      	uxth	r2, r3
 8002492:	f107 010c 	add.w	r1, r7, #12
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	4803      	ldr	r0, [pc, #12]	; (80024a8 <print+0x40>)
 800249c:	f7ff fabb 	bl	8001a16 <HAL_UART_Transmit>

}
 80024a0:	bf00      	nop
 80024a2:	37d8      	adds	r7, #216	; 0xd8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2000014c 	.word	0x2000014c

080024ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b094      	sub	sp, #80	; 0x50
 80024b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	2234      	movs	r2, #52	; 0x34
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fd63 	bl	8002f86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <SystemClock_Config+0xdc>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <SystemClock_Config+0xdc>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	6413      	str	r3, [r2, #64]	; 0x40
 80024e0:	4b29      	ldr	r3, [pc, #164]	; (8002588 <SystemClock_Config+0xdc>)
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ec:	2300      	movs	r3, #0
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4b26      	ldr	r3, [pc, #152]	; (800258c <SystemClock_Config+0xe0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a25      	ldr	r2, [pc, #148]	; (800258c <SystemClock_Config+0xe0>)
 80024f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <SystemClock_Config+0xe0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002508:	2301      	movs	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800250c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002510:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002512:	2302      	movs	r3, #2
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800251c:	2304      	movs	r3, #4
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002520:	23b4      	movs	r3, #180	; 0xb4
 8002522:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002524:	2302      	movs	r3, #2
 8002526:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002528:	2306      	movs	r3, #6
 800252a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 800252c:	2306      	movs	r3, #6
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fda1 	bl	800107c <HAL_RCC_OscConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002540:	f000 fb48 	bl	8002bd4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002544:	f7fe fb2a 	bl	8000b9c <HAL_PWREx_EnableOverDrive>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800254e:	f000 fb41 	bl	8002bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002552:	230f      	movs	r3, #15
 8002554:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002556:	2302      	movs	r3, #2
 8002558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800255e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002568:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	2105      	movs	r1, #5
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fb63 	bl	8000c3c <HAL_RCC_ClockConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800257c:	f000 fb2a 	bl	8002bd4 <Error_Handler>
  }
}
 8002580:	bf00      	nop
 8002582:	3750      	adds	r7, #80	; 0x50
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	40007000 	.word	0x40007000

08002590 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_USART3_UART_Init+0x4c>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <MX_USART3_UART_Init+0x50>)
 8002598:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <MX_USART3_UART_Init+0x4c>)
 800259c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_USART3_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_USART3_UART_Init+0x4c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_USART3_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_USART3_UART_Init+0x4c>)
 80025b6:	220c      	movs	r2, #12
 80025b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_USART3_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_USART3_UART_Init+0x4c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_USART3_UART_Init+0x4c>)
 80025c8:	f7ff f9d8 	bl	800197c <HAL_UART_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025d2:	f000 faff 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000014c 	.word	0x2000014c
 80025e0:	40004800 	.word	0x40004800

080025e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b090      	sub	sp, #64	; 0x40
 80025e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fe:	4bac      	ldr	r3, [pc, #688]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4aab      	ldr	r2, [pc, #684]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002604:	f043 0310 	orr.w	r3, r3, #16
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4ba9      	ldr	r3, [pc, #676]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	4ba5      	ldr	r3, [pc, #660]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4aa4      	ldr	r2, [pc, #656]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4ba2      	ldr	r3, [pc, #648]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
 8002636:	4b9e      	ldr	r3, [pc, #632]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a9d      	ldr	r2, [pc, #628]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b9b      	ldr	r3, [pc, #620]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	623b      	str	r3, [r7, #32]
 800264c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a96      	ldr	r2, [pc, #600]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b94      	ldr	r3, [pc, #592]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	4b90      	ldr	r3, [pc, #576]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a8f      	ldr	r2, [pc, #572]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b8d      	ldr	r3, [pc, #564]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	4b89      	ldr	r3, [pc, #548]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a88      	ldr	r2, [pc, #544]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b86      	ldr	r3, [pc, #536]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a81      	ldr	r2, [pc, #516]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b7f      	ldr	r3, [pc, #508]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a7a      	ldr	r2, [pc, #488]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026c8:	f043 0320 	orr.w	r3, r3, #32
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b78      	ldr	r3, [pc, #480]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	4b74      	ldr	r3, [pc, #464]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a73      	ldr	r2, [pc, #460]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b71      	ldr	r3, [pc, #452]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a6c      	ldr	r2, [pc, #432]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a65      	ldr	r2, [pc, #404]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 800271c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <MX_GPIO_Init+0x2cc>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 800272e:	2200      	movs	r2, #0
 8002730:	210c      	movs	r1, #12
 8002732:	4860      	ldr	r0, [pc, #384]	; (80028b4 <MX_GPIO_Init+0x2d0>)
 8002734:	f7fe fa18 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	2130      	movs	r1, #48	; 0x30
 800273c:	485e      	ldr	r0, [pc, #376]	; (80028b8 <MX_GPIO_Init+0x2d4>)
 800273e:	f7fe fa13 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8002742:	2201      	movs	r2, #1
 8002744:	2108      	movs	r1, #8
 8002746:	485d      	ldr	r0, [pc, #372]	; (80028bc <MX_GPIO_Init+0x2d8>)
 8002748:	f7fe fa0e 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800274c:	2201      	movs	r2, #1
 800274e:	2140      	movs	r1, #64	; 0x40
 8002750:	485b      	ldr	r0, [pc, #364]	; (80028c0 <MX_GPIO_Init+0x2dc>)
 8002752:	f7fe fa09 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	2105      	movs	r1, #5
 800275a:	485a      	ldr	r0, [pc, #360]	; (80028c4 <MX_GPIO_Init+0x2e0>)
 800275c:	f7fe fa04 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	2180      	movs	r1, #128	; 0x80
 8002764:	4858      	ldr	r0, [pc, #352]	; (80028c8 <MX_GPIO_Init+0x2e4>)
 8002766:	f7fe f9ff 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	2108      	movs	r1, #8
 800276e:	4857      	ldr	r0, [pc, #348]	; (80028cc <MX_GPIO_Init+0x2e8>)
 8002770:	f7fe f9fa 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8002774:	2330      	movs	r3, #48	; 0x30
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002784:	2306      	movs	r3, #6
 8002786:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800278c:	4619      	mov	r1, r3
 800278e:	4849      	ldr	r0, [pc, #292]	; (80028b4 <MX_GPIO_Init+0x2d0>)
 8002790:	f7fe f840 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8002794:	230c      	movs	r3, #12
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002798:	2301      	movs	r3, #1
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a8:	4619      	mov	r1, r3
 80027aa:	4842      	ldr	r0, [pc, #264]	; (80028b4 <MX_GPIO_Init+0x2d0>)
 80027ac:	f7fe f832 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_USART6_TX_Pin USART6_RX_Pin */
  GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 80027b0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027c2:	2308      	movs	r3, #8
 80027c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ca:	4619      	mov	r1, r3
 80027cc:	483c      	ldr	r0, [pc, #240]	; (80028c0 <MX_GPIO_Init+0x2dc>)
 80027ce:	f7fe f821 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin D5_Pin D6_Pin
                           D8_Pin D11_Pin D4_Pin D7_Pin
                           D9_Pin D12_Pin D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80027d2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027e4:	230c      	movs	r3, #12
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ec:	4619      	mov	r1, r3
 80027ee:	4831      	ldr	r0, [pc, #196]	; (80028b4 <MX_GPIO_Init+0x2d0>)
 80027f0:	f7fe f810 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80027f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fa:	2312      	movs	r3, #18
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027fe:	2301      	movs	r3, #1
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002806:	2304      	movs	r3, #4
 8002808:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800280e:	4619      	mov	r1, r3
 8002810:	482c      	ldr	r0, [pc, #176]	; (80028c4 <MX_GPIO_Init+0x2e0>)
 8002812:	f7fd ffff 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8002816:	2308      	movs	r3, #8
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002826:	2306      	movs	r3, #6
 8002828:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 800282a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800282e:	4619      	mov	r1, r3
 8002830:	4824      	ldr	r0, [pc, #144]	; (80028c4 <MX_GPIO_Init+0x2e0>)
 8002832:	f7fd ffef 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CLK_Pin uSD_D3_Pin uSD_D2_Pin uSD_D1_Pin
                           uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8002836:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002848:	230c      	movs	r3, #12
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002850:	4619      	mov	r1, r3
 8002852:	481f      	ldr	r0, [pc, #124]	; (80028d0 <MX_GPIO_Init+0x2ec>)
 8002854:	f7fd ffde 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <MX_GPIO_Init+0x2f0>)
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002868:	4619      	mov	r1, r3
 800286a:	4816      	ldr	r0, [pc, #88]	; (80028c4 <MX_GPIO_Init+0x2e0>)
 800286c:	f7fd ffd2 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8002870:	2340      	movs	r3, #64	; 0x40
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002880:	230a      	movs	r3, #10
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002888:	4619      	mov	r1, r3
 800288a:	480e      	ldr	r0, [pc, #56]	; (80028c4 <MX_GPIO_Init+0x2e0>)
 800288c:	f7fd ffc2 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A11_Pin A10_Pin
                           PG5 PG4 */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8002890:	f248 1333 	movw	r3, #33075	; 0x8133
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028a2:	230c      	movs	r3, #12
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028aa:	4619      	mov	r1, r3
 80028ac:	e014      	b.n	80028d8 <MX_GPIO_Init+0x2f4>
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	40022800 	.word	0x40022800
 80028c0:	40021800 	.word	0x40021800
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40021c00 	.word	0x40021c00
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40020800 	.word	0x40020800
 80028d4:	10110000 	.word	0x10110000
 80028d8:	48b3      	ldr	r0, [pc, #716]	; (8002ba8 <MX_GPIO_Init+0x5c4>)
 80028da:	f7fd ff9b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_DATA_Pin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80028de:	2340      	movs	r3, #64	; 0x40
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80028ee:	2306      	movs	r3, #6
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80028f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f6:	4619      	mov	r1, r3
 80028f8:	48ac      	ldr	r0, [pc, #688]	; (8002bac <MX_GPIO_Init+0x5c8>)
 80028fa:	f7fd ff8b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D1_Pin D15_Pin
                           D0_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 80028fe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002910:	230c      	movs	r3, #12
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002918:	4619      	mov	r1, r3
 800291a:	48a4      	ldr	r0, [pc, #656]	; (8002bac <MX_GPIO_Init+0x5c8>)
 800291c:	f7fd ff7a 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS1_P_Pin USB_FS1_N_Pin USB_FS1_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8002920:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002932:	230a      	movs	r3, #10
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800293a:	4619      	mov	r1, r3
 800293c:	489c      	ldr	r0, [pc, #624]	; (8002bb0 <MX_GPIO_Init+0x5cc>)
 800293e:	f7fd ff69 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin
                           D29_Pin D31_Pin D28_Pin D25_Pin
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002942:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002954:	230c      	movs	r3, #12
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800295c:	4619      	mov	r1, r3
 800295e:	4895      	ldr	r0, [pc, #596]	; (8002bb4 <MX_GPIO_Init+0x5d0>)
 8002960:	f7fd ff58 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8002964:	2330      	movs	r3, #48	; 0x30
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002968:	2311      	movs	r3, #17
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002978:	4619      	mov	r1, r3
 800297a:	488c      	ldr	r0, [pc, #560]	; (8002bac <MX_GPIO_Init+0x5c8>)
 800297c:	f7fd ff4a 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin A6_Pin A9_Pin
                           A7_Pin A8_Pin SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002980:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298e:	2303      	movs	r3, #3
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002992:	230c      	movs	r3, #12
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299a:	4619      	mov	r1, r3
 800299c:	4886      	ldr	r0, [pc, #536]	; (8002bb8 <MX_GPIO_Init+0x5d4>)
 800299e:	f7fd ff39 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80029a2:	2308      	movs	r3, #8
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80029a6:	2311      	movs	r3, #17
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80029b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b6:	4619      	mov	r1, r3
 80029b8:	4880      	ldr	r0, [pc, #512]	; (8002bbc <MX_GPIO_Init+0x5d8>)
 80029ba:	f7fd ff2b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80029be:	2304      	movs	r3, #4
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029ce:	230c      	movs	r3, #12
 80029d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d6:	4619      	mov	r1, r3
 80029d8:	4874      	ldr	r0, [pc, #464]	; (8002bac <MX_GPIO_Init+0x5c8>)
 80029da:	f7fd ff1b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin SDNE0_Pin
                           SDCKE0_Pin D20_Pin D17_Pin D19_Pin
                           D16_Pin D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 80029de:	f64f 730c 	movw	r3, #65292	; 0xff0c
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029f0:	230c      	movs	r3, #12
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029f8:	4619      	mov	r1, r3
 80029fa:	4871      	ldr	r0, [pc, #452]	; (8002bc0 <MX_GPIO_Init+0x5dc>)
 80029fc:	f7fd ff0a 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS1_Pin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8002a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a12:	4619      	mov	r1, r3
 8002a14:	4866      	ldr	r0, [pc, #408]	; (8002bb0 <MX_GPIO_Init+0x5cc>)
 8002a16:	f7fd fefd 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8002a1a:	2330      	movs	r3, #48	; 0x30
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1e:	2312      	movs	r3, #18
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a32:	4619      	mov	r1, r3
 8002a34:	4862      	ldr	r0, [pc, #392]	; (8002bc0 <MX_GPIO_Init+0x5dc>)
 8002a36:	f7fd feed 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a52:	4619      	mov	r1, r3
 8002a54:	4854      	ldr	r0, [pc, #336]	; (8002ba8 <MX_GPIO_Init+0x5c4>)
 8002a56:	f7fd fedd 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002a5a:	2340      	movs	r3, #64	; 0x40
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a5e:	2311      	movs	r3, #17
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6e:	4619      	mov	r1, r3
 8002a70:	484d      	ldr	r0, [pc, #308]	; (8002ba8 <MX_GPIO_Init+0x5c4>)
 8002a72:	f7fd fecf 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_BK1_IO3_Pin QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8002a76:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a84:	2303      	movs	r3, #3
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002a88:	2309      	movs	r3, #9
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a90:	4619      	mov	r1, r3
 8002a92:	4849      	ldr	r0, [pc, #292]	; (8002bb8 <MX_GPIO_Init+0x5d4>)
 8002a94:	f7fd febe 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002a98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002aaa:	230a      	movs	r3, #10
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4840      	ldr	r0, [pc, #256]	; (8002bb8 <MX_GPIO_Init+0x5d4>)
 8002ab6:	f7fd fead 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002aba:	2301      	movs	r3, #1
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aca:	230c      	movs	r3, #12
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	483b      	ldr	r0, [pc, #236]	; (8002bc4 <MX_GPIO_Init+0x5e0>)
 8002ad6:	f7fd fe9d 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8002ada:	2305      	movs	r3, #5
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	4835      	ldr	r0, [pc, #212]	; (8002bc8 <MX_GPIO_Init+0x5e4>)
 8002af2:	f7fd fe8f 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8002af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8002b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4826      	ldr	r0, [pc, #152]	; (8002bac <MX_GPIO_Init+0x5c8>)
 8002b14:	f7fd fe7e 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b28:	4619      	mov	r1, r3
 8002b2a:	481f      	ldr	r0, [pc, #124]	; (8002ba8 <MX_GPIO_Init+0x5c4>)
 8002b2c:	f7fd fe72 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002b30:	2320      	movs	r3, #32
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <MX_GPIO_Init+0x5e8>)
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b40:	4619      	mov	r1, r3
 8002b42:	4823      	ldr	r0, [pc, #140]	; (8002bd0 <MX_GPIO_Init+0x5ec>)
 8002b44:	f7fd fe66 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4818      	ldr	r0, [pc, #96]	; (8002bc0 <MX_GPIO_Init+0x5dc>)
 8002b60:	f7fd fe58 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8002b64:	2304      	movs	r3, #4
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b70:	2303      	movs	r3, #3
 8002b72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8002b74:	230d      	movs	r3, #13
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8002b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4814      	ldr	r0, [pc, #80]	; (8002bd0 <MX_GPIO_Init+0x5ec>)
 8002b80:	f7fd fe48 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002b84:	2308      	movs	r3, #8
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <MX_GPIO_Init+0x5cc>)
 8002b9c:	f7fd fe3a 	bl	8000814 <HAL_GPIO_Init>

}
 8002ba0:	bf00      	nop
 8002ba2:	3740      	adds	r7, #64	; 0x40
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021800 	.word	0x40021800
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021400 	.word	0x40021400
 8002bbc:	40022800 	.word	0x40022800
 8002bc0:	40021c00 	.word	0x40021c00
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	10110000 	.word	0x10110000
 8002bd0:	40022400 	.word	0x40022400

08002bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_MspInit+0x4c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <HAL_MspInit+0x4c>)
 8002bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_MspInit+0x4c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_MspInit+0x4c>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <HAL_MspInit+0x4c>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_MspInit+0x4c>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	; 0x30
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002c44:	2200      	movs	r2, #0
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	2036      	movs	r0, #54	; 0x36
 8002c4a:	f7fd fdb9 	bl	80007c0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002c4e:	2036      	movs	r0, #54	; 0x36
 8002c50:	f7fd fdd2 	bl	80007f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <HAL_InitTick+0xa4>)
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	4a1e      	ldr	r2, [pc, #120]	; (8002cd8 <HAL_InitTick+0xa4>)
 8002c5e:	f043 0310 	orr.w	r3, r3, #16
 8002c62:	6413      	str	r3, [r2, #64]	; 0x40
 8002c64:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <HAL_InitTick+0xa4>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c70:	f107 0210 	add.w	r2, r7, #16
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f9cc 	bl	8001018 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c80:	f7fe f9a2 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 8002c84:	4603      	mov	r3, r0
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <HAL_InitTick+0xa8>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0c9b      	lsrs	r3, r3, #18
 8002c94:	3b01      	subs	r3, #1
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_InitTick+0xac>)
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_InitTick+0xb0>)
 8002c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_InitTick+0xac>)
 8002ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ca4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ca6:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_InitTick+0xac>)
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_InitTick+0xac>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_InitTick+0xac>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002cb8:	4809      	ldr	r0, [pc, #36]	; (8002ce0 <HAL_InitTick+0xac>)
 8002cba:	f7fe fc21 	bl	8001500 <HAL_TIM_Base_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d104      	bne.n	8002cce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002cc4:	4806      	ldr	r0, [pc, #24]	; (8002ce0 <HAL_InitTick+0xac>)
 8002cc6:	f7fe fc46 	bl	8001556 <HAL_TIM_Base_Start_IT>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	e000      	b.n	8002cd0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3730      	adds	r7, #48	; 0x30
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	431bde83 	.word	0x431bde83
 8002ce0:	2000018c 	.word	0x2000018c
 8002ce4:	40001000 	.word	0x40001000

08002ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <HardFault_Handler+0x4>

08002cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <MemManage_Handler+0x4>

08002d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d06:	e7fe      	b.n	8002d06 <BusFault_Handler+0x4>

08002d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <UsageFault_Handler+0x4>

08002d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <TIM6_DAC_IRQHandler+0x10>)
 8002d22:	f7fe fc3c 	bl	800159e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	2000018c 	.word	0x2000018c

08002d30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <_sbrk+0x50>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <_sbrk+0x16>
		heap_end = &end;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <_sbrk+0x50>)
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <_sbrk+0x54>)
 8002d44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <_sbrk+0x50>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <_sbrk+0x50>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	466a      	mov	r2, sp
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d907      	bls.n	8002d6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d5a:	f000 f8df 	bl	8002f1c <__errno>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	230c      	movs	r3, #12
 8002d62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d68:	e006      	b.n	8002d78 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <_sbrk+0x50>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	4a03      	ldr	r2, [pc, #12]	; (8002d80 <_sbrk+0x50>)
 8002d74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	2000013c 	.word	0x2000013c
 8002d84:	200001d0 	.word	0x200001d0

08002d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <SystemInit+0x60>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <SystemInit+0x60>)
 8002d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <SystemInit+0x64>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a12      	ldr	r2, [pc, #72]	; (8002dec <SystemInit+0x64>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <SystemInit+0x64>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <SystemInit+0x64>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <SystemInit+0x64>)
 8002db4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <SystemInit+0x64>)
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <SystemInit+0x68>)
 8002dc2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <SystemInit+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <SystemInit+0x64>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <SystemInit+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dd6:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <SystemInit+0x60>)
 8002dd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ddc:	609a      	str	r2, [r3, #8]
#endif
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00
 8002dec:	40023800 	.word	0x40023800
 8002df0:	24003010 	.word	0x24003010

08002df4 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0b      	ldr	r2, [pc, #44]	; (8002e30 <HAL_TIM_Base_MspInit+0x3c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10d      	bne.n	8002e22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_TIM_Base_MspInit+0x40>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_TIM_Base_MspInit+0x40>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6453      	str	r3, [r2, #68]	; 0x44
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_TIM_Base_MspInit+0x40>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40010000 	.word	0x40010000
 8002e34:	40023800 	.word	0x40023800

08002e38 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <HAL_UART_MspInit+0x84>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d12c      	bne.n	8002eb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_UART_MspInit+0x88>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <HAL_UART_MspInit+0x88>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_UART_MspInit+0x88>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_UART_MspInit+0x88>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_UART_MspInit+0x88>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_UART_MspInit+0x88>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4619      	mov	r1, r3
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <HAL_UART_MspInit+0x8c>)
 8002eb0:	f7fd fcb0 	bl	8000814 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40004800 	.word	0x40004800
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40020400 	.word	0x40020400

08002ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ece:	e003      	b.n	8002ed8 <LoopCopyDataInit>

08002ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ed6:	3104      	adds	r1, #4

08002ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ed8:	480b      	ldr	r0, [pc, #44]	; (8002f08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ee0:	d3f6      	bcc.n	8002ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ee4:	e002      	b.n	8002eec <LoopFillZerobss>

08002ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ee8:	f842 3b04 	str.w	r3, [r2], #4

08002eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ef0:	d3f9      	bcc.n	8002ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ef2:	f7ff ff49 	bl	8002d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f000 f817 	bl	8002f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efa:	f7ff faa1 	bl	8002440 <main>
  bx  lr    
 8002efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f00:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002f04:	08003814 	.word	0x08003814
  ldr  r0, =_sdata
 8002f08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f0c:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8002f10:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8002f14:	200001d0 	.word	0x200001d0

08002f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC_IRQHandler>
	...

08002f1c <__errno>:
 8002f1c:	4b01      	ldr	r3, [pc, #4]	; (8002f24 <__errno+0x8>)
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000008 	.word	0x20000008

08002f28 <__libc_init_array>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4e0d      	ldr	r6, [pc, #52]	; (8002f60 <__libc_init_array+0x38>)
 8002f2c:	4c0d      	ldr	r4, [pc, #52]	; (8002f64 <__libc_init_array+0x3c>)
 8002f2e:	1ba4      	subs	r4, r4, r6
 8002f30:	10a4      	asrs	r4, r4, #2
 8002f32:	2500      	movs	r5, #0
 8002f34:	42a5      	cmp	r5, r4
 8002f36:	d109      	bne.n	8002f4c <__libc_init_array+0x24>
 8002f38:	4e0b      	ldr	r6, [pc, #44]	; (8002f68 <__libc_init_array+0x40>)
 8002f3a:	4c0c      	ldr	r4, [pc, #48]	; (8002f6c <__libc_init_array+0x44>)
 8002f3c:	f000 fc28 	bl	8003790 <_init>
 8002f40:	1ba4      	subs	r4, r4, r6
 8002f42:	10a4      	asrs	r4, r4, #2
 8002f44:	2500      	movs	r5, #0
 8002f46:	42a5      	cmp	r5, r4
 8002f48:	d105      	bne.n	8002f56 <__libc_init_array+0x2e>
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
 8002f4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f50:	4798      	blx	r3
 8002f52:	3501      	adds	r5, #1
 8002f54:	e7ee      	b.n	8002f34 <__libc_init_array+0xc>
 8002f56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f5a:	4798      	blx	r3
 8002f5c:	3501      	adds	r5, #1
 8002f5e:	e7f2      	b.n	8002f46 <__libc_init_array+0x1e>
 8002f60:	0800380c 	.word	0x0800380c
 8002f64:	0800380c 	.word	0x0800380c
 8002f68:	0800380c 	.word	0x0800380c
 8002f6c:	08003810 	.word	0x08003810

08002f70 <memcpy>:
 8002f70:	b510      	push	{r4, lr}
 8002f72:	1e43      	subs	r3, r0, #1
 8002f74:	440a      	add	r2, r1
 8002f76:	4291      	cmp	r1, r2
 8002f78:	d100      	bne.n	8002f7c <memcpy+0xc>
 8002f7a:	bd10      	pop	{r4, pc}
 8002f7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f84:	e7f7      	b.n	8002f76 <memcpy+0x6>

08002f86 <memset>:
 8002f86:	4402      	add	r2, r0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d100      	bne.n	8002f90 <memset+0xa>
 8002f8e:	4770      	bx	lr
 8002f90:	f803 1b01 	strb.w	r1, [r3], #1
 8002f94:	e7f9      	b.n	8002f8a <memset+0x4>
	...

08002f98 <siprintf>:
 8002f98:	b40e      	push	{r1, r2, r3}
 8002f9a:	b500      	push	{lr}
 8002f9c:	b09c      	sub	sp, #112	; 0x70
 8002f9e:	ab1d      	add	r3, sp, #116	; 0x74
 8002fa0:	9002      	str	r0, [sp, #8]
 8002fa2:	9006      	str	r0, [sp, #24]
 8002fa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fa8:	4809      	ldr	r0, [pc, #36]	; (8002fd0 <siprintf+0x38>)
 8002faa:	9107      	str	r1, [sp, #28]
 8002fac:	9104      	str	r1, [sp, #16]
 8002fae:	4909      	ldr	r1, [pc, #36]	; (8002fd4 <siprintf+0x3c>)
 8002fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fb4:	9105      	str	r1, [sp, #20]
 8002fb6:	6800      	ldr	r0, [r0, #0]
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	a902      	add	r1, sp, #8
 8002fbc:	f000 f866 	bl	800308c <_svfiprintf_r>
 8002fc0:	9b02      	ldr	r3, [sp, #8]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	b01c      	add	sp, #112	; 0x70
 8002fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fcc:	b003      	add	sp, #12
 8002fce:	4770      	bx	lr
 8002fd0:	20000008 	.word	0x20000008
 8002fd4:	ffff0208 	.word	0xffff0208

08002fd8 <__ssputs_r>:
 8002fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fdc:	688e      	ldr	r6, [r1, #8]
 8002fde:	429e      	cmp	r6, r3
 8002fe0:	4682      	mov	sl, r0
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	4690      	mov	r8, r2
 8002fe6:	4699      	mov	r9, r3
 8002fe8:	d837      	bhi.n	800305a <__ssputs_r+0x82>
 8002fea:	898a      	ldrh	r2, [r1, #12]
 8002fec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ff0:	d031      	beq.n	8003056 <__ssputs_r+0x7e>
 8002ff2:	6825      	ldr	r5, [r4, #0]
 8002ff4:	6909      	ldr	r1, [r1, #16]
 8002ff6:	1a6f      	subs	r7, r5, r1
 8002ff8:	6965      	ldr	r5, [r4, #20]
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003000:	fb95 f5f3 	sdiv	r5, r5, r3
 8003004:	f109 0301 	add.w	r3, r9, #1
 8003008:	443b      	add	r3, r7
 800300a:	429d      	cmp	r5, r3
 800300c:	bf38      	it	cc
 800300e:	461d      	movcc	r5, r3
 8003010:	0553      	lsls	r3, r2, #21
 8003012:	d530      	bpl.n	8003076 <__ssputs_r+0x9e>
 8003014:	4629      	mov	r1, r5
 8003016:	f000 fb21 	bl	800365c <_malloc_r>
 800301a:	4606      	mov	r6, r0
 800301c:	b950      	cbnz	r0, 8003034 <__ssputs_r+0x5c>
 800301e:	230c      	movs	r3, #12
 8003020:	f8ca 3000 	str.w	r3, [sl]
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302a:	81a3      	strh	r3, [r4, #12]
 800302c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003034:	463a      	mov	r2, r7
 8003036:	6921      	ldr	r1, [r4, #16]
 8003038:	f7ff ff9a 	bl	8002f70 <memcpy>
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003046:	81a3      	strh	r3, [r4, #12]
 8003048:	6126      	str	r6, [r4, #16]
 800304a:	6165      	str	r5, [r4, #20]
 800304c:	443e      	add	r6, r7
 800304e:	1bed      	subs	r5, r5, r7
 8003050:	6026      	str	r6, [r4, #0]
 8003052:	60a5      	str	r5, [r4, #8]
 8003054:	464e      	mov	r6, r9
 8003056:	454e      	cmp	r6, r9
 8003058:	d900      	bls.n	800305c <__ssputs_r+0x84>
 800305a:	464e      	mov	r6, r9
 800305c:	4632      	mov	r2, r6
 800305e:	4641      	mov	r1, r8
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	f000 fa93 	bl	800358c <memmove>
 8003066:	68a3      	ldr	r3, [r4, #8]
 8003068:	1b9b      	subs	r3, r3, r6
 800306a:	60a3      	str	r3, [r4, #8]
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	441e      	add	r6, r3
 8003070:	6026      	str	r6, [r4, #0]
 8003072:	2000      	movs	r0, #0
 8003074:	e7dc      	b.n	8003030 <__ssputs_r+0x58>
 8003076:	462a      	mov	r2, r5
 8003078:	f000 fb4a 	bl	8003710 <_realloc_r>
 800307c:	4606      	mov	r6, r0
 800307e:	2800      	cmp	r0, #0
 8003080:	d1e2      	bne.n	8003048 <__ssputs_r+0x70>
 8003082:	6921      	ldr	r1, [r4, #16]
 8003084:	4650      	mov	r0, sl
 8003086:	f000 fa9b 	bl	80035c0 <_free_r>
 800308a:	e7c8      	b.n	800301e <__ssputs_r+0x46>

0800308c <_svfiprintf_r>:
 800308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003090:	461d      	mov	r5, r3
 8003092:	898b      	ldrh	r3, [r1, #12]
 8003094:	061f      	lsls	r7, r3, #24
 8003096:	b09d      	sub	sp, #116	; 0x74
 8003098:	4680      	mov	r8, r0
 800309a:	460c      	mov	r4, r1
 800309c:	4616      	mov	r6, r2
 800309e:	d50f      	bpl.n	80030c0 <_svfiprintf_r+0x34>
 80030a0:	690b      	ldr	r3, [r1, #16]
 80030a2:	b96b      	cbnz	r3, 80030c0 <_svfiprintf_r+0x34>
 80030a4:	2140      	movs	r1, #64	; 0x40
 80030a6:	f000 fad9 	bl	800365c <_malloc_r>
 80030aa:	6020      	str	r0, [r4, #0]
 80030ac:	6120      	str	r0, [r4, #16]
 80030ae:	b928      	cbnz	r0, 80030bc <_svfiprintf_r+0x30>
 80030b0:	230c      	movs	r3, #12
 80030b2:	f8c8 3000 	str.w	r3, [r8]
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ba:	e0c8      	b.n	800324e <_svfiprintf_r+0x1c2>
 80030bc:	2340      	movs	r3, #64	; 0x40
 80030be:	6163      	str	r3, [r4, #20]
 80030c0:	2300      	movs	r3, #0
 80030c2:	9309      	str	r3, [sp, #36]	; 0x24
 80030c4:	2320      	movs	r3, #32
 80030c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030ca:	2330      	movs	r3, #48	; 0x30
 80030cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030d0:	9503      	str	r5, [sp, #12]
 80030d2:	f04f 0b01 	mov.w	fp, #1
 80030d6:	4637      	mov	r7, r6
 80030d8:	463d      	mov	r5, r7
 80030da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030de:	b10b      	cbz	r3, 80030e4 <_svfiprintf_r+0x58>
 80030e0:	2b25      	cmp	r3, #37	; 0x25
 80030e2:	d13e      	bne.n	8003162 <_svfiprintf_r+0xd6>
 80030e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80030e8:	d00b      	beq.n	8003102 <_svfiprintf_r+0x76>
 80030ea:	4653      	mov	r3, sl
 80030ec:	4632      	mov	r2, r6
 80030ee:	4621      	mov	r1, r4
 80030f0:	4640      	mov	r0, r8
 80030f2:	f7ff ff71 	bl	8002fd8 <__ssputs_r>
 80030f6:	3001      	adds	r0, #1
 80030f8:	f000 80a4 	beq.w	8003244 <_svfiprintf_r+0x1b8>
 80030fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030fe:	4453      	add	r3, sl
 8003100:	9309      	str	r3, [sp, #36]	; 0x24
 8003102:	783b      	ldrb	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 809d 	beq.w	8003244 <_svfiprintf_r+0x1b8>
 800310a:	2300      	movs	r3, #0
 800310c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003114:	9304      	str	r3, [sp, #16]
 8003116:	9307      	str	r3, [sp, #28]
 8003118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800311c:	931a      	str	r3, [sp, #104]	; 0x68
 800311e:	462f      	mov	r7, r5
 8003120:	2205      	movs	r2, #5
 8003122:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003126:	4850      	ldr	r0, [pc, #320]	; (8003268 <_svfiprintf_r+0x1dc>)
 8003128:	f7fd f872 	bl	8000210 <memchr>
 800312c:	9b04      	ldr	r3, [sp, #16]
 800312e:	b9d0      	cbnz	r0, 8003166 <_svfiprintf_r+0xda>
 8003130:	06d9      	lsls	r1, r3, #27
 8003132:	bf44      	itt	mi
 8003134:	2220      	movmi	r2, #32
 8003136:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800313a:	071a      	lsls	r2, r3, #28
 800313c:	bf44      	itt	mi
 800313e:	222b      	movmi	r2, #43	; 0x2b
 8003140:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003144:	782a      	ldrb	r2, [r5, #0]
 8003146:	2a2a      	cmp	r2, #42	; 0x2a
 8003148:	d015      	beq.n	8003176 <_svfiprintf_r+0xea>
 800314a:	9a07      	ldr	r2, [sp, #28]
 800314c:	462f      	mov	r7, r5
 800314e:	2000      	movs	r0, #0
 8003150:	250a      	movs	r5, #10
 8003152:	4639      	mov	r1, r7
 8003154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003158:	3b30      	subs	r3, #48	; 0x30
 800315a:	2b09      	cmp	r3, #9
 800315c:	d94d      	bls.n	80031fa <_svfiprintf_r+0x16e>
 800315e:	b1b8      	cbz	r0, 8003190 <_svfiprintf_r+0x104>
 8003160:	e00f      	b.n	8003182 <_svfiprintf_r+0xf6>
 8003162:	462f      	mov	r7, r5
 8003164:	e7b8      	b.n	80030d8 <_svfiprintf_r+0x4c>
 8003166:	4a40      	ldr	r2, [pc, #256]	; (8003268 <_svfiprintf_r+0x1dc>)
 8003168:	1a80      	subs	r0, r0, r2
 800316a:	fa0b f000 	lsl.w	r0, fp, r0
 800316e:	4318      	orrs	r0, r3
 8003170:	9004      	str	r0, [sp, #16]
 8003172:	463d      	mov	r5, r7
 8003174:	e7d3      	b.n	800311e <_svfiprintf_r+0x92>
 8003176:	9a03      	ldr	r2, [sp, #12]
 8003178:	1d11      	adds	r1, r2, #4
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	9103      	str	r1, [sp, #12]
 800317e:	2a00      	cmp	r2, #0
 8003180:	db01      	blt.n	8003186 <_svfiprintf_r+0xfa>
 8003182:	9207      	str	r2, [sp, #28]
 8003184:	e004      	b.n	8003190 <_svfiprintf_r+0x104>
 8003186:	4252      	negs	r2, r2
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	9207      	str	r2, [sp, #28]
 800318e:	9304      	str	r3, [sp, #16]
 8003190:	783b      	ldrb	r3, [r7, #0]
 8003192:	2b2e      	cmp	r3, #46	; 0x2e
 8003194:	d10c      	bne.n	80031b0 <_svfiprintf_r+0x124>
 8003196:	787b      	ldrb	r3, [r7, #1]
 8003198:	2b2a      	cmp	r3, #42	; 0x2a
 800319a:	d133      	bne.n	8003204 <_svfiprintf_r+0x178>
 800319c:	9b03      	ldr	r3, [sp, #12]
 800319e:	1d1a      	adds	r2, r3, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	9203      	str	r2, [sp, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bfb8      	it	lt
 80031a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80031ac:	3702      	adds	r7, #2
 80031ae:	9305      	str	r3, [sp, #20]
 80031b0:	4d2e      	ldr	r5, [pc, #184]	; (800326c <_svfiprintf_r+0x1e0>)
 80031b2:	7839      	ldrb	r1, [r7, #0]
 80031b4:	2203      	movs	r2, #3
 80031b6:	4628      	mov	r0, r5
 80031b8:	f7fd f82a 	bl	8000210 <memchr>
 80031bc:	b138      	cbz	r0, 80031ce <_svfiprintf_r+0x142>
 80031be:	2340      	movs	r3, #64	; 0x40
 80031c0:	1b40      	subs	r0, r0, r5
 80031c2:	fa03 f000 	lsl.w	r0, r3, r0
 80031c6:	9b04      	ldr	r3, [sp, #16]
 80031c8:	4303      	orrs	r3, r0
 80031ca:	3701      	adds	r7, #1
 80031cc:	9304      	str	r3, [sp, #16]
 80031ce:	7839      	ldrb	r1, [r7, #0]
 80031d0:	4827      	ldr	r0, [pc, #156]	; (8003270 <_svfiprintf_r+0x1e4>)
 80031d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031d6:	2206      	movs	r2, #6
 80031d8:	1c7e      	adds	r6, r7, #1
 80031da:	f7fd f819 	bl	8000210 <memchr>
 80031de:	2800      	cmp	r0, #0
 80031e0:	d038      	beq.n	8003254 <_svfiprintf_r+0x1c8>
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <_svfiprintf_r+0x1e8>)
 80031e4:	bb13      	cbnz	r3, 800322c <_svfiprintf_r+0x1a0>
 80031e6:	9b03      	ldr	r3, [sp, #12]
 80031e8:	3307      	adds	r3, #7
 80031ea:	f023 0307 	bic.w	r3, r3, #7
 80031ee:	3308      	adds	r3, #8
 80031f0:	9303      	str	r3, [sp, #12]
 80031f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f4:	444b      	add	r3, r9
 80031f6:	9309      	str	r3, [sp, #36]	; 0x24
 80031f8:	e76d      	b.n	80030d6 <_svfiprintf_r+0x4a>
 80031fa:	fb05 3202 	mla	r2, r5, r2, r3
 80031fe:	2001      	movs	r0, #1
 8003200:	460f      	mov	r7, r1
 8003202:	e7a6      	b.n	8003152 <_svfiprintf_r+0xc6>
 8003204:	2300      	movs	r3, #0
 8003206:	3701      	adds	r7, #1
 8003208:	9305      	str	r3, [sp, #20]
 800320a:	4619      	mov	r1, r3
 800320c:	250a      	movs	r5, #10
 800320e:	4638      	mov	r0, r7
 8003210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003214:	3a30      	subs	r2, #48	; 0x30
 8003216:	2a09      	cmp	r2, #9
 8003218:	d903      	bls.n	8003222 <_svfiprintf_r+0x196>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0c8      	beq.n	80031b0 <_svfiprintf_r+0x124>
 800321e:	9105      	str	r1, [sp, #20]
 8003220:	e7c6      	b.n	80031b0 <_svfiprintf_r+0x124>
 8003222:	fb05 2101 	mla	r1, r5, r1, r2
 8003226:	2301      	movs	r3, #1
 8003228:	4607      	mov	r7, r0
 800322a:	e7f0      	b.n	800320e <_svfiprintf_r+0x182>
 800322c:	ab03      	add	r3, sp, #12
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	4622      	mov	r2, r4
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <_svfiprintf_r+0x1ec>)
 8003234:	a904      	add	r1, sp, #16
 8003236:	4640      	mov	r0, r8
 8003238:	f3af 8000 	nop.w
 800323c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003240:	4681      	mov	r9, r0
 8003242:	d1d6      	bne.n	80031f2 <_svfiprintf_r+0x166>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	065b      	lsls	r3, r3, #25
 8003248:	f53f af35 	bmi.w	80030b6 <_svfiprintf_r+0x2a>
 800324c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800324e:	b01d      	add	sp, #116	; 0x74
 8003250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003254:	ab03      	add	r3, sp, #12
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	4622      	mov	r2, r4
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <_svfiprintf_r+0x1ec>)
 800325c:	a904      	add	r1, sp, #16
 800325e:	4640      	mov	r0, r8
 8003260:	f000 f882 	bl	8003368 <_printf_i>
 8003264:	e7ea      	b.n	800323c <_svfiprintf_r+0x1b0>
 8003266:	bf00      	nop
 8003268:	080037d0 	.word	0x080037d0
 800326c:	080037d6 	.word	0x080037d6
 8003270:	080037da 	.word	0x080037da
 8003274:	00000000 	.word	0x00000000
 8003278:	08002fd9 	.word	0x08002fd9

0800327c <_printf_common>:
 800327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003280:	4691      	mov	r9, r2
 8003282:	461f      	mov	r7, r3
 8003284:	688a      	ldr	r2, [r1, #8]
 8003286:	690b      	ldr	r3, [r1, #16]
 8003288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800328c:	4293      	cmp	r3, r2
 800328e:	bfb8      	it	lt
 8003290:	4613      	movlt	r3, r2
 8003292:	f8c9 3000 	str.w	r3, [r9]
 8003296:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800329a:	4606      	mov	r6, r0
 800329c:	460c      	mov	r4, r1
 800329e:	b112      	cbz	r2, 80032a6 <_printf_common+0x2a>
 80032a0:	3301      	adds	r3, #1
 80032a2:	f8c9 3000 	str.w	r3, [r9]
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	0699      	lsls	r1, r3, #26
 80032aa:	bf42      	ittt	mi
 80032ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032b0:	3302      	addmi	r3, #2
 80032b2:	f8c9 3000 	strmi.w	r3, [r9]
 80032b6:	6825      	ldr	r5, [r4, #0]
 80032b8:	f015 0506 	ands.w	r5, r5, #6
 80032bc:	d107      	bne.n	80032ce <_printf_common+0x52>
 80032be:	f104 0a19 	add.w	sl, r4, #25
 80032c2:	68e3      	ldr	r3, [r4, #12]
 80032c4:	f8d9 2000 	ldr.w	r2, [r9]
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	42ab      	cmp	r3, r5
 80032cc:	dc28      	bgt.n	8003320 <_printf_common+0xa4>
 80032ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	3300      	adds	r3, #0
 80032d6:	bf18      	it	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	0692      	lsls	r2, r2, #26
 80032dc:	d42d      	bmi.n	800333a <_printf_common+0xbe>
 80032de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032e2:	4639      	mov	r1, r7
 80032e4:	4630      	mov	r0, r6
 80032e6:	47c0      	blx	r8
 80032e8:	3001      	adds	r0, #1
 80032ea:	d020      	beq.n	800332e <_printf_common+0xb2>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	68e5      	ldr	r5, [r4, #12]
 80032f0:	f8d9 2000 	ldr.w	r2, [r9]
 80032f4:	f003 0306 	and.w	r3, r3, #6
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	bf08      	it	eq
 80032fc:	1aad      	subeq	r5, r5, r2
 80032fe:	68a3      	ldr	r3, [r4, #8]
 8003300:	6922      	ldr	r2, [r4, #16]
 8003302:	bf0c      	ite	eq
 8003304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003308:	2500      	movne	r5, #0
 800330a:	4293      	cmp	r3, r2
 800330c:	bfc4      	itt	gt
 800330e:	1a9b      	subgt	r3, r3, r2
 8003310:	18ed      	addgt	r5, r5, r3
 8003312:	f04f 0900 	mov.w	r9, #0
 8003316:	341a      	adds	r4, #26
 8003318:	454d      	cmp	r5, r9
 800331a:	d11a      	bne.n	8003352 <_printf_common+0xd6>
 800331c:	2000      	movs	r0, #0
 800331e:	e008      	b.n	8003332 <_printf_common+0xb6>
 8003320:	2301      	movs	r3, #1
 8003322:	4652      	mov	r2, sl
 8003324:	4639      	mov	r1, r7
 8003326:	4630      	mov	r0, r6
 8003328:	47c0      	blx	r8
 800332a:	3001      	adds	r0, #1
 800332c:	d103      	bne.n	8003336 <_printf_common+0xba>
 800332e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003336:	3501      	adds	r5, #1
 8003338:	e7c3      	b.n	80032c2 <_printf_common+0x46>
 800333a:	18e1      	adds	r1, r4, r3
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	2030      	movs	r0, #48	; 0x30
 8003340:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003344:	4422      	add	r2, r4
 8003346:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800334a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800334e:	3302      	adds	r3, #2
 8003350:	e7c5      	b.n	80032de <_printf_common+0x62>
 8003352:	2301      	movs	r3, #1
 8003354:	4622      	mov	r2, r4
 8003356:	4639      	mov	r1, r7
 8003358:	4630      	mov	r0, r6
 800335a:	47c0      	blx	r8
 800335c:	3001      	adds	r0, #1
 800335e:	d0e6      	beq.n	800332e <_printf_common+0xb2>
 8003360:	f109 0901 	add.w	r9, r9, #1
 8003364:	e7d8      	b.n	8003318 <_printf_common+0x9c>
	...

08003368 <_printf_i>:
 8003368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800336c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003370:	460c      	mov	r4, r1
 8003372:	7e09      	ldrb	r1, [r1, #24]
 8003374:	b085      	sub	sp, #20
 8003376:	296e      	cmp	r1, #110	; 0x6e
 8003378:	4617      	mov	r7, r2
 800337a:	4606      	mov	r6, r0
 800337c:	4698      	mov	r8, r3
 800337e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003380:	f000 80b3 	beq.w	80034ea <_printf_i+0x182>
 8003384:	d822      	bhi.n	80033cc <_printf_i+0x64>
 8003386:	2963      	cmp	r1, #99	; 0x63
 8003388:	d036      	beq.n	80033f8 <_printf_i+0x90>
 800338a:	d80a      	bhi.n	80033a2 <_printf_i+0x3a>
 800338c:	2900      	cmp	r1, #0
 800338e:	f000 80b9 	beq.w	8003504 <_printf_i+0x19c>
 8003392:	2958      	cmp	r1, #88	; 0x58
 8003394:	f000 8083 	beq.w	800349e <_printf_i+0x136>
 8003398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800339c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80033a0:	e032      	b.n	8003408 <_printf_i+0xa0>
 80033a2:	2964      	cmp	r1, #100	; 0x64
 80033a4:	d001      	beq.n	80033aa <_printf_i+0x42>
 80033a6:	2969      	cmp	r1, #105	; 0x69
 80033a8:	d1f6      	bne.n	8003398 <_printf_i+0x30>
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	6813      	ldr	r3, [r2, #0]
 80033ae:	0605      	lsls	r5, r0, #24
 80033b0:	f103 0104 	add.w	r1, r3, #4
 80033b4:	d52a      	bpl.n	800340c <_printf_i+0xa4>
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6011      	str	r1, [r2, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da03      	bge.n	80033c6 <_printf_i+0x5e>
 80033be:	222d      	movs	r2, #45	; 0x2d
 80033c0:	425b      	negs	r3, r3
 80033c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033c6:	486f      	ldr	r0, [pc, #444]	; (8003584 <_printf_i+0x21c>)
 80033c8:	220a      	movs	r2, #10
 80033ca:	e039      	b.n	8003440 <_printf_i+0xd8>
 80033cc:	2973      	cmp	r1, #115	; 0x73
 80033ce:	f000 809d 	beq.w	800350c <_printf_i+0x1a4>
 80033d2:	d808      	bhi.n	80033e6 <_printf_i+0x7e>
 80033d4:	296f      	cmp	r1, #111	; 0x6f
 80033d6:	d020      	beq.n	800341a <_printf_i+0xb2>
 80033d8:	2970      	cmp	r1, #112	; 0x70
 80033da:	d1dd      	bne.n	8003398 <_printf_i+0x30>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	f043 0320 	orr.w	r3, r3, #32
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	e003      	b.n	80033ee <_printf_i+0x86>
 80033e6:	2975      	cmp	r1, #117	; 0x75
 80033e8:	d017      	beq.n	800341a <_printf_i+0xb2>
 80033ea:	2978      	cmp	r1, #120	; 0x78
 80033ec:	d1d4      	bne.n	8003398 <_printf_i+0x30>
 80033ee:	2378      	movs	r3, #120	; 0x78
 80033f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033f4:	4864      	ldr	r0, [pc, #400]	; (8003588 <_printf_i+0x220>)
 80033f6:	e055      	b.n	80034a4 <_printf_i+0x13c>
 80033f8:	6813      	ldr	r3, [r2, #0]
 80033fa:	1d19      	adds	r1, r3, #4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6011      	str	r1, [r2, #0]
 8003400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003408:	2301      	movs	r3, #1
 800340a:	e08c      	b.n	8003526 <_printf_i+0x1be>
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6011      	str	r1, [r2, #0]
 8003410:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003414:	bf18      	it	ne
 8003416:	b21b      	sxthne	r3, r3
 8003418:	e7cf      	b.n	80033ba <_printf_i+0x52>
 800341a:	6813      	ldr	r3, [r2, #0]
 800341c:	6825      	ldr	r5, [r4, #0]
 800341e:	1d18      	adds	r0, r3, #4
 8003420:	6010      	str	r0, [r2, #0]
 8003422:	0628      	lsls	r0, r5, #24
 8003424:	d501      	bpl.n	800342a <_printf_i+0xc2>
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	e002      	b.n	8003430 <_printf_i+0xc8>
 800342a:	0668      	lsls	r0, r5, #25
 800342c:	d5fb      	bpl.n	8003426 <_printf_i+0xbe>
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	4854      	ldr	r0, [pc, #336]	; (8003584 <_printf_i+0x21c>)
 8003432:	296f      	cmp	r1, #111	; 0x6f
 8003434:	bf14      	ite	ne
 8003436:	220a      	movne	r2, #10
 8003438:	2208      	moveq	r2, #8
 800343a:	2100      	movs	r1, #0
 800343c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003440:	6865      	ldr	r5, [r4, #4]
 8003442:	60a5      	str	r5, [r4, #8]
 8003444:	2d00      	cmp	r5, #0
 8003446:	f2c0 8095 	blt.w	8003574 <_printf_i+0x20c>
 800344a:	6821      	ldr	r1, [r4, #0]
 800344c:	f021 0104 	bic.w	r1, r1, #4
 8003450:	6021      	str	r1, [r4, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d13d      	bne.n	80034d2 <_printf_i+0x16a>
 8003456:	2d00      	cmp	r5, #0
 8003458:	f040 808e 	bne.w	8003578 <_printf_i+0x210>
 800345c:	4665      	mov	r5, ip
 800345e:	2a08      	cmp	r2, #8
 8003460:	d10b      	bne.n	800347a <_printf_i+0x112>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	07db      	lsls	r3, r3, #31
 8003466:	d508      	bpl.n	800347a <_printf_i+0x112>
 8003468:	6923      	ldr	r3, [r4, #16]
 800346a:	6862      	ldr	r2, [r4, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	bfde      	ittt	le
 8003470:	2330      	movle	r3, #48	; 0x30
 8003472:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003476:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800347a:	ebac 0305 	sub.w	r3, ip, r5
 800347e:	6123      	str	r3, [r4, #16]
 8003480:	f8cd 8000 	str.w	r8, [sp]
 8003484:	463b      	mov	r3, r7
 8003486:	aa03      	add	r2, sp, #12
 8003488:	4621      	mov	r1, r4
 800348a:	4630      	mov	r0, r6
 800348c:	f7ff fef6 	bl	800327c <_printf_common>
 8003490:	3001      	adds	r0, #1
 8003492:	d14d      	bne.n	8003530 <_printf_i+0x1c8>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003498:	b005      	add	sp, #20
 800349a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800349e:	4839      	ldr	r0, [pc, #228]	; (8003584 <_printf_i+0x21c>)
 80034a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80034a4:	6813      	ldr	r3, [r2, #0]
 80034a6:	6821      	ldr	r1, [r4, #0]
 80034a8:	1d1d      	adds	r5, r3, #4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6015      	str	r5, [r2, #0]
 80034ae:	060a      	lsls	r2, r1, #24
 80034b0:	d50b      	bpl.n	80034ca <_printf_i+0x162>
 80034b2:	07ca      	lsls	r2, r1, #31
 80034b4:	bf44      	itt	mi
 80034b6:	f041 0120 	orrmi.w	r1, r1, #32
 80034ba:	6021      	strmi	r1, [r4, #0]
 80034bc:	b91b      	cbnz	r3, 80034c6 <_printf_i+0x15e>
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	f022 0220 	bic.w	r2, r2, #32
 80034c4:	6022      	str	r2, [r4, #0]
 80034c6:	2210      	movs	r2, #16
 80034c8:	e7b7      	b.n	800343a <_printf_i+0xd2>
 80034ca:	064d      	lsls	r5, r1, #25
 80034cc:	bf48      	it	mi
 80034ce:	b29b      	uxthmi	r3, r3
 80034d0:	e7ef      	b.n	80034b2 <_printf_i+0x14a>
 80034d2:	4665      	mov	r5, ip
 80034d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80034d8:	fb02 3311 	mls	r3, r2, r1, r3
 80034dc:	5cc3      	ldrb	r3, [r0, r3]
 80034de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80034e2:	460b      	mov	r3, r1
 80034e4:	2900      	cmp	r1, #0
 80034e6:	d1f5      	bne.n	80034d4 <_printf_i+0x16c>
 80034e8:	e7b9      	b.n	800345e <_printf_i+0xf6>
 80034ea:	6813      	ldr	r3, [r2, #0]
 80034ec:	6825      	ldr	r5, [r4, #0]
 80034ee:	6961      	ldr	r1, [r4, #20]
 80034f0:	1d18      	adds	r0, r3, #4
 80034f2:	6010      	str	r0, [r2, #0]
 80034f4:	0628      	lsls	r0, r5, #24
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	d501      	bpl.n	80034fe <_printf_i+0x196>
 80034fa:	6019      	str	r1, [r3, #0]
 80034fc:	e002      	b.n	8003504 <_printf_i+0x19c>
 80034fe:	066a      	lsls	r2, r5, #25
 8003500:	d5fb      	bpl.n	80034fa <_printf_i+0x192>
 8003502:	8019      	strh	r1, [r3, #0]
 8003504:	2300      	movs	r3, #0
 8003506:	6123      	str	r3, [r4, #16]
 8003508:	4665      	mov	r5, ip
 800350a:	e7b9      	b.n	8003480 <_printf_i+0x118>
 800350c:	6813      	ldr	r3, [r2, #0]
 800350e:	1d19      	adds	r1, r3, #4
 8003510:	6011      	str	r1, [r2, #0]
 8003512:	681d      	ldr	r5, [r3, #0]
 8003514:	6862      	ldr	r2, [r4, #4]
 8003516:	2100      	movs	r1, #0
 8003518:	4628      	mov	r0, r5
 800351a:	f7fc fe79 	bl	8000210 <memchr>
 800351e:	b108      	cbz	r0, 8003524 <_printf_i+0x1bc>
 8003520:	1b40      	subs	r0, r0, r5
 8003522:	6060      	str	r0, [r4, #4]
 8003524:	6863      	ldr	r3, [r4, #4]
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	2300      	movs	r3, #0
 800352a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800352e:	e7a7      	b.n	8003480 <_printf_i+0x118>
 8003530:	6923      	ldr	r3, [r4, #16]
 8003532:	462a      	mov	r2, r5
 8003534:	4639      	mov	r1, r7
 8003536:	4630      	mov	r0, r6
 8003538:	47c0      	blx	r8
 800353a:	3001      	adds	r0, #1
 800353c:	d0aa      	beq.n	8003494 <_printf_i+0x12c>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	079b      	lsls	r3, r3, #30
 8003542:	d413      	bmi.n	800356c <_printf_i+0x204>
 8003544:	68e0      	ldr	r0, [r4, #12]
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	4298      	cmp	r0, r3
 800354a:	bfb8      	it	lt
 800354c:	4618      	movlt	r0, r3
 800354e:	e7a3      	b.n	8003498 <_printf_i+0x130>
 8003550:	2301      	movs	r3, #1
 8003552:	464a      	mov	r2, r9
 8003554:	4639      	mov	r1, r7
 8003556:	4630      	mov	r0, r6
 8003558:	47c0      	blx	r8
 800355a:	3001      	adds	r0, #1
 800355c:	d09a      	beq.n	8003494 <_printf_i+0x12c>
 800355e:	3501      	adds	r5, #1
 8003560:	68e3      	ldr	r3, [r4, #12]
 8003562:	9a03      	ldr	r2, [sp, #12]
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	42ab      	cmp	r3, r5
 8003568:	dcf2      	bgt.n	8003550 <_printf_i+0x1e8>
 800356a:	e7eb      	b.n	8003544 <_printf_i+0x1dc>
 800356c:	2500      	movs	r5, #0
 800356e:	f104 0919 	add.w	r9, r4, #25
 8003572:	e7f5      	b.n	8003560 <_printf_i+0x1f8>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ac      	bne.n	80034d2 <_printf_i+0x16a>
 8003578:	7803      	ldrb	r3, [r0, #0]
 800357a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800357e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003582:	e76c      	b.n	800345e <_printf_i+0xf6>
 8003584:	080037e1 	.word	0x080037e1
 8003588:	080037f2 	.word	0x080037f2

0800358c <memmove>:
 800358c:	4288      	cmp	r0, r1
 800358e:	b510      	push	{r4, lr}
 8003590:	eb01 0302 	add.w	r3, r1, r2
 8003594:	d807      	bhi.n	80035a6 <memmove+0x1a>
 8003596:	1e42      	subs	r2, r0, #1
 8003598:	4299      	cmp	r1, r3
 800359a:	d00a      	beq.n	80035b2 <memmove+0x26>
 800359c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80035a4:	e7f8      	b.n	8003598 <memmove+0xc>
 80035a6:	4283      	cmp	r3, r0
 80035a8:	d9f5      	bls.n	8003596 <memmove+0xa>
 80035aa:	1881      	adds	r1, r0, r2
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	42d3      	cmn	r3, r2
 80035b0:	d100      	bne.n	80035b4 <memmove+0x28>
 80035b2:	bd10      	pop	{r4, pc}
 80035b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80035bc:	e7f7      	b.n	80035ae <memmove+0x22>
	...

080035c0 <_free_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	4605      	mov	r5, r0
 80035c4:	2900      	cmp	r1, #0
 80035c6:	d045      	beq.n	8003654 <_free_r+0x94>
 80035c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035cc:	1f0c      	subs	r4, r1, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bfb8      	it	lt
 80035d2:	18e4      	addlt	r4, r4, r3
 80035d4:	f000 f8d2 	bl	800377c <__malloc_lock>
 80035d8:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <_free_r+0x98>)
 80035da:	6813      	ldr	r3, [r2, #0]
 80035dc:	4610      	mov	r0, r2
 80035de:	b933      	cbnz	r3, 80035ee <_free_r+0x2e>
 80035e0:	6063      	str	r3, [r4, #4]
 80035e2:	6014      	str	r4, [r2, #0]
 80035e4:	4628      	mov	r0, r5
 80035e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035ea:	f000 b8c8 	b.w	800377e <__malloc_unlock>
 80035ee:	42a3      	cmp	r3, r4
 80035f0:	d90c      	bls.n	800360c <_free_r+0x4c>
 80035f2:	6821      	ldr	r1, [r4, #0]
 80035f4:	1862      	adds	r2, r4, r1
 80035f6:	4293      	cmp	r3, r2
 80035f8:	bf04      	itt	eq
 80035fa:	681a      	ldreq	r2, [r3, #0]
 80035fc:	685b      	ldreq	r3, [r3, #4]
 80035fe:	6063      	str	r3, [r4, #4]
 8003600:	bf04      	itt	eq
 8003602:	1852      	addeq	r2, r2, r1
 8003604:	6022      	streq	r2, [r4, #0]
 8003606:	6004      	str	r4, [r0, #0]
 8003608:	e7ec      	b.n	80035e4 <_free_r+0x24>
 800360a:	4613      	mov	r3, r2
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	b10a      	cbz	r2, 8003614 <_free_r+0x54>
 8003610:	42a2      	cmp	r2, r4
 8003612:	d9fa      	bls.n	800360a <_free_r+0x4a>
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	1858      	adds	r0, r3, r1
 8003618:	42a0      	cmp	r0, r4
 800361a:	d10b      	bne.n	8003634 <_free_r+0x74>
 800361c:	6820      	ldr	r0, [r4, #0]
 800361e:	4401      	add	r1, r0
 8003620:	1858      	adds	r0, r3, r1
 8003622:	4282      	cmp	r2, r0
 8003624:	6019      	str	r1, [r3, #0]
 8003626:	d1dd      	bne.n	80035e4 <_free_r+0x24>
 8003628:	6810      	ldr	r0, [r2, #0]
 800362a:	6852      	ldr	r2, [r2, #4]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	4401      	add	r1, r0
 8003630:	6019      	str	r1, [r3, #0]
 8003632:	e7d7      	b.n	80035e4 <_free_r+0x24>
 8003634:	d902      	bls.n	800363c <_free_r+0x7c>
 8003636:	230c      	movs	r3, #12
 8003638:	602b      	str	r3, [r5, #0]
 800363a:	e7d3      	b.n	80035e4 <_free_r+0x24>
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	1821      	adds	r1, r4, r0
 8003640:	428a      	cmp	r2, r1
 8003642:	bf04      	itt	eq
 8003644:	6811      	ldreq	r1, [r2, #0]
 8003646:	6852      	ldreq	r2, [r2, #4]
 8003648:	6062      	str	r2, [r4, #4]
 800364a:	bf04      	itt	eq
 800364c:	1809      	addeq	r1, r1, r0
 800364e:	6021      	streq	r1, [r4, #0]
 8003650:	605c      	str	r4, [r3, #4]
 8003652:	e7c7      	b.n	80035e4 <_free_r+0x24>
 8003654:	bd38      	pop	{r3, r4, r5, pc}
 8003656:	bf00      	nop
 8003658:	20000140 	.word	0x20000140

0800365c <_malloc_r>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	1ccd      	adds	r5, r1, #3
 8003660:	f025 0503 	bic.w	r5, r5, #3
 8003664:	3508      	adds	r5, #8
 8003666:	2d0c      	cmp	r5, #12
 8003668:	bf38      	it	cc
 800366a:	250c      	movcc	r5, #12
 800366c:	2d00      	cmp	r5, #0
 800366e:	4606      	mov	r6, r0
 8003670:	db01      	blt.n	8003676 <_malloc_r+0x1a>
 8003672:	42a9      	cmp	r1, r5
 8003674:	d903      	bls.n	800367e <_malloc_r+0x22>
 8003676:	230c      	movs	r3, #12
 8003678:	6033      	str	r3, [r6, #0]
 800367a:	2000      	movs	r0, #0
 800367c:	bd70      	pop	{r4, r5, r6, pc}
 800367e:	f000 f87d 	bl	800377c <__malloc_lock>
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <_malloc_r+0xac>)
 8003684:	6814      	ldr	r4, [r2, #0]
 8003686:	4621      	mov	r1, r4
 8003688:	b991      	cbnz	r1, 80036b0 <_malloc_r+0x54>
 800368a:	4c20      	ldr	r4, [pc, #128]	; (800370c <_malloc_r+0xb0>)
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	b91b      	cbnz	r3, 8003698 <_malloc_r+0x3c>
 8003690:	4630      	mov	r0, r6
 8003692:	f000 f863 	bl	800375c <_sbrk_r>
 8003696:	6020      	str	r0, [r4, #0]
 8003698:	4629      	mov	r1, r5
 800369a:	4630      	mov	r0, r6
 800369c:	f000 f85e 	bl	800375c <_sbrk_r>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	d124      	bne.n	80036ee <_malloc_r+0x92>
 80036a4:	230c      	movs	r3, #12
 80036a6:	6033      	str	r3, [r6, #0]
 80036a8:	4630      	mov	r0, r6
 80036aa:	f000 f868 	bl	800377e <__malloc_unlock>
 80036ae:	e7e4      	b.n	800367a <_malloc_r+0x1e>
 80036b0:	680b      	ldr	r3, [r1, #0]
 80036b2:	1b5b      	subs	r3, r3, r5
 80036b4:	d418      	bmi.n	80036e8 <_malloc_r+0x8c>
 80036b6:	2b0b      	cmp	r3, #11
 80036b8:	d90f      	bls.n	80036da <_malloc_r+0x7e>
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	50cd      	str	r5, [r1, r3]
 80036be:	18cc      	adds	r4, r1, r3
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 f85c 	bl	800377e <__malloc_unlock>
 80036c6:	f104 000b 	add.w	r0, r4, #11
 80036ca:	1d23      	adds	r3, r4, #4
 80036cc:	f020 0007 	bic.w	r0, r0, #7
 80036d0:	1ac3      	subs	r3, r0, r3
 80036d2:	d0d3      	beq.n	800367c <_malloc_r+0x20>
 80036d4:	425a      	negs	r2, r3
 80036d6:	50e2      	str	r2, [r4, r3]
 80036d8:	e7d0      	b.n	800367c <_malloc_r+0x20>
 80036da:	428c      	cmp	r4, r1
 80036dc:	684b      	ldr	r3, [r1, #4]
 80036de:	bf16      	itet	ne
 80036e0:	6063      	strne	r3, [r4, #4]
 80036e2:	6013      	streq	r3, [r2, #0]
 80036e4:	460c      	movne	r4, r1
 80036e6:	e7eb      	b.n	80036c0 <_malloc_r+0x64>
 80036e8:	460c      	mov	r4, r1
 80036ea:	6849      	ldr	r1, [r1, #4]
 80036ec:	e7cc      	b.n	8003688 <_malloc_r+0x2c>
 80036ee:	1cc4      	adds	r4, r0, #3
 80036f0:	f024 0403 	bic.w	r4, r4, #3
 80036f4:	42a0      	cmp	r0, r4
 80036f6:	d005      	beq.n	8003704 <_malloc_r+0xa8>
 80036f8:	1a21      	subs	r1, r4, r0
 80036fa:	4630      	mov	r0, r6
 80036fc:	f000 f82e 	bl	800375c <_sbrk_r>
 8003700:	3001      	adds	r0, #1
 8003702:	d0cf      	beq.n	80036a4 <_malloc_r+0x48>
 8003704:	6025      	str	r5, [r4, #0]
 8003706:	e7db      	b.n	80036c0 <_malloc_r+0x64>
 8003708:	20000140 	.word	0x20000140
 800370c:	20000144 	.word	0x20000144

08003710 <_realloc_r>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	4607      	mov	r7, r0
 8003714:	4614      	mov	r4, r2
 8003716:	460e      	mov	r6, r1
 8003718:	b921      	cbnz	r1, 8003724 <_realloc_r+0x14>
 800371a:	4611      	mov	r1, r2
 800371c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003720:	f7ff bf9c 	b.w	800365c <_malloc_r>
 8003724:	b922      	cbnz	r2, 8003730 <_realloc_r+0x20>
 8003726:	f7ff ff4b 	bl	80035c0 <_free_r>
 800372a:	4625      	mov	r5, r4
 800372c:	4628      	mov	r0, r5
 800372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003730:	f000 f826 	bl	8003780 <_malloc_usable_size_r>
 8003734:	42a0      	cmp	r0, r4
 8003736:	d20f      	bcs.n	8003758 <_realloc_r+0x48>
 8003738:	4621      	mov	r1, r4
 800373a:	4638      	mov	r0, r7
 800373c:	f7ff ff8e 	bl	800365c <_malloc_r>
 8003740:	4605      	mov	r5, r0
 8003742:	2800      	cmp	r0, #0
 8003744:	d0f2      	beq.n	800372c <_realloc_r+0x1c>
 8003746:	4631      	mov	r1, r6
 8003748:	4622      	mov	r2, r4
 800374a:	f7ff fc11 	bl	8002f70 <memcpy>
 800374e:	4631      	mov	r1, r6
 8003750:	4638      	mov	r0, r7
 8003752:	f7ff ff35 	bl	80035c0 <_free_r>
 8003756:	e7e9      	b.n	800372c <_realloc_r+0x1c>
 8003758:	4635      	mov	r5, r6
 800375a:	e7e7      	b.n	800372c <_realloc_r+0x1c>

0800375c <_sbrk_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	4c06      	ldr	r4, [pc, #24]	; (8003778 <_sbrk_r+0x1c>)
 8003760:	2300      	movs	r3, #0
 8003762:	4605      	mov	r5, r0
 8003764:	4608      	mov	r0, r1
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	f7ff fae2 	bl	8002d30 <_sbrk>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d102      	bne.n	8003776 <_sbrk_r+0x1a>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	b103      	cbz	r3, 8003776 <_sbrk_r+0x1a>
 8003774:	602b      	str	r3, [r5, #0]
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	200001cc 	.word	0x200001cc

0800377c <__malloc_lock>:
 800377c:	4770      	bx	lr

0800377e <__malloc_unlock>:
 800377e:	4770      	bx	lr

08003780 <_malloc_usable_size_r>:
 8003780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003784:	1f18      	subs	r0, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	bfbc      	itt	lt
 800378a:	580b      	ldrlt	r3, [r1, r0]
 800378c:	18c0      	addlt	r0, r0, r3
 800378e:	4770      	bx	lr

08003790 <_init>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr

0800379c <_fini>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr
